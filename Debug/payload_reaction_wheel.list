
payload_reaction_wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  080119b8  080119b8  000129b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fa0  08011fa0  000131ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011fa0  08011fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fa8  08011fa8  000131ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fa8  08011fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fac  08011fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08011fb0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200001ec  0801219c  000131ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cc4  0801219c  00013cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb0e  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c4  00000000  00000000  0002fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000344f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135b  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c32  00000000  00000000  00037123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002360b  00000000  00000000  0005fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6f20  00000000  00000000  00083360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e78  00000000  00000000  0016a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801199c 	.word	0x0801199c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0801199c 	.word	0x0801199c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x9c>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800107a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <MX_ADC1_Init+0xa0>)
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010c2:	f001 fd63 	bl	8002b8c <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 fd48 	bl	8001b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010d0:	2306      	movs	r3, #6
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010d8:	2307      	movs	r3, #7
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x98>)
 80010e2:	f001 fd97 	bl	8002c14 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010ec:	f000 fd38 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000208 	.word	0x20000208
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001118:	4a22      	ldr	r2, [pc, #136]	@ (80011a4 <MX_ADC2_Init+0xa0>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800111e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001126:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800112a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800112c:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001134:	2200      	movs	r2, #0
 8001136:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001142:	2200      	movs	r2, #0
 8001144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <MX_ADC2_Init+0xa4>)
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001154:	2201      	movs	r2, #1
 8001156:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001162:	2201      	movs	r2, #1
 8001164:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001168:	f001 fd10 	bl	8002b8c <HAL_ADC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001172:	f000 fcf5 	bl	8001b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001176:	2303      	movs	r3, #3
 8001178:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800117e:	2303      	movs	r3, #3
 8001180:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <MX_ADC2_Init+0x9c>)
 8001188:	f001 fd44 	bl	8002c14 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001192:	f000 fce5 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000250 	.word	0x20000250
 80011a4:	40012100 	.word	0x40012100
 80011a8:	0f000001 	.word	0x0f000001

080011ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001284 <HAL_ADC_MspInit+0xd8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d128      	bne.n	8001220 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a25      	ldr	r2, [pc, #148]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	@ 0x40
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	@ (800128c <HAL_ADC_MspInit+0xe0>)
 800121a:	f002 fc6f 	bl	8003afc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800121e:	e02c      	b.n	800127a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_ADC_MspInit+0xe4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d127      	bne.n	800127a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	4a15      	ldr	r2, [pc, #84]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001238:	6453      	str	r3, [r2, #68]	@ 0x44
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_ADC_MspInit+0xdc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001262:	2308      	movs	r3, #8
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <HAL_ADC_MspInit+0xe0>)
 8001276:	f002 fc41 	bl	8003afc <HAL_GPIO_Init>
}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012000 	.word	0x40012000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000
 8001290:	40012100 	.word	0x40012100

08001294 <data_logger_init>:
FRESULT fres; 	//Result after operations

//For file operation functions look at https://elm-chan.org/fsw/ff/00index_e.html

void data_logger_init()
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b0cc      	sub	sp, #304	@ 0x130
 8001298:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1);
 800129a:	2201      	movs	r2, #1
 800129c:	4918      	ldr	r1, [pc, #96]	@ (8001300 <data_logger_init+0x6c>)
 800129e:	4819      	ldr	r0, [pc, #100]	@ (8001304 <data_logger_init+0x70>)
 80012a0:	f00a fa2c 	bl	800b6fc <f_mount>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <data_logger_init+0x74>)
 80012aa:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "paylod.csv", FA_WRITE | FA_OPEN_ALWAYS);
 80012ac:	2212      	movs	r2, #18
 80012ae:	4917      	ldr	r1, [pc, #92]	@ (800130c <data_logger_init+0x78>)
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <data_logger_init+0x7c>)
 80012b2:	f00a fa69 	bl	800b788 <f_open>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <data_logger_init+0x74>)
 80012bc:	701a      	strb	r2, [r3, #0]
	f_lseek(&fil, f_size(&fil));
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <data_logger_init+0x7c>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <data_logger_init+0x7c>)
 80012c6:	f00a fe36 	bl	800bf36 <f_lseek>
	unsigned int file_res = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint8_t p_data[300];
	sprintf((char*) p_data, (char*)"time,angle_of_cylinder,pwm,error_angle\n");
 80012d0:	463b      	mov	r3, r7
 80012d2:	4910      	ldr	r1, [pc, #64]	@ (8001314 <data_logger_init+0x80>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00c f883 	bl	800d3e0 <siprintf>
	f_write(&fil, (uint8_t*) p_data, strlen((char*)p_data), &file_res);
 80012da:	463b      	mov	r3, r7
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ffe7 	bl	80002b0 <strlen>
 80012e2:	4602      	mov	r2, r0
 80012e4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80012e8:	4639      	mov	r1, r7
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <data_logger_init+0x7c>)
 80012ec:	f00a fc06 	bl	800bafc <f_write>
	f_close(&fil);
 80012f0:	4807      	ldr	r0, [pc, #28]	@ (8001310 <data_logger_init+0x7c>)
 80012f2:	f00a fdf6 	bl	800bee2 <f_close>
}
 80012f6:	bf00      	nop
 80012f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	080119b8 	.word	0x080119b8
 8001304:	20000298 	.word	0x20000298
 8001308:	200006f8 	.word	0x200006f8
 800130c:	080119bc 	.word	0x080119bc
 8001310:	200004c8 	.word	0x200004c8
 8001314:	080119c8 	.word	0x080119c8

08001318 <log_datas>:

void log_datas(uint32_t time, float angle_of_cylinder, int pwm, float error_angle)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b0d6      	sub	sp, #344	@ 0x158
 800131c:	af06      	add	r7, sp, #24
 800131e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001322:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001326:	6018      	str	r0, [r3, #0]
 8001328:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800132c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001330:	ed83 0a00 	vstr	s0, [r3]
 8001334:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001338:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800133c:	6019      	str	r1, [r3, #0]
 800133e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001342:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001346:	edc3 0a00 	vstr	s1, [r3]
	fres = f_open(&fil, "paylod.csv", FA_WRITE | FA_OPEN_ALWAYS);
 800134a:	2212      	movs	r2, #18
 800134c:	4925      	ldr	r1, [pc, #148]	@ (80013e4 <log_datas+0xcc>)
 800134e:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <log_datas+0xd0>)
 8001350:	f00a fa1a 	bl	800b788 <f_open>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <log_datas+0xd4>)
 800135a:	701a      	strb	r2, [r3, #0]
	f_lseek(&fil, f_size(&fil));
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <log_datas+0xd0>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	4619      	mov	r1, r3
 8001362:	4821      	ldr	r0, [pc, #132]	@ (80013e8 <log_datas+0xd0>)
 8001364:	f00a fde7 	bl	800bf36 <f_lseek>
	unsigned int file_res = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	uint8_t p_data[300];
	sprintf((char*) p_data, (char*)"%lu,%f,%d,%f\n", time, angle_of_cylinder, pwm, error_angle);
 800136e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f7ff f906 	bl	8000588 <__aeabi_f2d>
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001384:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	f7ff f8fd 	bl	8000588 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8001396:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800139a:	f107 0010 	add.w	r0, r7, #16
 800139e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	e9cd 4500 	strd	r4, r5, [sp]
 80013b2:	680a      	ldr	r2, [r1, #0]
 80013b4:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <log_datas+0xd8>)
 80013b6:	f00c f813 	bl	800d3e0 <siprintf>
	f_write(&fil, (uint8_t*) p_data, strlen((char*)p_data), &file_res);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff76 	bl	80002b0 <strlen>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80013ca:	f107 0110 	add.w	r1, r7, #16
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <log_datas+0xd0>)
 80013d0:	f00a fb94 	bl	800bafc <f_write>
	f_close(&fil);
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <log_datas+0xd0>)
 80013d6:	f00a fd84 	bl	800bee2 <f_close>
}
 80013da:	bf00      	nop
 80013dc:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	080119bc 	.word	0x080119bc
 80013e8:	200004c8 	.word	0x200004c8
 80013ec:	200006f8 	.word	0x200006f8
 80013f0:	080119f0 	.word	0x080119f0

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <MX_DMA_Init+0x3c>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	200e      	movs	r0, #14
 800141c:	f001 ff27 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001420:	200e      	movs	r0, #14
 8001422:	f001 ff40 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b43      	ldr	r3, [pc, #268]	@ (800155c <MX_GPIO_Init+0x128>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a42      	ldr	r2, [pc, #264]	@ (800155c <MX_GPIO_Init+0x128>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b40      	ldr	r3, [pc, #256]	@ (800155c <MX_GPIO_Init+0x128>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b3c      	ldr	r3, [pc, #240]	@ (800155c <MX_GPIO_Init+0x128>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a3b      	ldr	r2, [pc, #236]	@ (800155c <MX_GPIO_Init+0x128>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b39      	ldr	r3, [pc, #228]	@ (800155c <MX_GPIO_Init+0x128>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <MX_GPIO_Init+0x128>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a34      	ldr	r2, [pc, #208]	@ (800155c <MX_GPIO_Init+0x128>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b32      	ldr	r3, [pc, #200]	@ (800155c <MX_GPIO_Init+0x128>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <MX_GPIO_Init+0x128>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a2d      	ldr	r2, [pc, #180]	@ (800155c <MX_GPIO_Init+0x128>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_GPIO_Init+0x128>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MD_IN_B_Pin|BUZZER_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f249 0110 	movw	r1, #36880	@ 0x9010
 80014c0:	4827      	ldr	r0, [pc, #156]	@ (8001560 <MX_GPIO_Init+0x12c>)
 80014c2:	f002 fcaf 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_Pin|SENSOR_EN_Pin|MD_IN_A_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80014cc:	4825      	ldr	r0, [pc, #148]	@ (8001564 <MX_GPIO_Init+0x130>)
 80014ce:	f002 fca9 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MD_IN_B_Pin|BUZZER_Pin|SD_CS_Pin;
 80014d2:	f249 0310 	movw	r3, #36880	@ 0x9010
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	481d      	ldr	r0, [pc, #116]	@ (8001560 <MX_GPIO_Init+0x12c>)
 80014ec:	f002 fb06 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MD_ISEN_B_Pin|MD_ISEN_A_Pin;
 80014f0:	23a0      	movs	r3, #160	@ 0xa0
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	@ (8001560 <MX_GPIO_Init+0x12c>)
 8001504:	f002 fafa 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|SENSOR_EN_Pin|MD_IN_A_Pin;
 8001508:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4810      	ldr	r0, [pc, #64]	@ (8001564 <MX_GPIO_Init+0x130>)
 8001522:	f002 faeb 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INT2_XL_Pin|INT_GYRO_Pin|INT_ACC_Pin;
 8001526:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <MX_GPIO_Init+0x130>)
 800153e:	f002 fadd 	bl	8003afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2017      	movs	r0, #23
 8001548:	f001 fe91 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800154c:	2017      	movs	r0, #23
 800154e:	f001 feaa 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400

08001568 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f002 fc6f 	bl	8003e88 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 fad6 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200006fc 	.word	0x200006fc
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <MX_I2C3_Init+0x54>)
 80015cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <MX_I2C3_Init+0x58>)
 80015d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_I2C3_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_I2C3_Init+0x50>)
 8001602:	f002 fc41 	bl	8003e88 <HAL_I2C_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800160c:	f000 faa8 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000750 	.word	0x20000750
 8001618:	40005c00 	.word	0x40005c00
 800161c:	000186a0 	.word	0x000186a0

08001620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a42      	ldr	r2, [pc, #264]	@ (8001748 <HAL_I2C_MspInit+0x128>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12c      	bne.n	800169c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a40      	ldr	r2, [pc, #256]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b3e      	ldr	r3, [pc, #248]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	@ 0xc0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166e:	2304      	movs	r3, #4
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4835      	ldr	r0, [pc, #212]	@ (8001750 <HAL_I2C_MspInit+0x130>)
 800167a:	f002 fa3f 	bl	8003afc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b32      	ldr	r3, [pc, #200]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a31      	ldr	r2, [pc, #196]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800169a:	e050      	b.n	800173e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <HAL_I2C_MspInit+0x134>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d14b      	bne.n	800173e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b28      	ldr	r3, [pc, #160]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a27      	ldr	r2, [pc, #156]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a20      	ldr	r2, [pc, #128]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e4:	2312      	movs	r3, #18
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f0:	2304      	movs	r3, #4
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4817      	ldr	r0, [pc, #92]	@ (8001758 <HAL_I2C_MspInit+0x138>)
 80016fc:	f002 f9fe 	bl	8003afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001712:	2304      	movs	r3, #4
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	480f      	ldr	r0, [pc, #60]	@ (800175c <HAL_I2C_MspInit+0x13c>)
 800171e:	f002 f9ed 	bl	8003afc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 800172c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_I2C_MspInit+0x12c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
}
 800173e:	bf00      	nop
 8001740:	3730      	adds	r7, #48	@ 0x30
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400
 8001754:	40005c00 	.word	0x40005c00
 8001758:	40020800 	.word	0x40020800
 800175c:	40020000 	.word	0x40020000

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b087      	sub	sp, #28
 8001764:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f001 f97b 	bl	8002a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176a:	f000 f8cf 	bl	800190c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f7ff fe61 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 8001772:	f7ff fe3f 	bl	80013f4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001776:	f7ff fef7 	bl	8001568 <MX_I2C1_Init>
  MX_I2C3_Init();
 800177a:	f7ff ff23 	bl	80015c4 <MX_I2C3_Init>
  MX_SPI3_Init();
 800177e:	f000 fbd9 	bl	8001f34 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001782:	f001 f875 	bl	8002870 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001786:	f000 fdd1 	bl	800232c <MX_TIM1_Init>
  MX_ADC1_Init();
 800178a:	f7ff fc69 	bl	8001060 <MX_ADC1_Init>
  MX_ADC2_Init();
 800178e:	f7ff fcb9 	bl	8001104 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001792:	f000 fe6b 	bl	800246c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001796:	f000 ff15 	bl	80025c4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800179a:	f000 febb 	bl	8002514 <MX_TIM3_Init>
  MX_FATFS_Init();
 800179e:	f007 fd23 	bl	80091e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  reg_3v3_off();
 80017a2:	f000 f983 	bl	8001aac <reg_3v3_off>
  reg_3v3_on();
 80017a6:	f000 f971 	bl	8001a8c <reg_3v3_on>
  	uint8_t bmi_ret = bmi_begin();
 80017aa:	f000 f921 	bl	80019f0 <bmi_begin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    if(bmi_ret)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01d      	beq.n	80017f4 <main+0x94>
    {
  	  serial_println("bmi fail", &TTL_HNDLR);
 80017b8:	4945      	ldr	r1, [pc, #276]	@ (80018d0 <main+0x170>)
 80017ba:	4846      	ldr	r0, [pc, #280]	@ (80018d4 <main+0x174>)
 80017bc:	f000 f9a0 	bl	8001b00 <serial_println>
        if((bmi_ret & 0x01) == 0x01)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <main+0x7a>
        {
          sprintf((char*)str, "error in accel");
 80017ca:	4943      	ldr	r1, [pc, #268]	@ (80018d8 <main+0x178>)
 80017cc:	4843      	ldr	r0, [pc, #268]	@ (80018dc <main+0x17c>)
 80017ce:	f00b fe07 	bl	800d3e0 <siprintf>
          serial_println((char*) str, &TTL_HNDLR);
 80017d2:	493f      	ldr	r1, [pc, #252]	@ (80018d0 <main+0x170>)
 80017d4:	4841      	ldr	r0, [pc, #260]	@ (80018dc <main+0x17c>)
 80017d6:	f000 f993 	bl	8001b00 <serial_println>
        }
        if((bmi_ret & 0x02) == 0x02)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <main+0x94>
        {
          sprintf((char*)str, "error in gyro");
 80017e4:	493e      	ldr	r1, [pc, #248]	@ (80018e0 <main+0x180>)
 80017e6:	483d      	ldr	r0, [pc, #244]	@ (80018dc <main+0x17c>)
 80017e8:	f00b fdfa 	bl	800d3e0 <siprintf>
          serial_println((char*) str, &TTL_HNDLR);
 80017ec:	4938      	ldr	r1, [pc, #224]	@ (80018d0 <main+0x170>)
 80017ee:	483b      	ldr	r0, [pc, #236]	@ (80018dc <main+0x17c>)
 80017f0:	f000 f986 	bl	8001b00 <serial_println>
        }
    }

    Motor_Servo_Init(&htim3);
 80017f4:	483b      	ldr	r0, [pc, #236]	@ (80018e4 <main+0x184>)
 80017f6:	f000 f9b9 	bl	8001b6c <Motor_Servo_Init>
	bmi088_config(&bmi_imu_s);
 80017fa:	483b      	ldr	r0, [pc, #236]	@ (80018e8 <main+0x188>)
 80017fc:	f006 ff5a 	bl	80086b4 <bmi088_config>
	get_offset(&bmi_imu_s);
 8001800:	4839      	ldr	r0, [pc, #228]	@ (80018e8 <main+0x188>)
 8001802:	f007 fc85 	bl	8009110 <get_offset>

	HAL_TIM_Base_Start_IT(&htim4);
 8001806:	4839      	ldr	r0, [pc, #228]	@ (80018ec <main+0x18c>)
 8001808:	f004 fdb8 	bl	800637c <HAL_TIM_Base_Start_IT>

	data_logger_init();
 800180c:	f7ff fd42 	bl	8001294 <data_logger_init>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001816:	4836      	ldr	r0, [pc, #216]	@ (80018f0 <main+0x190>)
 8001818:	f002 fb04 	bl	8003e24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001820:	f001 f990 	bl	8002b44 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <main+0x190>)
 800182c:	f002 fafa 	bl	8003e24 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart3, str, strlen((char*)str), 50);
*/

//	  sprintf((char*)str, "encoder =  %lu\n\r", (TIM2->CNT)>>2);
//	  HAL_UART_Transmit(&TTL_HNDLR, str, strlen((char*)str), 50);
	  if(is_started == 0 && (bmi_imu_s.datas.acc_x > 3000))
 8001830:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <main+0x194>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d110      	bne.n	800185a <main+0xfa>
 8001838:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <main+0x188>)
 800183a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800183e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80018f8 <main+0x198>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd06      	ble.n	800185a <main+0xfa>
	  {
		  is_started = 1;
 800184c:	4b29      	ldr	r3, [pc, #164]	@ (80018f4 <main+0x194>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
		  bmi_imu_s.datas.gyro_x = 0;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <main+0x188>)
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
	  }
	  bmi088_update(&bmi_imu_s);
 800185a:	4823      	ldr	r0, [pc, #140]	@ (80018e8 <main+0x188>)
 800185c:	f007 f92c 	bl	8008ab8 <bmi088_update>

	  if(is_500ms)
 8001860:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <main+0x19c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0e3      	beq.n	8001830 <main+0xd0>
	  {
		  log_datas(HAL_GetTick(), bmi_imu_s.datas.gyro_x_angle, pulse, error);
 8001868:	f001 f960 	bl	8002b2c <HAL_GetTick>
 800186c:	4603      	mov	r3, r0
 800186e:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <main+0x188>)
 8001870:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <main+0x1a0>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4a22      	ldr	r2, [pc, #136]	@ (8001904 <main+0x1a4>)
 800187c:	ed92 7a00 	vldr	s14, [r2]
 8001880:	eef0 0a47 	vmov.f32	s1, s14
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd45 	bl	8001318 <log_datas>
		  sprintf((char*)str, "angle_ x:%f pwm:%lu error:%f\n\r", bmi_imu_s.datas.gyro_x_angle, pulse, error);
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <main+0x188>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe78 	bl	8000588 <__aeabi_f2d>
 8001898:	4604      	mov	r4, r0
 800189a:	460d      	mov	r5, r1
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <main+0x1a0>)
 800189e:	681e      	ldr	r6, [r3, #0]
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <main+0x1a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe6f 	bl	8000588 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b2:	9600      	str	r6, [sp, #0]
 80018b4:	4622      	mov	r2, r4
 80018b6:	462b      	mov	r3, r5
 80018b8:	4913      	ldr	r1, [pc, #76]	@ (8001908 <main+0x1a8>)
 80018ba:	4808      	ldr	r0, [pc, #32]	@ (80018dc <main+0x17c>)
 80018bc:	f00b fd90 	bl	800d3e0 <siprintf>
		  serial_println((char*)str, &TTL_HNDLR);
 80018c0:	4903      	ldr	r1, [pc, #12]	@ (80018d0 <main+0x170>)
 80018c2:	4806      	ldr	r0, [pc, #24]	@ (80018dc <main+0x17c>)
 80018c4:	f000 f91c 	bl	8001b00 <serial_println>
		  is_500ms = 0;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <main+0x19c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	  if(is_started == 0 && (bmi_imu_s.datas.acc_x > 3000))
 80018ce:	e7af      	b.n	8001830 <main+0xd0>
 80018d0:	20000a80 	.word	0x20000a80
 80018d4:	08011a00 	.word	0x08011a00
 80018d8:	08011a0c 	.word	0x08011a0c
 80018dc:	2000080c 	.word	0x2000080c
 80018e0:	08011a1c 	.word	0x08011a1c
 80018e4:	200009f0 	.word	0x200009f0
 80018e8:	200007a4 	.word	0x200007a4
 80018ec:	20000a38 	.word	0x20000a38
 80018f0:	40020000 	.word	0x40020000
 80018f4:	200008d5 	.word	0x200008d5
 80018f8:	453b8000 	.word	0x453b8000
 80018fc:	200008d4 	.word	0x200008d4
 8001900:	20000900 	.word	0x20000900
 8001904:	200008fc 	.word	0x200008fc
 8001908:	08011a2c 	.word	0x08011a2c

0800190c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b094      	sub	sp, #80	@ 0x50
 8001910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2234      	movs	r2, #52	@ 0x34
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f00b fdc5 	bl	800d4aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b2c      	ldr	r3, [pc, #176]	@ (80019e8 <SystemClock_Config+0xdc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	4a2b      	ldr	r2, [pc, #172]	@ (80019e8 <SystemClock_Config+0xdc>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <SystemClock_Config+0xdc>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	2300      	movs	r3, #0
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <SystemClock_Config+0xe0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	@ (80019ec <SystemClock_Config+0xe0>)
 8001956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <SystemClock_Config+0xe0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001970:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001972:	2302      	movs	r3, #2
 8001974:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001976:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800197c:	2304      	movs	r3, #4
 800197e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001980:	23b4      	movs	r3, #180	@ 0xb4
 8001982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800198c:	2302      	movs	r3, #2
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fdd1 	bl	800553c <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a0:	f000 f8de 	bl	8001b60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019a4:	f003 fa30 	bl	8004e08 <HAL_PWREx_EnableOverDrive>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019ae:	f000 f8d7 	bl	8001b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	230f      	movs	r3, #15
 80019b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b6:	2302      	movs	r3, #2
 80019b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	2105      	movs	r1, #5
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fa69 	bl	8004ea8 <HAL_RCC_ClockConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019dc:	f000 f8c0 	bl	8001b60 <Error_Handler>
  }
}
 80019e0:	bf00      	nop
 80019e2:	3750      	adds	r7, #80	@ 0x50
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <bmi_begin>:

/* USER CODE BEGIN 4 */
uint8_t bmi_begin(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	//Acc config
	bmi_imu_s.device_config.acc_bandwith = ACC_BWP_OSR4;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <bmi_begin+0x58>)
 80019f6:	2208      	movs	r2, #8
 80019f8:	719a      	strb	r2, [r3, #6]
	bmi_imu_s.device_config.acc_outputDateRate = ACC_ODR_200;
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <bmi_begin+0x58>)
 80019fc:	2209      	movs	r2, #9
 80019fe:	71da      	strb	r2, [r3, #7]
	bmi_imu_s.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <bmi_begin+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	711a      	strb	r2, [r3, #4]
	bmi_imu_s.device_config.acc_range = ACC_RANGE_24G;
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <bmi_begin+0x58>)
 8001a08:	2203      	movs	r2, #3
 8001a0a:	715a      	strb	r2, [r3, #5]

	// Gyro config
	bmi_imu_s.device_config.gyro_bandWidth = GYRO_BW_116;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <bmi_begin+0x58>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	725a      	strb	r2, [r3, #9]
	bmi_imu_s.device_config.gyro_range = GYRO_RANGE_2000;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <bmi_begin+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	729a      	strb	r2, [r3, #10]
	bmi_imu_s.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <bmi_begin+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	721a      	strb	r2, [r3, #8]

	//Device config
	bmi_imu_s.device_config.acc_IRQ = EXTI9_5_IRQn;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <bmi_begin+0x58>)
 8001a20:	2217      	movs	r2, #23
 8001a22:	741a      	strb	r2, [r3, #16]
	bmi_imu_s.device_config.gyro_IRQ = EXTI9_5_IRQn;
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <bmi_begin+0x58>)
 8001a26:	2217      	movs	r2, #23
 8001a28:	745a      	strb	r2, [r3, #17]
	bmi_imu_s.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <bmi_begin+0x58>)
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <bmi_begin+0x5c>)
 8001a2e:	60da      	str	r2, [r3, #12]
	bmi_imu_s.device_config.offsets = NULL;	//Offset datas stored in backup sram for saving them unwanted reset.
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <bmi_begin+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
	bmi_imu_s.IMU_callback = bmi_callback;
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <bmi_begin+0x58>)
 8001a38:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <bmi_begin+0x60>)
 8001a3a:	665a      	str	r2, [r3, #100]	@ 0x64
	return	bmi088_init(&bmi_imu_s);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <bmi_begin+0x58>)
 8001a3e:	f006 fde1 	bl	8008604 <bmi088_init>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200007a4 	.word	0x200007a4
 8001a4c:	200006fc 	.word	0x200006fc
 8001a50:	08001a55 	.word	0x08001a55

08001a54 <bmi_callback>:
void bmi_callback(bmi088_struct_t *BMI)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    if(is_started == 1)
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <bmi_callback+0x2c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <bmi_callback+0x22>
    {
    	float current_angle = bmi_imu_s.datas.gyro_x_angle;
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <bmi_callback+0x30>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	60fb      	str	r3, [r7, #12]
    	Motor_Servo_Control(current_angle, TARGET_ANGLE);
 8001a6a:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8001a88 <bmi_callback+0x34>
 8001a6e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a72:	f000 f8a5 	bl	8001bc0 <Motor_Servo_Control>
    }

}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200008d5 	.word	0x200008d5
 8001a84:	200007a4 	.word	0x200007a4
 8001a88:	00000000 	.word	0x00000000

08001a8c <reg_3v3_on>:

//Pcb 3.3 v regulator on function.
void reg_3v3_on()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SENSOR_EN_GPIO_Port, SENSOR_EN_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <reg_3v3_on+0x1c>)
 8001a98:	f002 f9c4 	bl	8003e24 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001a9c:	2032      	movs	r0, #50	@ 0x32
 8001a9e:	f001 f851 	bl	8002b44 <HAL_Delay>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40020400 	.word	0x40020400

08001aac <reg_3v3_off>:

//Pcb 3.3 v regulator off function.
void reg_3v3_off()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SENSOR_EN_GPIO_Port, SENSOR_EN_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab6:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <reg_3v3_off+0x1c>)
 8001ab8:	f002 f9b4 	bl	8003e24 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001abc:	2032      	movs	r0, #50	@ 0x32
 8001abe:	f001 f841 	bl	8002b44 <HAL_Delay>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001adc:	d102      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&bmi_imu_s);
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <HAL_GPIO_EXTI_Callback+0x30>)
 8001ae0:	f007 fafc 	bl	80090dc <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == INT_GYRO_Pin)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aea:	d102      	bne.n	8001af2 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&bmi_imu_s);
 8001aec:	4803      	ldr	r0, [pc, #12]	@ (8001afc <HAL_GPIO_EXTI_Callback+0x30>)
 8001aee:	f007 fb02 	bl	80090f6 <bmi088_set_gyro_INT>
	}
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200007a4 	.word	0x200007a4

08001b00 <serial_println>:

void serial_println(char* str, UART_HandleTypeDef *huart_disp)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(huart_disp, (uint8_t*)str, strlen(str));
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fbd0 	bl	80002b0 <strlen>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f005 fd57 	bl	80075cc <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(huart_disp, (uint8_t*)"\r\n", 2);
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4903      	ldr	r1, [pc, #12]	@ (8001b30 <serial_println+0x30>)
 8001b22:	6838      	ldr	r0, [r7, #0]
 8001b24:	f005 fd52 	bl	80075cc <HAL_UART_Transmit_DMA>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	08011a4c 	.word	0x08011a4c

08001b34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d102      	bne.n	8001b4c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		is_500ms = 1;
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	200008d4 	.word	0x200008d4

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <Error_Handler+0x8>

08001b6c <Motor_Servo_Init>:
float error = 0;
uint32_t pulse = 0;

// Motor servo sistemini başlat
void Motor_Servo_Init(TIM_HandleTypeDef *htim_pwm)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    pwm_timer = htim_pwm;
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <Motor_Servo_Init+0x40>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
    
    // PID parametrelerini ayarla (ihtiyacınıza göre ayarlayın)
    PID_Init(&motor_pid, KP, KI, KD);
 8001b7a:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8001bb0 <Motor_Servo_Init+0x44>
 8001b7e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001bb4 <Motor_Servo_Init+0x48>
 8001b82:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001b86:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <Motor_Servo_Init+0x4c>)
 8001b88:	f000 f930 	bl	8001dec <PID_Init>
    
    // PWM'i başlat (MD_PWM kanalını kullanıyoruz)
    HAL_TIM_PWM_Start(pwm_timer, TIM_CHANNEL_3); // Kanal numarasını kendi setup'ınıza göre değiştirin
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <Motor_Servo_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2108      	movs	r1, #8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fcb2 	bl	80064fc <HAL_TIM_PWM_Start>

    // İlk zamanı al
    last_time = HAL_GetTick();
 8001b98:	f000 ffc8 	bl	8002b2c <HAL_GetTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <Motor_Servo_Init+0x50>)
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200008d8 	.word	0x200008d8
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	3c23d70a 	.word	0x3c23d70a
 8001bb8:	200008dc 	.word	0x200008dc
 8001bbc:	200008f8 	.word	0x200008f8

08001bc0 <Motor_Servo_Control>:

// Ana servo kontrol fonksiyonu
void Motor_Servo_Control(float current_angle, float target_angle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bca:	edc7 0a00 	vstr	s1, [r7]
    // Zaman farkını hesapla
    uint32_t current_time = HAL_GetTick();
 8001bce:	f000 ffad 	bl	8002b2c <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]
    float dt = (current_time - last_time) / 1000.0f; // Saniye cinsinden
 8001bd4:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <Motor_Servo_Control+0x138>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001cfc <Motor_Servo_Control+0x13c>
 8001be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bec:	edc7 7a04 	vstr	s15, [r7, #16]
    last_time = current_time;
 8001bf0:	4a41      	ldr	r2, [pc, #260]	@ (8001cf8 <Motor_Servo_Control+0x138>)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	6013      	str	r3, [r2, #0]
    
    // Açı farkını hesapla
    error = target_angle - current_angle;
 8001bf6:	ed97 7a00 	vldr	s14, [r7]
 8001bfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	4b3f      	ldr	r3, [pc, #252]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
    
    // Açı farkını -180 ile +180 arasına normalize et
    while (error > 180.0f) error -= 360.0f;
 8001c08:	e009      	b.n	8001c1e <Motor_Servo_Control+0x5e>
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001d04 <Motor_Servo_Control+0x144>
 8001c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c18:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d08 <Motor_Servo_Control+0x148>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	dceb      	bgt.n	8001c0a <Motor_Servo_Control+0x4a>
    while (error < -180.0f) error += 360.0f;
 8001c32:	e009      	b.n	8001c48 <Motor_Servo_Control+0x88>
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d04 <Motor_Servo_Control+0x144>
 8001c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c42:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001d0c <Motor_Servo_Control+0x14c>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d4eb      	bmi.n	8001c34 <Motor_Servo_Control+0x74>
    
    // PID hesapla
    float pid_output = PID_Calculate(&motor_pid, error, dt);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	edd7 0a04 	vldr	s1, [r7, #16]
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	4829      	ldr	r0, [pc, #164]	@ (8001d10 <Motor_Servo_Control+0x150>)
 8001c6c:	f000 f8ea 	bl	8001e44 <PID_Calculate>
 8001c70:	ed87 0a03 	vstr	s0, [r7, #12]
    
    // Dead zone - küçük hatalar için motoru durdur
    if (fabs(error) < 1.0f) {
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <Motor_Servo_Control+0x140>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d502      	bpl.n	8001c92 <Motor_Servo_Control+0xd2>
        Motor_Stop();
 8001c8c:	f000 f8a4 	bl	8001dd8 <Motor_Stop>
        return;
 8001c90:	e02f      	b.n	8001cf2 <Motor_Servo_Control+0x132>
    }
    
    // Motor yönünü ve hızını ayarla
    if (pid_output > 0) {
 8001c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd0f      	ble.n	8001cc0 <Motor_Servo_Control+0x100>
        Motor_Set_Direction(MOTOR_FORWARD);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f000 f837 	bl	8001d14 <Motor_Set_Direction>
        Motor_Set_Speed((uint16_t)fabs(pid_output));
 8001ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001caa:	eef0 7ae7 	vabs.f32	s15, s15
 8001cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb2:	ee17 3a90 	vmov	r3, s15
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f863 	bl	8001d84 <Motor_Set_Speed>
 8001cbe:	e018      	b.n	8001cf2 <Motor_Servo_Control+0x132>
    } else if (pid_output < 0) {
 8001cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	d50f      	bpl.n	8001cee <Motor_Servo_Control+0x12e>
        Motor_Set_Direction(MOTOR_BACKWARD);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f000 f820 	bl	8001d14 <Motor_Set_Direction>
        Motor_Set_Speed((uint16_t)fabs(pid_output));
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	eef0 7ae7 	vabs.f32	s15, s15
 8001cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce0:	ee17 3a90 	vmov	r3, s15
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f84c 	bl	8001d84 <Motor_Set_Speed>
 8001cec:	e001      	b.n	8001cf2 <Motor_Servo_Control+0x132>
    } else {
        Motor_Stop();
 8001cee:	f000 f873 	bl	8001dd8 <Motor_Stop>
    }
}
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200008f8 	.word	0x200008f8
 8001cfc:	447a0000 	.word	0x447a0000
 8001d00:	200008fc 	.word	0x200008fc
 8001d04:	43b40000 	.word	0x43b40000
 8001d08:	43340000 	.word	0x43340000
 8001d0c:	c3340000 	.word	0xc3340000
 8001d10:	200008dc 	.word	0x200008dc

08001d14 <Motor_Set_Direction>:

// Motor yönünü ayarla
void Motor_Set_Direction(Motor_Direction direction)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    switch (direction) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <Motor_Set_Direction+0x16>
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d00c      	beq.n	8001d42 <Motor_Set_Direction+0x2e>
 8001d28:	e017      	b.n	8001d5a <Motor_Set_Direction+0x46>
        case MOTOR_FORWARD:
            HAL_GPIO_WritePin(MD_INA_PORT, MD_INA_PIN, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d30:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <Motor_Set_Direction+0x68>)
 8001d32:	f002 f877 	bl	8003e24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MD_INB_PORT, MD_INB_PIN, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4811      	ldr	r0, [pc, #68]	@ (8001d80 <Motor_Set_Direction+0x6c>)
 8001d3c:	f002 f872 	bl	8003e24 <HAL_GPIO_WritePin>

            break;
 8001d40:	e017      	b.n	8001d72 <Motor_Set_Direction+0x5e>
            
        case MOTOR_BACKWARD:
            HAL_GPIO_WritePin(MD_INA_PORT, MD_INA_PIN, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <Motor_Set_Direction+0x68>)
 8001d4a:	f002 f86b 	bl	8003e24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MD_INB_PORT, MD_INB_PIN, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2110      	movs	r1, #16
 8001d52:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <Motor_Set_Direction+0x6c>)
 8001d54:	f002 f866 	bl	8003e24 <HAL_GPIO_WritePin>
            break;
 8001d58:	e00b      	b.n	8001d72 <Motor_Set_Direction+0x5e>
            
        case MOTOR_STOP:
        default:
            HAL_GPIO_WritePin(MD_INA_PORT, MD_INA_PIN, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d60:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <Motor_Set_Direction+0x68>)
 8001d62:	f002 f85f 	bl	8003e24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(MD_INB_PORT, MD_INB_PIN, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <Motor_Set_Direction+0x6c>)
 8001d6c:	f002 f85a 	bl	8003e24 <HAL_GPIO_WritePin>
            break;
 8001d70:	bf00      	nop
    }
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020000 	.word	0x40020000

08001d84 <Motor_Set_Speed>:

// Motor hızını ayarla (0-1000 arası değer)
void Motor_Set_Speed(uint16_t speed)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
    // Hızı sınırla
    if (speed > 1000) speed = 1000;
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d94:	d902      	bls.n	8001d9c <Motor_Set_Speed+0x18>
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	80fb      	strh	r3, [r7, #6]
    
    // PWM duty cycle'ını ayarla
    pulse = (speed * (pwm_timer->Init.Period)) / 1000;
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dcc <Motor_Set_Speed+0x48>)
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	68d2      	ldr	r2, [r2, #12]
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <Motor_Set_Speed+0x4c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	099b      	lsrs	r3, r3, #6
 8001db0:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <Motor_Set_Speed+0x50>)
 8001db2:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(pwm_timer, TIM_CHANNEL_3, pulse);
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <Motor_Set_Speed+0x48>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a06      	ldr	r2, [pc, #24]	@ (8001dd4 <Motor_Set_Speed+0x50>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	200008d8 	.word	0x200008d8
 8001dd0:	10624dd3 	.word	0x10624dd3
 8001dd4:	20000900 	.word	0x20000900

08001dd8 <Motor_Stop>:

// Motoru durdur
void Motor_Stop(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    Motor_Set_Direction(MOTOR_STOP);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff ff99 	bl	8001d14 <Motor_Set_Direction>
    Motor_Set_Speed(0);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff ffce 	bl	8001d84 <Motor_Set_Speed>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <PID_Init>:

// PID controller'ı başlat
void PID_Init(PID_Controller *pid, float kp, float ki, float kd)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001df8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dfc:	ed87 1a00 	vstr	s2, [r7]
    pid->kp = kp;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	609a      	str	r2, [r3, #8]
    pid->integral = 0.0f;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
    pid->max_output = 1000.0f;  // Maksimum motor hızı
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <PID_Init+0x50>)
 8001e26:	615a      	str	r2, [r3, #20]
    pid->min_output = -1000.0f; // Minimum motor hızı
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <PID_Init+0x54>)
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	447a0000 	.word	0x447a0000
 8001e40:	c47a0000 	.word	0xc47a0000

08001e44 <PID_Calculate>:

// PID hesaplama
float PID_Calculate(PID_Controller *pid, float error, float dt)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e50:	edc7 0a01 	vstr	s1, [r7, #4]
    // Proportional
    float proportional = pid->kp * error;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e62:	edc7 7a05 	vstr	s15, [r7, #20]
    
    // Integral
    pid->integral += error * dt;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e6c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edc3 7a03 	vstr	s15, [r3, #12]
    float integral = pid->ki * pid->integral;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // Derivative
    float derivative = 0.0f;
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    if (dt > 0) {
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	dd11      	ble.n	8001ece <PID_Calculate+0x8a>
        derivative = pid->kd * (error - pid->prev_error) / dt;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eb6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001eba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ebe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ec2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eca:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    pid->prev_error = error;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	611a      	str	r2, [r3, #16]
    
    // Toplam çıkış
    float output = proportional + integral + derivative;
 8001ed4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ed8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee8:	edc7 7a06 	vstr	s15, [r7, #24]
    
    // Çıkışı sınırla
    if (output > pid->max_output) output = pid->max_output;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ef2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd02      	ble.n	8001f06 <PID_Calculate+0xc2>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	61bb      	str	r3, [r7, #24]
    if (output < pid->min_output) output = pid->min_output;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d502      	bpl.n	8001f20 <PID_Calculate+0xdc>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	61bb      	str	r3, [r7, #24]
    
    return output;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	ee07 3a90 	vmov	s15, r3
}
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	3724      	adds	r7, #36	@ 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <MX_SPI3_Init+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f68:	2230      	movs	r2, #48	@ 0x30
 8001f6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f80:	220a      	movs	r2, #10
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_SPI3_Init+0x64>)
 8001f86:	f003 fd77 	bl	8005a78 <HAL_SPI_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001f90:	f7ff fde6 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000904 	.word	0x20000904
 8001f9c:	40003c00 	.word	0x40003c00

08001fa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_SPI_MspInit+0xc0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d14a      	bne.n	8002058 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4a26      	ldr	r2, [pc, #152]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a18      	ldr	r2, [pc, #96]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_SPI_MspInit+0xc4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002028:	2306      	movs	r3, #6
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	@ (8002068 <HAL_SPI_MspInit+0xc8>)
 8002034:	f001 fd62 	bl	8003afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002038:	2318      	movs	r3, #24
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002048:	2306      	movs	r3, #6
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <HAL_SPI_MspInit+0xcc>)
 8002054:	f001 fd52 	bl	8003afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	@ 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40003c00 	.word	0x40003c00
 8002064:	40023800 	.word	0x40023800
 8002068:	40020800 	.word	0x40020800
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <HAL_MspInit+0x4c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	4a08      	ldr	r2, [pc, #32]	@ (80020bc <HAL_MspInit+0x4c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <NMI_Handler+0x4>

080020c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <HardFault_Handler+0x4>

080020d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <MemManage_Handler+0x4>

080020d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002116:	f000 fcf5 	bl	8002b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002124:	4802      	ldr	r0, [pc, #8]	@ (8002130 <DMA1_Stream3_IRQHandler+0x10>)
 8002126:	f001 fa7f 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000ac4 	.word	0x20000ac4

08002134 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_XL_Pin);
 8002138:	2020      	movs	r0, #32
 800213a:	f001 fe8d 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 800213e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002142:	f001 fe89 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8002146:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800214a:	f001 fe85 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <TIM4_IRQHandler+0x10>)
 800215a:	f004 fb3d 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000a38 	.word	0x20000a38

08002168 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <USART3_IRQHandler+0x10>)
 800216e:	f005 faab 	bl	80076c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000a80 	.word	0x20000a80

0800217c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return 1;
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_kill>:

int _kill(int pid, int sig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002196:	f00b f9eb 	bl	800d570 <__errno>
 800219a:	4603      	mov	r3, r0
 800219c:	2216      	movs	r2, #22
 800219e:	601a      	str	r2, [r3, #0]
  return -1;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_exit>:

void _exit (int status)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ffe7 	bl	800218c <_kill>
  while (1) {}    /* Make sure we hang here */
 80021be:	bf00      	nop
 80021c0:	e7fd      	b.n	80021be <_exit+0x12>

080021c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e00a      	b.n	80021ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021d4:	f3af 8000 	nop.w
 80021d8:	4601      	mov	r1, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	60ba      	str	r2, [r7, #8]
 80021e0:	b2ca      	uxtb	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	dbf0      	blt.n	80021d4 <_read+0x12>
  }

  return len;
 80021f2:	687b      	ldr	r3, [r7, #4]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	e009      	b.n	8002222 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbf1      	blt.n	800220e <_write+0x12>
  }
  return len;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_close>:

int _close(int file)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800223c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800225c:	605a      	str	r2, [r3, #4]
  return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_isatty>:

int _isatty(int file)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a4:	4a14      	ldr	r2, [pc, #80]	@ (80022f8 <_sbrk+0x5c>)
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <_sbrk+0x60>)
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <_sbrk+0x64>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <_sbrk+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d207      	bcs.n	80022dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022cc:	f00b f950 	bl	800d570 <__errno>
 80022d0:	4603      	mov	r3, r0
 80022d2:	220c      	movs	r2, #12
 80022d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022da:	e009      	b.n	80022f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022dc:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <_sbrk+0x64>)
 80022ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20020000 	.word	0x20020000
 80022fc:	00000400 	.word	0x00000400
 8002300:	2000095c 	.word	0x2000095c
 8002304:	20000cc8 	.word	0x20000cc8

08002308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <SystemInit+0x20>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	4a05      	ldr	r2, [pc, #20]	@ (8002328 <SystemInit+0x20>)
 8002314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b096      	sub	sp, #88	@ 0x58
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002332:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]
 800235a:	615a      	str	r2, [r3, #20]
 800235c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2220      	movs	r2, #32
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f00b f8a0 	bl	800d4aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <MX_TIM1_Init+0x138>)
 800236c:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <MX_TIM1_Init+0x13c>)
 800236e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8002370:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002372:	22b3      	movs	r2, #179	@ 0xb3
 8002374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <MX_TIM1_Init+0x138>)
 800237e:	2263      	movs	r2, #99	@ 0x63
 8002380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002388:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <MX_TIM1_Init+0x138>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002394:	4833      	ldr	r0, [pc, #204]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002396:	f003 ffa1 	bl	80062dc <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80023a0:	f7ff fbde 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023ae:	4619      	mov	r1, r3
 80023b0:	482c      	ldr	r0, [pc, #176]	@ (8002464 <MX_TIM1_Init+0x138>)
 80023b2:	f004 fbdb 	bl	8006b6c <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80023bc:	f7ff fbd0 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023c0:	4828      	ldr	r0, [pc, #160]	@ (8002464 <MX_TIM1_Init+0x138>)
 80023c2:	f004 f84b 	bl	800645c <HAL_TIM_PWM_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80023cc:	f7ff fbc8 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023dc:	4619      	mov	r1, r3
 80023de:	4821      	ldr	r0, [pc, #132]	@ (8002464 <MX_TIM1_Init+0x138>)
 80023e0:	f004 ffc4 	bl	800736c <HAL_TIMEx_MasterConfigSynchronization>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80023ea:	f7ff fbb9 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ee:	2360      	movs	r3, #96	@ 0x60
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4814      	ldr	r0, [pc, #80]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002414:	f004 fae8 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800241e:	f7ff fb9f 	bl	8001b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002436:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800243a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002446:	f005 f80d 	bl	8007464 <HAL_TIMEx_ConfigBreakDeadTime>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002450:	f7ff fb86 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <MX_TIM1_Init+0x138>)
 8002456:	f000 f9a9 	bl	80027ac <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3758      	adds	r7, #88	@ 0x58
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000960 	.word	0x20000960
 8002468:	40010000 	.word	0x40010000

0800246c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08c      	sub	sp, #48	@ 0x30
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f00b f815 	bl	800d4aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <MX_TIM2_Init+0xa4>)
 800248a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800248e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002490:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <MX_TIM2_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <MX_TIM2_Init+0xa4>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800249c:	4b1c      	ldr	r3, [pc, #112]	@ (8002510 <MX_TIM2_Init+0xa4>)
 800249e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024b8:	2301      	movs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80024c0:	230a      	movs	r3, #10
 80024c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80024d0:	230a      	movs	r3, #10
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	4619      	mov	r1, r3
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024dc:	f004 f8d6 	bl	800668c <HAL_TIM_Encoder_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80024e6:	f7ff fb3b 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	@ (8002510 <MX_TIM2_Init+0xa4>)
 80024f8:	f004 ff38 	bl	800736c <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002502:	f7ff fb2d 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3730      	adds	r7, #48	@ 0x30
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200009a8 	.word	0x200009a8

08002514 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	@ 0x28
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	f107 0320 	add.w	r3, r7, #32
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002536:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <MX_TIM3_Init+0xa8>)
 8002538:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <MX_TIM3_Init+0xac>)
 800253a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17;
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <MX_TIM3_Init+0xa8>)
 800253e:	2211      	movs	r2, #17
 8002540:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <MX_TIM3_Init+0xa8>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002548:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <MX_TIM3_Init+0xa8>)
 800254a:	22ff      	movs	r2, #255	@ 0xff
 800254c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <MX_TIM3_Init+0xa8>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <MX_TIM3_Init+0xa8>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800255a:	4818      	ldr	r0, [pc, #96]	@ (80025bc <MX_TIM3_Init+0xa8>)
 800255c:	f003 ff7e 	bl	800645c <HAL_TIM_PWM_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002566:	f7ff fafb 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002572:	f107 0320 	add.w	r3, r7, #32
 8002576:	4619      	mov	r1, r3
 8002578:	4810      	ldr	r0, [pc, #64]	@ (80025bc <MX_TIM3_Init+0xa8>)
 800257a:	f004 fef7 	bl	800736c <HAL_TIMEx_MasterConfigSynchronization>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002584:	f7ff faec 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002588:	2360      	movs	r3, #96	@ 0x60
 800258a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2208      	movs	r2, #8
 800259c:	4619      	mov	r1, r3
 800259e:	4807      	ldr	r0, [pc, #28]	@ (80025bc <MX_TIM3_Init+0xa8>)
 80025a0:	f004 fa22 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80025aa:	f7ff fad9 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ae:	4803      	ldr	r0, [pc, #12]	@ (80025bc <MX_TIM3_Init+0xa8>)
 80025b0:	f000 f8fc 	bl	80027ac <HAL_TIM_MspPostInit>

}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	@ 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	200009f0 	.word	0x200009f0
 80025c0:	40000400 	.word	0x40000400

080025c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	463b      	mov	r3, r7
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <MX_TIM4_Init+0x94>)
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <MX_TIM4_Init+0x98>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8999;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <MX_TIM4_Init+0x94>)
 80025e8:	f242 3227 	movw	r2, #8999	@ 0x2327
 80025ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <MX_TIM4_Init+0x94>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <MX_TIM4_Init+0x94>)
 80025f6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <MX_TIM4_Init+0x94>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <MX_TIM4_Init+0x94>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002608:	4813      	ldr	r0, [pc, #76]	@ (8002658 <MX_TIM4_Init+0x94>)
 800260a:	f003 fe67 	bl	80062dc <HAL_TIM_Base_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002614:	f7ff faa4 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	4619      	mov	r1, r3
 8002624:	480c      	ldr	r0, [pc, #48]	@ (8002658 <MX_TIM4_Init+0x94>)
 8002626:	f004 faa1 	bl	8006b6c <HAL_TIM_ConfigClockSource>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002630:	f7ff fa96 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800263c:	463b      	mov	r3, r7
 800263e:	4619      	mov	r1, r3
 8002640:	4805      	ldr	r0, [pc, #20]	@ (8002658 <MX_TIM4_Init+0x94>)
 8002642:	f004 fe93 	bl	800736c <HAL_TIMEx_MasterConfigSynchronization>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800264c:	f7ff fa88 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000a38 	.word	0x20000a38
 800265c:	40000800 	.word	0x40000800

08002660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <HAL_TIM_Base_MspInit+0x70>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10e      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800268e:	e01a      	b.n	80026c6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_TIM_Base_MspInit+0x78>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d115      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a0c      	ldr	r2, [pc, #48]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_TIM_Base_MspInit+0x74>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	201e      	movs	r0, #30
 80026bc:	f000 fdd7 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026c0:	201e      	movs	r0, #30
 80026c2:	f000 fdf0 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40000800 	.word	0x40000800

080026dc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fc:	d12b      	bne.n	8002756 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b17      	ldr	r3, [pc, #92]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
 800270e:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_TIM_Encoder_MspInit+0x84>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002736:	2303      	movs	r3, #3
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4804      	ldr	r0, [pc, #16]	@ (8002764 <HAL_TIM_Encoder_MspInit+0x88>)
 8002752:	f001 f9d3 	bl	8003afc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40020000 	.word	0x40020000

08002768 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	@ (80027a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <HAL_TIM_PWM_MspInit+0x40>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <HAL_TIM_PWM_MspInit+0x40>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a24      	ldr	r2, [pc, #144]	@ (800285c <HAL_TIM_MspPostInit+0xb0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d11f      	bne.n	800280e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	4817      	ldr	r0, [pc, #92]	@ (8002864 <HAL_TIM_MspPostInit+0xb8>)
 8002808:	f001 f978 	bl	8003afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800280c:	e022      	b.n	8002854 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a15      	ldr	r2, [pc, #84]	@ (8002868 <HAL_TIM_MspPostInit+0xbc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d11d      	bne.n	8002854 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_TIM_MspPostInit+0xb4>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MD_PWM_Pin;
 8002834:	2301      	movs	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002844:	2302      	movs	r3, #2
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	@ (800286c <HAL_TIM_MspPostInit+0xc0>)
 8002850:	f001 f954 	bl	8003afc <HAL_GPIO_Init>
}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	@ 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010000 	.word	0x40010000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000
 8002868:	40000400 	.word	0x40000400
 800286c:	40020400 	.word	0x40020400

08002870 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <MX_USART3_UART_Init+0x50>)
 8002878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028a6:	4805      	ldr	r0, [pc, #20]	@ (80028bc <MX_USART3_UART_Init+0x4c>)
 80028a8:	f004 fe42 	bl	8007530 <HAL_UART_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028b2:	f7ff f955 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000a80 	.word	0x20000a80
 80028c0:	40004800 	.word	0x40004800

080028c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a44      	ldr	r2, [pc, #272]	@ (80029f4 <HAL_UART_MspInit+0x130>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f040 8081 	bne.w	80029ea <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b42      	ldr	r3, [pc, #264]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	4a41      	ldr	r2, [pc, #260]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 80028f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f8:	4b3f      	ldr	r3, [pc, #252]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	4a3a      	ldr	r2, [pc, #232]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6313      	str	r3, [r2, #48]	@ 0x30
 8002914:	4b38      	ldr	r3, [pc, #224]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4a33      	ldr	r2, [pc, #204]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002930:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <HAL_UART_MspInit+0x134>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800293c:	2320      	movs	r3, #32
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800294c:	2307      	movs	r3, #7
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4829      	ldr	r0, [pc, #164]	@ (80029fc <HAL_UART_MspInit+0x138>)
 8002958:	f001 f8d0 	bl	8003afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800295c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800296e:	2307      	movs	r3, #7
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4821      	ldr	r0, [pc, #132]	@ (8002a00 <HAL_UART_MspInit+0x13c>)
 800297a:	f001 f8bf 	bl	8003afc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 8002980:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <HAL_UART_MspInit+0x144>)
 8002982:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 8002986:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800298a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 800299a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800299e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a0:	4b18      	ldr	r3, [pc, #96]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029be:	4811      	ldr	r0, [pc, #68]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029c0:	f000 fc9a 	bl	80032f8 <HAL_DMA_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80029ca:	f7ff f8c9 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <HAL_UART_MspInit+0x140>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2027      	movs	r0, #39	@ 0x27
 80029e0:	f000 fc45 	bl	800326e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029e4:	2027      	movs	r0, #39	@ 0x27
 80029e6:	f000 fc5e 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	@ 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40004800 	.word	0x40004800
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020400 	.word	0x40020400
 8002a04:	20000ac4 	.word	0x20000ac4
 8002a08:	40026058 	.word	0x40026058

08002a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a10:	480d      	ldr	r0, [pc, #52]	@ (8002a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a12:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a14:	4a0e      	ldr	r2, [pc, #56]	@ (8002a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a0b      	ldr	r2, [pc, #44]	@ (8002a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a28:	4c0b      	ldr	r4, [pc, #44]	@ (8002a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a36:	f7ff fc67 	bl	8002308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f00a fd9f 	bl	800d57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a3e:	f7fe fe8f 	bl	8001760 <main>
  bx  lr    
 8002a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a4c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a50:	08011fb0 	.word	0x08011fb0
  ldr r2, =_sbss
 8002a54:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a58:	20000cc4 	.word	0x20000cc4

08002a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC_IRQHandler>
	...

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a64:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <HAL_Init+0x40>)
 8002a6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <HAL_Init+0x40>)
 8002a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a07      	ldr	r2, [pc, #28]	@ (8002aa0 <HAL_Init+0x40>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 fbe5 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8e:	200f      	movs	r0, #15
 8002a90:	f000 f808 	bl	8002aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a94:	f7ff faec 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_InitTick+0x54>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_InitTick+0x58>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fc0b 	bl	80032de <HAL_SYSTICK_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00e      	b.n	8002af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d80a      	bhi.n	8002aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ae0:	f000 fbc5 	bl	800326e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ae4:	4a06      	ldr	r2, [pc, #24]	@ (8002b00 <HAL_InitTick+0x5c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_IncTick+0x20>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_IncTick+0x24>)
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000008 	.word	0x20000008
 8002b28:	20000b24 	.word	0x20000b24

08002b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_GetTick+0x14>)
 8002b32:	681b      	ldr	r3, [r3, #0]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000b24 	.word	0x20000b24

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff ffee 	bl	8002b2c <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b5c:	d005      	beq.n	8002b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_Delay+0x44>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6a:	bf00      	nop
 8002b6c:	f7ff ffde 	bl	8002b2c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f7      	bhi.n	8002b6c <HAL_Delay+0x28>
  {
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e033      	b.n	8002c0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fafe 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bd2:	f023 0302 	bic.w	r3, r3, #2
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f94a 	bl	8002e78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bfa:	e001      	b.n	8002c00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x1c>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e113      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x244>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d925      	bls.n	8002c8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	3b1e      	subs	r3, #30
 8002c56:	2207      	movs	r2, #7
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	400a      	ands	r2, r1
 8002c64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68d9      	ldr	r1, [r3, #12]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	4603      	mov	r3, r0
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4403      	add	r3, r0
 8002c7e:	3b1e      	subs	r3, #30
 8002c80:	409a      	lsls	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e022      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6919      	ldr	r1, [r3, #16]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6919      	ldr	r1, [r3, #16]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4403      	add	r3, r0
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d824      	bhi.n	8002d24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b05      	subs	r3, #5
 8002cec:	221f      	movs	r2, #31
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b05      	subs	r3, #5
 8002d16:	fa00 f203 	lsl.w	r2, r0, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d22:	e04c      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d824      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b23      	subs	r3, #35	@ 0x23
 8002d3e:	221f      	movs	r2, #31
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43da      	mvns	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b23      	subs	r3, #35	@ 0x23
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d74:	e023      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b41      	subs	r3, #65	@ 0x41
 8002d88:	221f      	movs	r2, #31
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	400a      	ands	r2, r1
 8002d96:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	3b41      	subs	r3, #65	@ 0x41
 8002db2:	fa00 f203 	lsl.w	r2, r0, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbe:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <HAL_ADC_ConfigChannel+0x250>)
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_ADC_ConfigChannel+0x254>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10f      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1d8>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b12      	cmp	r3, #18
 8002dd2:	d10b      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e68 <HAL_ADC_ConfigChannel+0x254>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12b      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x23a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_ADC_ConfigChannel+0x258>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x1f4>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b11      	cmp	r3, #17
 8002e06:	d122      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	@ (8002e6c <HAL_ADC_ConfigChannel+0x258>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d111      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e2a:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_ADC_ConfigChannel+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_ADC_ConfigChannel+0x260>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	0c9a      	lsrs	r2, r3, #18
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e40:	e002      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f9      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40012300 	.word	0x40012300
 8002e68:	40012000 	.word	0x40012000
 8002e6c:	10000012 	.word	0x10000012
 8002e70:	20000000 	.word	0x20000000
 8002e74:	431bde83 	.word	0x431bde83

08002e78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e80:	4b79      	ldr	r3, [pc, #484]	@ (8003068 <ADC_Init+0x1f0>)
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ed0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	4a58      	ldr	r2, [pc, #352]	@ (800306c <ADC_Init+0x1f4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e00f      	b.n	8002f76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0202 	bic.w	r2, r2, #2
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	005a      	lsls	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01b      	beq.n	8002fdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	035a      	lsls	r2, r3, #13
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	e007      	b.n	8002fec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	3b01      	subs	r3, #1
 8003008:	051a      	lsls	r2, r3, #20
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800302e:	025a      	lsls	r2, r3, #9
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	029a      	lsls	r2, r3, #10
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40012300 	.word	0x40012300
 800306c:	0f000001 	.word	0x0f000001

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	@ (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	@ (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db12      	blt.n	8003148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	490a      	ldr	r1, [pc, #40]	@ (8003154 <__NVIC_DisableIRQ+0x44>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	3320      	adds	r3, #32
 8003138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800313c:	f3bf 8f4f 	dsb	sy
}
 8003140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003142:	f3bf 8f6f 	isb	sy
}
 8003146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	@ (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	@ (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff05 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff1a 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff8e 	bl	80031ac <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5d 	bl	8003158 <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff0d 	bl	80030d4 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff1d 	bl	8003110 <__NVIC_DisableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ff94 	bl	8003214 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff fc12 	bl	8002b2c <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e099      	b.n	8003448 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003334:	e00f      	b.n	8003356 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003336:	f7ff fbf9 	bl	8002b2c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b05      	cmp	r3, #5
 8003342:	d908      	bls.n	8003356 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e078      	b.n	8003448 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e8      	bne.n	8003336 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4b38      	ldr	r3, [pc, #224]	@ (8003450 <HAL_DMA_Init+0x158>)
 8003370:	4013      	ands	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003382:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d107      	bne.n	80033c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	4313      	orrs	r3, r2
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0307 	bic.w	r3, r3, #7
 80033d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d117      	bne.n	800341a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00e      	beq.n	800341a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fb01 	bl	8003a04 <DMA_CheckFifoParam>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003416:	2301      	movs	r3, #1
 8003418:	e016      	b.n	8003448 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fab8 	bl	8003998 <DMA_CalcBaseAndBitshift>
 8003428:	4603      	mov	r3, r0
 800342a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	223f      	movs	r2, #63	@ 0x3f
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	f010803f 	.word	0xf010803f

08003454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_DMA_Start_IT+0x26>
 8003476:	2302      	movs	r3, #2
 8003478:	e040      	b.n	80034fc <HAL_DMA_Start_IT+0xa8>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12f      	bne.n	80034ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa4a 	bl	800393c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ac:	223f      	movs	r2, #63	@ 0x3f
 80034ae:	409a      	lsls	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0216 	orr.w	r2, r2, #22
 80034c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e005      	b.n	80034fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003512:	f7ff fb0b 	bl	8002b2c <HAL_GetTick>
 8003516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e052      	b.n	80035dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_Abort+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003586:	e013      	b.n	80035b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003588:	f7ff fad0 	bl	8002b2c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b05      	cmp	r3, #5
 8003594:	d90c      	bls.n	80035b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e015      	b.n	80035dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e4      	bne.n	8003588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	223f      	movs	r2, #63	@ 0x3f
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <HAL_DMA_IRQHandler+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8e      	ldr	r2, [pc, #568]	@ (8003874 <HAL_DMA_IRQHandler+0x24c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808f 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8087 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	223f      	movs	r2, #63	@ 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e079      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01d      	beq.n	800388a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02c      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000
 8003874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01e      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0210 	bic.w	r2, r2, #16
 80038a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d307      	bcc.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f2      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2cc>
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b40      	cmp	r3, #64	@ 0x40
 8003968:	d108      	bne.n	800397c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397a:	e007      	b.n	800398c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b10      	subs	r3, #16
 80039a8:	4a14      	ldr	r2, [pc, #80]	@ (80039fc <DMA_CalcBaseAndBitshift+0x64>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b2:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <DMA_CalcBaseAndBitshift+0x68>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d909      	bls.n	80039da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ce:	f023 0303 	bic.w	r3, r3, #3
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80039d8:	e007      	b.n	80039ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039e2:	f023 0303 	bic.w	r3, r3, #3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	aaaaaaab 	.word	0xaaaaaaab
 8003a00:	08011aac 	.word	0x08011aac

08003a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11f      	bne.n	8003a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d856      	bhi.n	8003ad2 <DMA_CheckFifoParam+0xce>
 8003a24:	a201      	add	r2, pc, #4	@ (adr r2, 8003a2c <DMA_CheckFifoParam+0x28>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003ad3 	.word	0x08003ad3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d046      	beq.n	8003ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e043      	b.n	8003ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a56:	d140      	bne.n	8003ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e03d      	b.n	8003ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a66:	d121      	bne.n	8003aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d837      	bhi.n	8003ade <DMA_CheckFifoParam+0xda>
 8003a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <DMA_CheckFifoParam+0x70>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a8b 	.word	0x08003a8b
 8003a7c:	08003a85 	.word	0x08003a85
 8003a80:	08003a9d 	.word	0x08003a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e030      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d025      	beq.n	8003ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e022      	b.n	8003ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aa4:	d11f      	bne.n	8003ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aaa:	e01c      	b.n	8003ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d903      	bls.n	8003aba <DMA_CheckFifoParam+0xb6>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d003      	beq.n	8003ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab8:	e018      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      break;
 8003abe:	e015      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e00b      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e00a      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e008      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e006      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;   
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
    }
  } 
  
  return status; 
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	@ 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e165      	b.n	8003de4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b18:	2201      	movs	r2, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 8154 	bne.w	8003dde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d005      	beq.n	8003b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d130      	bne.n	8003bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	2203      	movs	r2, #3
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b84:	2201      	movs	r2, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 0201 	and.w	r2, r3, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d017      	beq.n	8003bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d123      	bne.n	8003c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	08da      	lsrs	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3208      	adds	r2, #8
 8003c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	220f      	movs	r2, #15
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	08da      	lsrs	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3208      	adds	r2, #8
 8003c3a:	69b9      	ldr	r1, [r7, #24]
 8003c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0203 	and.w	r2, r3, #3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80ae 	beq.w	8003dde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4b5d      	ldr	r3, [pc, #372]	@ (8003dfc <HAL_GPIO_Init+0x300>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dfc <HAL_GPIO_Init+0x300>)
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c92:	4b5a      	ldr	r3, [pc, #360]	@ (8003dfc <HAL_GPIO_Init+0x300>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9e:	4a58      	ldr	r2, [pc, #352]	@ (8003e00 <HAL_GPIO_Init+0x304>)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e04 <HAL_GPIO_Init+0x308>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d025      	beq.n	8003d16 <HAL_GPIO_Init+0x21a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e08 <HAL_GPIO_Init+0x30c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01f      	beq.n	8003d12 <HAL_GPIO_Init+0x216>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8003e0c <HAL_GPIO_Init+0x310>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_Init+0x212>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4c      	ldr	r2, [pc, #304]	@ (8003e10 <HAL_GPIO_Init+0x314>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_GPIO_Init+0x20e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e14 <HAL_GPIO_Init+0x318>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00d      	beq.n	8003d06 <HAL_GPIO_Init+0x20a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4a      	ldr	r2, [pc, #296]	@ (8003e18 <HAL_GPIO_Init+0x31c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <HAL_GPIO_Init+0x206>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a49      	ldr	r2, [pc, #292]	@ (8003e1c <HAL_GPIO_Init+0x320>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_GPIO_Init+0x202>
 8003cfa:	2306      	movs	r3, #6
 8003cfc:	e00c      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003cfe:	2307      	movs	r3, #7
 8003d00:	e00a      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d02:	2305      	movs	r3, #5
 8003d04:	e008      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d06:	2304      	movs	r3, #4
 8003d08:	e006      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e004      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e002      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_GPIO_Init+0x21c>
 8003d16:	2300      	movs	r3, #0
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f002 0203 	and.w	r2, r2, #3
 8003d1e:	0092      	lsls	r2, r2, #2
 8003d20:	4093      	lsls	r3, r2
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d28:	4935      	ldr	r1, [pc, #212]	@ (8003e00 <HAL_GPIO_Init+0x304>)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	3302      	adds	r3, #2
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d36:	4b3a      	ldr	r3, [pc, #232]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5a:	4a31      	ldr	r2, [pc, #196]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d60:	4b2f      	ldr	r3, [pc, #188]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d84:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d8a:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd8:	4a11      	ldr	r2, [pc, #68]	@ (8003e20 <HAL_GPIO_Init+0x324>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3301      	adds	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	f67f ae96 	bls.w	8003b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40020800 	.word	0x40020800
 8003e10:	40020c00 	.word	0x40020c00
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40021400 	.word	0x40021400
 8003e1c:	40021800 	.word	0x40021800
 8003e20:	40013c00 	.word	0x40013c00

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e40:	e003      	b.n	8003e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e62:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e6e:	4a05      	ldr	r2, [pc, #20]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd fe28 	bl	8001acc <HAL_GPIO_EXTI_Callback>
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e12b      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fbb6 	bl	8001620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eec:	f001 f8ce 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8003ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a81      	ldr	r2, [pc, #516]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d807      	bhi.n	8003f0c <HAL_I2C_Init+0x84>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a80      	ldr	r2, [pc, #512]	@ (8004100 <HAL_I2C_Init+0x278>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf94      	ite	ls
 8003f04:	2301      	movls	r3, #1
 8003f06:	2300      	movhi	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e006      	b.n	8003f1a <HAL_I2C_Init+0x92>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8004104 <HAL_I2C_Init+0x27c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	bf94      	ite	ls
 8003f14:	2301      	movls	r3, #1
 8003f16:	2300      	movhi	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0e7      	b.n	80040f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a78      	ldr	r2, [pc, #480]	@ (8004108 <HAL_I2C_Init+0x280>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9b      	lsrs	r3, r3, #18
 8003f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a6a      	ldr	r2, [pc, #424]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d802      	bhi.n	8003f5c <HAL_I2C_Init+0xd4>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	e009      	b.n	8003f70 <HAL_I2C_Init+0xe8>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	4a69      	ldr	r2, [pc, #420]	@ (800410c <HAL_I2C_Init+0x284>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	099b      	lsrs	r3, r3, #6
 8003f6e:	3301      	adds	r3, #1
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	430b      	orrs	r3, r1
 8003f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	495c      	ldr	r1, [pc, #368]	@ (80040fc <HAL_I2C_Init+0x274>)
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d819      	bhi.n	8003fc4 <HAL_I2C_Init+0x13c>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e59      	subs	r1, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_I2C_Init+0x138>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e59      	subs	r1, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	e051      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	e04f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d111      	bne.n	8003ff0 <HAL_I2C_Init+0x168>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1e58      	subs	r0, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e012      	b.n	8004016 <HAL_I2C_Init+0x18e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Init+0x196>
 800401a:	2301      	movs	r3, #1
 800401c:	e022      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <HAL_I2C_Init+0x1bc>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e58      	subs	r0, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	440b      	add	r3, r1
 8004034:	fbb0 f3f3 	udiv	r3, r0, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004042:	e00f      	b.n	8004064 <HAL_I2C_Init+0x1dc>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1e58      	subs	r0, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	0099      	lsls	r1, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	6809      	ldr	r1, [r1, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6911      	ldr	r1, [r2, #16]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68d2      	ldr	r2, [r2, #12]
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	000186a0 	.word	0x000186a0
 8004100:	001e847f 	.word	0x001e847f
 8004104:	003d08ff 	.word	0x003d08ff
 8004108:	431bde83 	.word	0x431bde83
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	460b      	mov	r3, r1
 8004124:	813b      	strh	r3, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800412a:	f7fe fcff 	bl	8002b2c <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b20      	cmp	r3, #32
 800413a:	f040 80d9 	bne.w	80042f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	2319      	movs	r3, #25
 8004144:	2201      	movs	r2, #1
 8004146:	496d      	ldr	r1, [pc, #436]	@ (80042fc <HAL_I2C_Mem_Write+0x1ec>)
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fc7f 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
 8004156:	e0cc      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_I2C_Mem_Write+0x56>
 8004162:	2302      	movs	r3, #2
 8004164:	e0c5      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d007      	beq.n	800418c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2221      	movs	r2, #33	@ 0x21
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2240      	movs	r2, #64	@ 0x40
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4a4d      	ldr	r2, [pc, #308]	@ (8004300 <HAL_I2C_Mem_Write+0x1f0>)
 80041cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ce:	88f8      	ldrh	r0, [r7, #6]
 80041d0:	893a      	ldrh	r2, [r7, #8]
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4603      	mov	r3, r0
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fab6 	bl	8004750 <I2C_RequestMemoryWrite>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d052      	beq.n	8004290 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e081      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fd00 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06b      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <HAL_I2C_Mem_Write+0x180>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d017      	beq.n	8004290 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1aa      	bne.n	80041ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 fcec 	bl	8004c7a <I2C_WaitOnBTFFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00d      	beq.n	80042c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d107      	bne.n	80042c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e016      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	00100002 	.word	0x00100002
 8004300:	ffff0000 	.word	0xffff0000

08004304 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	@ 0x30
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800431e:	f7fe fc05 	bl	8002b2c <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b20      	cmp	r3, #32
 800432e:	f040 8208 	bne.w	8004742 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2319      	movs	r3, #25
 8004338:	2201      	movs	r2, #1
 800433a:	497b      	ldr	r1, [pc, #492]	@ (8004528 <HAL_I2C_Mem_Read+0x224>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fb85 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
 800434a:	e1fb      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2C_Mem_Read+0x56>
 8004356:	2302      	movs	r3, #2
 8004358:	e1f4      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d007      	beq.n	8004380 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2222      	movs	r2, #34	@ 0x22
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a5b      	ldr	r2, [pc, #364]	@ (800452c <HAL_I2C_Mem_Read+0x228>)
 80043c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043c2:	88f8      	ldrh	r0, [r7, #6]
 80043c4:	893a      	ldrh	r2, [r7, #8]
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4603      	mov	r3, r0
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fa52 	bl	800487c <I2C_RequestMemoryRead>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1b0      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d113      	bne.n	8004412 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ea:	2300      	movs	r3, #0
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e184      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11b      	bne.n	8004452 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e164      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	2b02      	cmp	r3, #2
 8004458:	d11b      	bne.n	8004492 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004468:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	e144      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044a8:	e138      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	f200 80f1 	bhi.w	8004696 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d123      	bne.n	8004504 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc1b 	bl	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e139      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004502:	e10b      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004508:	2b02      	cmp	r3, #2
 800450a:	d14e      	bne.n	80045aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	2200      	movs	r2, #0
 8004514:	4906      	ldr	r1, [pc, #24]	@ (8004530 <HAL_I2C_Mem_Read+0x22c>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fa98 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e10e      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
 8004526:	bf00      	nop
 8004528:	00100002 	.word	0x00100002
 800452c:	ffff0000 	.word	0xffff0000
 8004530:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a8:	e0b8      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	2200      	movs	r2, #0
 80045b2:	4966      	ldr	r1, [pc, #408]	@ (800474c <HAL_I2C_Mem_Read+0x448>)
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fa49 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0bf      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	2200      	movs	r2, #0
 800460e:	494f      	ldr	r1, [pc, #316]	@ (800474c <HAL_I2C_Mem_Read+0x448>)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fa1b 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e091      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004694:	e042      	b.n	800471c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fb2e 	bl	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e04c      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d118      	bne.n	800471c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f47f aec2 	bne.w	80044aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e000      	b.n	8004744 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004742:	2302      	movs	r3, #2
  }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	@ 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	00010004 	.word	0x00010004

08004750 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	2200      	movs	r2, #0
 8004782:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f960 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a0:	d103      	bne.n	80047aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e05f      	b.n	800486e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	492d      	ldr	r1, [pc, #180]	@ (8004878 <I2C_RequestMemoryWrite+0x128>)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f998 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e04c      	b.n	800486e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa02 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d107      	bne.n	8004812 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e02b      	b.n	800486e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481c:	893b      	ldrh	r3, [r7, #8]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]
 8004826:	e021      	b.n	800486c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b29b      	uxth	r3, r3
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f9dc 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	2b04      	cmp	r3, #4
 800484c:	d107      	bne.n	800485e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800485c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e005      	b.n	800486e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004862:	893b      	ldrh	r3, [r7, #8]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	00010002 	.word	0x00010002

0800487c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	4608      	mov	r0, r1
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	4603      	mov	r3, r0
 800488c:	817b      	strh	r3, [r7, #10]
 800488e:	460b      	mov	r3, r1
 8004890:	813b      	strh	r3, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	2200      	movs	r2, #0
 80048be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8c2 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00d      	beq.n	80048ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048dc:	d103      	bne.n	80048e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0aa      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	4952      	ldr	r1, [pc, #328]	@ (8004a48 <I2C_RequestMemoryRead+0x1cc>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f8fa 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e097      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004928:	6a39      	ldr	r1, [r7, #32]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f964 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00d      	beq.n	8004952 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b04      	cmp	r3, #4
 800493c:	d107      	bne.n	800494e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e076      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	e021      	b.n	80049a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	b29b      	uxth	r3, r3
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004974:	6a39      	ldr	r1, [r7, #32]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f93e 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e050      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800499e:	893b      	ldrh	r3, [r7, #8]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049aa:	6a39      	ldr	r1, [r7, #32]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f923 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d107      	bne.n	80049d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e035      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f82b 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0a:	d103      	bne.n	8004a14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e013      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	4906      	ldr	r1, [pc, #24]	@ (8004a48 <I2C_RequestMemoryRead+0x1cc>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f863 	bl	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	00010002 	.word	0x00010002

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e025      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a64:	d021      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe f861 	bl	8002b2c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d116      	bne.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e023      	b.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10d      	bne.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	e00c      	b.n	8004aea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d0b6      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b08:	e051      	b.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b18:	d123      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e046      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b68:	d021      	beq.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fd ffdf 	bl	8002b2c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d116      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	f043 0220 	orr.w	r2, r3, #32
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e020      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10c      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	e00b      	b.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d18d      	bne.n	8004b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c04:	e02d      	b.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8ce 	bl	8004da8 <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02d      	b.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d021      	beq.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fd ff85 	bl	8002b2c <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e007      	b.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d1ca      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c86:	e02d      	b.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f88d 	bl	8004da8 <I2C_IsAcknowledgeFailed>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e02d      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9e:	d021      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fd ff44 	bl	8002b2c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d1ca      	bne.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d08:	e042      	b.n	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d119      	bne.n	8004d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0210 	mvn.w	r2, #16
 8004d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e029      	b.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fd feee 	bl	8002b2c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e007      	b.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9a:	2b40      	cmp	r3, #64	@ 0x40
 8004d9c:	d1b5      	bne.n	8004d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	d11b      	bne.n	8004df8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e22:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <HAL_PWREx_EnableOverDrive+0x94>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e34:	f7fd fe7a 	bl	8002b2c <HAL_GetTick>
 8004e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e3a:	e009      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e3c:	f7fd fe76 	bl	8002b2c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e4a:	d901      	bls.n	8004e50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e01f      	b.n	8004e90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e50:	4b13      	ldr	r3, [pc, #76]	@ (8004ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5c:	d1ee      	bne.n	8004e3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e64:	f7fd fe62 	bl	8002b2c <HAL_GetTick>
 8004e68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e6a:	e009      	b.n	8004e80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e6c:	f7fd fe5e 	bl	8002b2c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e7a:	d901      	bls.n	8004e80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e007      	b.n	8004e90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e80:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e8c:	d1ee      	bne.n	8004e6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	420e0040 	.word	0x420e0040
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	420e0044 	.word	0x420e0044

08004ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0cc      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b68      	ldr	r3, [pc, #416]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90c      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b65      	ldr	r3, [pc, #404]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0b8      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b59      	ldr	r3, [pc, #356]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a58      	ldr	r2, [pc, #352]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f14:	4b53      	ldr	r3, [pc, #332]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a52      	ldr	r2, [pc, #328]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f20:	4b50      	ldr	r3, [pc, #320]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	494d      	ldr	r1, [pc, #308]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d044      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b47      	ldr	r3, [pc, #284]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b3b      	ldr	r3, [pc, #236]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e067      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b37      	ldr	r3, [pc, #220]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4934      	ldr	r1, [pc, #208]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7fd fdc8 	bl	8002b2c <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fd fdc4 	bl	8002b2c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e04f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20c      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b22      	ldr	r3, [pc, #136]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e032      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4916      	ldr	r1, [pc, #88]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b12      	ldr	r3, [pc, #72]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	490e      	ldr	r1, [pc, #56]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502e:	f000 f855 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 8005032:	4602      	mov	r2, r0
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	490a      	ldr	r1, [pc, #40]	@ (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a09      	ldr	r2, [pc, #36]	@ (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800504a:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fd fd28 	bl	8002aa4 <HAL_InitTick>

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023c00 	.word	0x40023c00
 8005064:	40023800 	.word	0x40023800
 8005068:	08011a94 	.word	0x08011a94
 800506c:	20000000 	.word	0x20000000
 8005070:	20000004 	.word	0x20000004

08005074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005078:	4b03      	ldr	r3, [pc, #12]	@ (8005088 <HAL_RCC_GetHCLKFreq+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005090:	f7ff fff0 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	@ (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	08011aa4 	.word	0x08011aa4

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050b8:	f7ff ffdc 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0b5b      	lsrs	r3, r3, #13
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	@ (80050d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	08011aa4 	.word	0x08011aa4

080050dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e0:	b0ae      	sub	sp, #184	@ 0xb8
 80050e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005102:	4bcb      	ldr	r3, [pc, #812]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b0c      	cmp	r3, #12
 800510c:	f200 8206 	bhi.w	800551c <HAL_RCC_GetSysClockFreq+0x440>
 8005110:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800514d 	.word	0x0800514d
 800511c:	0800551d 	.word	0x0800551d
 8005120:	0800551d 	.word	0x0800551d
 8005124:	0800551d 	.word	0x0800551d
 8005128:	08005155 	.word	0x08005155
 800512c:	0800551d 	.word	0x0800551d
 8005130:	0800551d 	.word	0x0800551d
 8005134:	0800551d 	.word	0x0800551d
 8005138:	0800515d 	.word	0x0800515d
 800513c:	0800551d 	.word	0x0800551d
 8005140:	0800551d 	.word	0x0800551d
 8005144:	0800551d 	.word	0x0800551d
 8005148:	0800534d 	.word	0x0800534d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4bb9      	ldr	r3, [pc, #740]	@ (8005434 <HAL_RCC_GetSysClockFreq+0x358>)
 800514e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005152:	e1e7      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005154:	4bb8      	ldr	r3, [pc, #736]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800515a:	e1e3      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800515c:	4bb4      	ldr	r3, [pc, #720]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005168:	4bb1      	ldr	r3, [pc, #708]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d071      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005174:	4bae      	ldr	r3, [pc, #696]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005180:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	f04f 0000 	mov.w	r0, #0
 80051a2:	f04f 0100 	mov.w	r1, #0
 80051a6:	0159      	lsls	r1, r3, #5
 80051a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ac:	0150      	lsls	r0, r2, #5
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4621      	mov	r1, r4
 80051b4:	1a51      	subs	r1, r2, r1
 80051b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80051b8:	4629      	mov	r1, r5
 80051ba:	eb63 0301 	sbc.w	r3, r3, r1
 80051be:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80051cc:	4649      	mov	r1, r9
 80051ce:	018b      	lsls	r3, r1, #6
 80051d0:	4641      	mov	r1, r8
 80051d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051d6:	4641      	mov	r1, r8
 80051d8:	018a      	lsls	r2, r1, #6
 80051da:	4641      	mov	r1, r8
 80051dc:	1a51      	subs	r1, r2, r1
 80051de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051e0:	4649      	mov	r1, r9
 80051e2:	eb63 0301 	sbc.w	r3, r3, r1
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80051f4:	4649      	mov	r1, r9
 80051f6:	00cb      	lsls	r3, r1, #3
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051fe:	4641      	mov	r1, r8
 8005200:	00ca      	lsls	r2, r1, #3
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	4603      	mov	r3, r0
 8005208:	4622      	mov	r2, r4
 800520a:	189b      	adds	r3, r3, r2
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
 800520e:	462b      	mov	r3, r5
 8005210:	460a      	mov	r2, r1
 8005212:	eb42 0303 	adc.w	r3, r2, r3
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005224:	4629      	mov	r1, r5
 8005226:	024b      	lsls	r3, r1, #9
 8005228:	4621      	mov	r1, r4
 800522a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800522e:	4621      	mov	r1, r4
 8005230:	024a      	lsls	r2, r1, #9
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005244:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005248:	f7fb fd3e 	bl	8000cc8 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005256:	e067      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005258:	4b75      	ldr	r3, [pc, #468]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005264:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800526c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005272:	2300      	movs	r3, #0
 8005274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005276:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800527a:	4622      	mov	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	0159      	lsls	r1, r3, #5
 8005288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528c:	0150      	lsls	r0, r2, #5
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4621      	mov	r1, r4
 8005294:	1a51      	subs	r1, r2, r1
 8005296:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005298:	4629      	mov	r1, r5
 800529a:	eb63 0301 	sbc.w	r3, r3, r1
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80052ac:	4649      	mov	r1, r9
 80052ae:	018b      	lsls	r3, r1, #6
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052b6:	4641      	mov	r1, r8
 80052b8:	018a      	lsls	r2, r1, #6
 80052ba:	4641      	mov	r1, r8
 80052bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80052c0:	4649      	mov	r1, r9
 80052c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052da:	4692      	mov	sl, r2
 80052dc:	469b      	mov	fp, r3
 80052de:	4623      	mov	r3, r4
 80052e0:	eb1a 0303 	adds.w	r3, sl, r3
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	462b      	mov	r3, r5
 80052e8:	eb4b 0303 	adc.w	r3, fp, r3
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052fa:	4629      	mov	r1, r5
 80052fc:	028b      	lsls	r3, r1, #10
 80052fe:	4621      	mov	r1, r4
 8005300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005304:	4621      	mov	r1, r4
 8005306:	028a      	lsls	r2, r1, #10
 8005308:	4610      	mov	r0, r2
 800530a:	4619      	mov	r1, r3
 800530c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005310:	2200      	movs	r2, #0
 8005312:	673b      	str	r3, [r7, #112]	@ 0x70
 8005314:	677a      	str	r2, [r7, #116]	@ 0x74
 8005316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800531a:	f7fb fcd5 	bl	8000cc8 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	4613      	mov	r3, r2
 8005324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005328:	4b41      	ldr	r3, [pc, #260]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800533a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800533e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005342:	fbb2 f3f3 	udiv	r3, r2, r3
 8005346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800534a:	e0eb      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800534c:	4b38      	ldr	r3, [pc, #224]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005358:	4b35      	ldr	r3, [pc, #212]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d06b      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005364:	4b32      	ldr	r3, [pc, #200]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x354>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	099b      	lsrs	r3, r3, #6
 800536a:	2200      	movs	r2, #0
 800536c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800536e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	663b      	str	r3, [r7, #96]	@ 0x60
 8005378:	2300      	movs	r3, #0
 800537a:	667b      	str	r3, [r7, #100]	@ 0x64
 800537c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005380:	4622      	mov	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	f04f 0000 	mov.w	r0, #0
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	0159      	lsls	r1, r3, #5
 800538e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005392:	0150      	lsls	r0, r2, #5
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4621      	mov	r1, r4
 800539a:	1a51      	subs	r1, r2, r1
 800539c:	61b9      	str	r1, [r7, #24]
 800539e:	4629      	mov	r1, r5
 80053a0:	eb63 0301 	sbc.w	r3, r3, r1
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80053b2:	4659      	mov	r1, fp
 80053b4:	018b      	lsls	r3, r1, #6
 80053b6:	4651      	mov	r1, sl
 80053b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053bc:	4651      	mov	r1, sl
 80053be:	018a      	lsls	r2, r1, #6
 80053c0:	4651      	mov	r1, sl
 80053c2:	ebb2 0801 	subs.w	r8, r2, r1
 80053c6:	4659      	mov	r1, fp
 80053c8:	eb63 0901 	sbc.w	r9, r3, r1
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e0:	4690      	mov	r8, r2
 80053e2:	4699      	mov	r9, r3
 80053e4:	4623      	mov	r3, r4
 80053e6:	eb18 0303 	adds.w	r3, r8, r3
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	462b      	mov	r3, r5
 80053ee:	eb49 0303 	adc.w	r3, r9, r3
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005400:	4629      	mov	r1, r5
 8005402:	024b      	lsls	r3, r1, #9
 8005404:	4621      	mov	r1, r4
 8005406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800540a:	4621      	mov	r1, r4
 800540c:	024a      	lsls	r2, r1, #9
 800540e:	4610      	mov	r0, r2
 8005410:	4619      	mov	r1, r3
 8005412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005416:	2200      	movs	r2, #0
 8005418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800541a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800541c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005420:	f7fb fc52 	bl	8000cc8 <__aeabi_uldivmod>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4613      	mov	r3, r2
 800542a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800542e:	e065      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x420>
 8005430:	40023800 	.word	0x40023800
 8005434:	00f42400 	.word	0x00f42400
 8005438:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543c:	4b3d      	ldr	r3, [pc, #244]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x458>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	2200      	movs	r2, #0
 8005444:	4618      	mov	r0, r3
 8005446:	4611      	mov	r1, r2
 8005448:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800544c:	653b      	str	r3, [r7, #80]	@ 0x50
 800544e:	2300      	movs	r3, #0
 8005450:	657b      	str	r3, [r7, #84]	@ 0x54
 8005452:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	f04f 0000 	mov.w	r0, #0
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	0159      	lsls	r1, r3, #5
 8005464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005468:	0150      	lsls	r0, r2, #5
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4641      	mov	r1, r8
 8005470:	1a51      	subs	r1, r2, r1
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	4649      	mov	r1, r9
 8005476:	eb63 0301 	sbc.w	r3, r3, r1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005488:	4659      	mov	r1, fp
 800548a:	018b      	lsls	r3, r1, #6
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005492:	4651      	mov	r1, sl
 8005494:	018a      	lsls	r2, r1, #6
 8005496:	4651      	mov	r1, sl
 8005498:	1a54      	subs	r4, r2, r1
 800549a:	4659      	mov	r1, fp
 800549c:	eb63 0501 	sbc.w	r5, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	00eb      	lsls	r3, r5, #3
 80054aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ae:	00e2      	lsls	r2, r4, #3
 80054b0:	4614      	mov	r4, r2
 80054b2:	461d      	mov	r5, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	18e3      	adds	r3, r4, r3
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	464b      	mov	r3, r9
 80054bc:	eb45 0303 	adc.w	r3, r5, r3
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ce:	4629      	mov	r1, r5
 80054d0:	028b      	lsls	r3, r1, #10
 80054d2:	4621      	mov	r1, r4
 80054d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d8:	4621      	mov	r1, r4
 80054da:	028a      	lsls	r2, r1, #10
 80054dc:	4610      	mov	r0, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e4:	2200      	movs	r2, #0
 80054e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054ee:	f7fb fbeb 	bl	8000cc8 <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4613      	mov	r3, r2
 80054f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80054fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <HAL_RCC_GetSysClockFreq+0x458>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	0f1b      	lsrs	r3, r3, #28
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800550a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800550e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800551a:	e003      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800551c:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_GetSysClockFreq+0x45c>)
 800551e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005528:	4618      	mov	r0, r3
 800552a:	37b8      	adds	r7, #184	@ 0xb8
 800552c:	46bd      	mov	sp, r7
 800552e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	00f42400 	.word	0x00f42400

0800553c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e28d      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8083 	beq.w	8005662 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800555c:	4b94      	ldr	r3, [pc, #592]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b04      	cmp	r3, #4
 8005566:	d019      	beq.n	800559c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005568:	4b91      	ldr	r3, [pc, #580]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005570:	2b08      	cmp	r3, #8
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005574:	4b8e      	ldr	r3, [pc, #568]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800557c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005580:	d00c      	beq.n	800559c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005582:	4b8b      	ldr	r3, [pc, #556]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d112      	bne.n	80055b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800558e:	4b88      	ldr	r3, [pc, #544]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800559a:	d10b      	bne.n	80055b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559c:	4b84      	ldr	r3, [pc, #528]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05b      	beq.n	8005660 <HAL_RCC_OscConfig+0x124>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d157      	bne.n	8005660 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e25a      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055bc:	d106      	bne.n	80055cc <HAL_RCC_OscConfig+0x90>
 80055be:	4b7c      	ldr	r3, [pc, #496]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a7b      	ldr	r2, [pc, #492]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e01d      	b.n	8005608 <HAL_RCC_OscConfig+0xcc>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0xb4>
 80055d6:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a75      	ldr	r2, [pc, #468]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b73      	ldr	r3, [pc, #460]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a72      	ldr	r2, [pc, #456]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e00b      	b.n	8005608 <HAL_RCC_OscConfig+0xcc>
 80055f0:	4b6f      	ldr	r3, [pc, #444]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6e      	ldr	r2, [pc, #440]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	4b6c      	ldr	r3, [pc, #432]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a6b      	ldr	r2, [pc, #428]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fd fa8c 	bl	8002b2c <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd fa88 	bl	8002b2c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e21f      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <HAL_RCC_OscConfig+0xdc>
 8005636:	e014      	b.n	8005662 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005638:	f7fd fa78 	bl	8002b2c <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005640:	f7fd fa74 	bl	8002b2c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	@ 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e20b      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005652:	4b57      	ldr	r3, [pc, #348]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x104>
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d06f      	beq.n	800574e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800566e:	4b50      	ldr	r3, [pc, #320]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800567a:	4b4d      	ldr	r3, [pc, #308]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005682:	2b08      	cmp	r3, #8
 8005684:	d105      	bne.n	8005692 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005686:	4b4a      	ldr	r3, [pc, #296]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005692:	4b47      	ldr	r3, [pc, #284]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d11c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569e:	4b44      	ldr	r3, [pc, #272]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056aa:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_RCC_OscConfig+0x186>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1d3      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c2:	4b3b      	ldr	r3, [pc, #236]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4937      	ldr	r1, [pc, #220]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d6:	e03a      	b.n	800574e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e0:	4b34      	ldr	r3, [pc, #208]	@ (80057b4 <HAL_RCC_OscConfig+0x278>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fd fa21 	bl	8002b2c <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ee:	f7fd fa1d 	bl	8002b2c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e1b4      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005700:	4b2b      	ldr	r3, [pc, #172]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570c:	4b28      	ldr	r3, [pc, #160]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4925      	ldr	r1, [pc, #148]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 800571c:	4313      	orrs	r3, r2
 800571e:	600b      	str	r3, [r1, #0]
 8005720:	e015      	b.n	800574e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005722:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <HAL_RCC_OscConfig+0x278>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fa00 	bl	8002b2c <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005730:	f7fd f9fc 	bl	8002b2c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e193      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005742:	4b1b      	ldr	r3, [pc, #108]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d036      	beq.n	80057c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005762:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <HAL_RCC_OscConfig+0x27c>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd f9e0 	bl	8002b2c <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005770:	f7fd f9dc 	bl	8002b2c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e173      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <HAL_RCC_OscConfig+0x274>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x234>
 800578e:	e01b      	b.n	80057c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005790:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <HAL_RCC_OscConfig+0x27c>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005796:	f7fd f9c9 	bl	8002b2c <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800579c:	e00e      	b.n	80057bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800579e:	f7fd f9c5 	bl	8002b2c <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d907      	bls.n	80057bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e15c      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
 80057b0:	40023800 	.word	0x40023800
 80057b4:	42470000 	.word	0x42470000
 80057b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057bc:	4b8a      	ldr	r3, [pc, #552]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80057be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1ea      	bne.n	800579e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8097 	beq.w	8005904 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b83      	ldr	r3, [pc, #524]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	4b7f      	ldr	r3, [pc, #508]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	4a7e      	ldr	r2, [pc, #504]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80057f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057f6:	4b7c      	ldr	r3, [pc, #496]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	4b79      	ldr	r3, [pc, #484]	@ (80059ec <HAL_RCC_OscConfig+0x4b0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d118      	bne.n	8005844 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005812:	4b76      	ldr	r3, [pc, #472]	@ (80059ec <HAL_RCC_OscConfig+0x4b0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a75      	ldr	r2, [pc, #468]	@ (80059ec <HAL_RCC_OscConfig+0x4b0>)
 8005818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581e:	f7fd f985 	bl	8002b2c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005826:	f7fd f981 	bl	8002b2c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e118      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	4b6c      	ldr	r3, [pc, #432]	@ (80059ec <HAL_RCC_OscConfig+0x4b0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d106      	bne.n	800585a <HAL_RCC_OscConfig+0x31e>
 800584c:	4b66      	ldr	r3, [pc, #408]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005850:	4a65      	ldr	r2, [pc, #404]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6713      	str	r3, [r2, #112]	@ 0x70
 8005858:	e01c      	b.n	8005894 <HAL_RCC_OscConfig+0x358>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b05      	cmp	r3, #5
 8005860:	d10c      	bne.n	800587c <HAL_RCC_OscConfig+0x340>
 8005862:	4b61      	ldr	r3, [pc, #388]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005866:	4a60      	ldr	r2, [pc, #384]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005868:	f043 0304 	orr.w	r3, r3, #4
 800586c:	6713      	str	r3, [r2, #112]	@ 0x70
 800586e:	4b5e      	ldr	r3, [pc, #376]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	4a5d      	ldr	r2, [pc, #372]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	6713      	str	r3, [r2, #112]	@ 0x70
 800587a:	e00b      	b.n	8005894 <HAL_RCC_OscConfig+0x358>
 800587c:	4b5a      	ldr	r3, [pc, #360]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005880:	4a59      	ldr	r2, [pc, #356]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	6713      	str	r3, [r2, #112]	@ 0x70
 8005888:	4b57      	ldr	r3, [pc, #348]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588c:	4a56      	ldr	r2, [pc, #344]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fd f946 	bl	8002b2c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a4:	f7fd f942 	bl	8002b2c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e0d7      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ba:	4b4b      	ldr	r3, [pc, #300]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0ee      	beq.n	80058a4 <HAL_RCC_OscConfig+0x368>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fd f930 	bl	8002b2c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fd f92c 	bl	8002b2c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0c1      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e6:	4b40      	ldr	r3, [pc, #256]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1ee      	bne.n	80058d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d105      	bne.n	8005904 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f8:	4b3b      	ldr	r3, [pc, #236]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	4a3a      	ldr	r2, [pc, #232]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80058fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80ad 	beq.w	8005a68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800590e:	4b36      	ldr	r3, [pc, #216]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b08      	cmp	r3, #8
 8005918:	d060      	beq.n	80059dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d145      	bne.n	80059ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005922:	4b33      	ldr	r3, [pc, #204]	@ (80059f0 <HAL_RCC_OscConfig+0x4b4>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fd f900 	bl	8002b2c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005930:	f7fd f8fc 	bl	8002b2c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e093      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005942:	4b29      	ldr	r3, [pc, #164]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	019b      	lsls	r3, r3, #6
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	3b01      	subs	r3, #1
 8005968:	041b      	lsls	r3, r3, #16
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	071b      	lsls	r3, r3, #28
 800597a:	491b      	ldr	r1, [pc, #108]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005980:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_RCC_OscConfig+0x4b4>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005986:	f7fd f8d1 	bl	8002b2c <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598e:	f7fd f8cd 	bl	8002b2c <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e064      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a0:	4b11      	ldr	r3, [pc, #68]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x452>
 80059ac:	e05c      	b.n	8005a68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <HAL_RCC_OscConfig+0x4b4>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fd f8ba 	bl	8002b2c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fd f8b6 	bl	8002b2c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e04d      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x480>
 80059da:	e045      	b.n	8005a68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e040      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40007000 	.word	0x40007000
 80059f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a74 <HAL_RCC_OscConfig+0x538>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d030      	beq.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d129      	bne.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d122      	bne.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a24:	4013      	ands	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d119      	bne.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d10f      	bne.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023800 	.word	0x40023800

08005a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07b      	b.n	8005b82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a9a:	d009      	beq.n	8005ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	61da      	str	r2, [r3, #28]
 8005aa2:	e005      	b.n	8005ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc fa68 	bl	8001fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b34:	ea42 0103 	orr.w	r1, r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	f003 0104 	and.w	r1, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	f003 0210 	and.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_SPI_Transmit+0x22>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e126      	b.n	8005dfa <HAL_SPI_Transmit+0x270>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb4:	f7fc ffba 	bl	8002b2c <HAL_GetTick>
 8005bb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bce:	e10b      	b.n	8005de8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_SPI_Transmit+0x52>
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005be0:	e102      	b.n	8005de8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2203      	movs	r2, #3
 8005be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c28:	d10f      	bne.n	8005c4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b40      	cmp	r3, #64	@ 0x40
 8005c56:	d007      	beq.n	8005c68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c70:	d14b      	bne.n	8005d0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_Transmit+0xf6>
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d13e      	bne.n	8005cfe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ca4:	e02b      	b.n	8005cfe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d112      	bne.n	8005cda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005cd8:	e011      	b.n	8005cfe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cda:	f7fc ff27 	bl	8002b2c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d803      	bhi.n	8005cf2 <HAL_SPI_Transmit+0x168>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf0:	d102      	bne.n	8005cf8 <HAL_SPI_Transmit+0x16e>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cfc:	e074      	b.n	8005de8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1ce      	bne.n	8005ca6 <HAL_SPI_Transmit+0x11c>
 8005d08:	e04c      	b.n	8005da4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Transmit+0x18e>
 8005d12:	8afb      	ldrh	r3, [r7, #22]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d140      	bne.n	8005d9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d3e:	e02c      	b.n	8005d9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d113      	bne.n	8005d76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d74:	e011      	b.n	8005d9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d76:	f7fc fed9 	bl	8002b2c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_Transmit+0x204>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Transmit+0x20a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d98:	e026      	b.n	8005de8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1cd      	bne.n	8005d40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fa55 	bl	8006258 <SPI_EndRxTxTransaction>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e000      	b.n	8005de8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005de6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08c      	sub	sp, #48	@ 0x30
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e10:	2301      	movs	r3, #1
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x26>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e18a      	b.n	800613e <HAL_SPI_TransmitReceive+0x33c>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e30:	f7fc fe7c 	bl	8002b2c <HAL_GetTick>
 8005e34:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e46:	887b      	ldrh	r3, [r7, #2]
 8005e48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d00f      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x70>
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e58:	d107      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x68>
 8005e62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d003      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e70:	e15b      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x82>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x82>
 8005e7e:	887b      	ldrh	r3, [r7, #2]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e8a:	e14e      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d003      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	887a      	ldrh	r2, [r7, #2]
 8005eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	887a      	ldrh	r2, [r7, #2]
 8005ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b40      	cmp	r3, #64	@ 0x40
 8005ee2:	d007      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005efc:	d178      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x10a>
 8005f06:	8b7b      	ldrh	r3, [r7, #26]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d166      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f10:	881a      	ldrh	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1c:	1c9a      	adds	r2, r3, #2
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f30:	e053      	b.n	8005fda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x176>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d016      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x176>
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d113      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d119      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x1b8>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d014      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	b292      	uxth	r2, r2
 8005f9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fba:	f7fc fdb7 	bl	8002b2c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d807      	bhi.n	8005fda <HAL_SPI_TransmitReceive+0x1d8>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fd0:	d003      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005fd8:	e0a7      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1a6      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x130>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1a1      	bne.n	8005f32 <HAL_SPI_TransmitReceive+0x130>
 8005fee:	e07c      	b.n	80060ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_TransmitReceive+0x1fc>
 8005ff8:	8b7b      	ldrh	r3, [r7, #26]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d16b      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006024:	e057      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b02      	cmp	r3, #2
 8006032:	d11c      	bne.n	800606e <HAL_SPI_TransmitReceive+0x26c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d017      	beq.n	800606e <HAL_SPI_TransmitReceive+0x26c>
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d114      	bne.n	800606e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	330c      	adds	r3, #12
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d119      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x2ae>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d014      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060ac:	2301      	movs	r3, #1
 80060ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060b0:	f7fc fd3c 	bl	8002b2c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060bc:	429a      	cmp	r2, r3
 80060be:	d803      	bhi.n	80060c8 <HAL_SPI_TransmitReceive+0x2c6>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c6:	d102      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x2cc>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80060d4:	e029      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1a2      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x224>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d19d      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f8b2 	bl	8006258 <SPI_EndRxTxTransaction>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d006      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006106:	e010      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	e000      	b.n	800612a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006128:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800613a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800613e:	4618      	mov	r0, r3
 8006140:	3730      	adds	r7, #48	@ 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006158:	f7fc fce8 	bl	8002b2c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	4413      	add	r3, r2
 8006166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006168:	f7fc fce0 	bl	8002b2c <HAL_GetTick>
 800616c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800616e:	4b39      	ldr	r3, [pc, #228]	@ (8006254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	015b      	lsls	r3, r3, #5
 8006174:	0d1b      	lsrs	r3, r3, #20
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	fb02 f303 	mul.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800617e:	e054      	b.n	800622a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006186:	d050      	beq.n	800622a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006188:	f7fc fcd0 	bl	8002b2c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d902      	bls.n	800619e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d13d      	bne.n	800621a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061b6:	d111      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061c0:	d004      	beq.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ca:	d107      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e4:	d10f      	bne.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e017      	b.n	800624a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3b01      	subs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	d19b      	bne.n	8006180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000000 	.word	0x20000000

08006258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <SPI_EndRxTxTransaction+0x7c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1b      	ldr	r2, [pc, #108]	@ (80062d8 <SPI_EndRxTxTransaction+0x80>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	0d5b      	lsrs	r3, r3, #21
 8006270:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006282:	d112      	bne.n	80062aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2200      	movs	r2, #0
 800628c:	2180      	movs	r1, #128	@ 0x80
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff ff5a 	bl	8006148 <SPI_WaitFlagStateUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629e:	f043 0220 	orr.w	r2, r3, #32
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e00f      	b.n	80062ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d0f2      	beq.n	80062aa <SPI_EndRxTxTransaction+0x52>
 80062c4:	e000      	b.n	80062c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80062c6:	bf00      	nop
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000000 	.word	0x20000000
 80062d8:	165e9f81 	.word	0x165e9f81

080062dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e041      	b.n	8006372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc f9ac 	bl	8002660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f000 fd16 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d001      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e04e      	b.n	8006432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a23      	ldr	r2, [pc, #140]	@ (8006440 <HAL_TIM_Base_Start_IT+0xc4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d022      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063be:	d01d      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <HAL_TIM_Base_Start_IT+0xc8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d018      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <HAL_TIM_Base_Start_IT+0xcc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <HAL_TIM_Base_Start_IT+0xd0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00e      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006450 <HAL_TIM_Base_Start_IT+0xd4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d009      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <HAL_TIM_Base_Start_IT+0xd8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x80>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <HAL_TIM_Base_Start_IT+0xdc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d111      	bne.n	8006420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b06      	cmp	r3, #6
 800640c:	d010      	beq.n	8006430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641e:	e007      	b.n	8006430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40010400 	.word	0x40010400
 8006454:	40014000 	.word	0x40014000
 8006458:	40001800 	.word	0x40001800

0800645c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e041      	b.n	80064f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fc f970 	bl	8002768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f000 fc56 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_TIM_PWM_Start+0x24>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e022      	b.n	8006566 <HAL_TIM_PWM_Start+0x6a>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b04      	cmp	r3, #4
 8006524:	d109      	bne.n	800653a <HAL_TIM_PWM_Start+0x3e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	e015      	b.n	8006566 <HAL_TIM_PWM_Start+0x6a>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d109      	bne.n	8006554 <HAL_TIM_PWM_Start+0x58>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e008      	b.n	8006566 <HAL_TIM_PWM_Start+0x6a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e07c      	b.n	8006668 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0x82>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800657c:	e013      	b.n	80065a6 <HAL_TIM_PWM_Start+0xaa>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0x92>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800658c:	e00b      	b.n	80065a6 <HAL_TIM_PWM_Start+0xaa>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xa2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800659c:	e003      	b.n	80065a6 <HAL_TIM_PWM_Start+0xaa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 feb6 	bl	8007320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006670 <HAL_TIM_PWM_Start+0x174>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_TIM_PWM_Start+0xcc>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006674 <HAL_TIM_PWM_Start+0x178>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <HAL_TIM_PWM_Start+0xd0>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <HAL_TIM_PWM_Start+0xd2>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a22      	ldr	r2, [pc, #136]	@ (8006670 <HAL_TIM_PWM_Start+0x174>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f4:	d01d      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006678 <HAL_TIM_PWM_Start+0x17c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <HAL_TIM_PWM_Start+0x180>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1c      	ldr	r2, [pc, #112]	@ (8006680 <HAL_TIM_PWM_Start+0x184>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a16      	ldr	r2, [pc, #88]	@ (8006674 <HAL_TIM_PWM_Start+0x178>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	@ (8006684 <HAL_TIM_PWM_Start+0x188>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_TIM_PWM_Start+0x136>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a16      	ldr	r2, [pc, #88]	@ (8006688 <HAL_TIM_PWM_Start+0x18c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d111      	bne.n	8006656 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b06      	cmp	r3, #6
 8006642:	d010      	beq.n	8006666 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006654:	e007      	b.n	8006666 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40000c00 	.word	0x40000c00
 8006684:	40014000 	.word	0x40014000
 8006688:	40001800 	.word	0x40001800

0800668c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e097      	b.n	80067d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7fc f811 	bl	80026dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f000 fb33 	bl	8006d4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	4313      	orrs	r3, r2
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800672c:	f023 030c 	bic.w	r3, r3, #12
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006738:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800673c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	4313      	orrs	r3, r2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	011a      	lsls	r2, r3, #4
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	031b      	lsls	r3, r3, #12
 800675c:	4313      	orrs	r3, r2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	4313      	orrs	r3, r2
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d122      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d11b      	bne.n	8006834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0202 	mvn.w	r2, #2
 8006804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa77 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 8006820:	e005      	b.n	800682e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa69 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa7a 	bl	8006d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b04      	cmp	r3, #4
 8006840:	d122      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d11b      	bne.n	8006888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0204 	mvn.w	r2, #4
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fa4d 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa3f 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa50 	bl	8006d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b08      	cmp	r3, #8
 8006894:	d122      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d11b      	bne.n	80068dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0208 	mvn.w	r2, #8
 80068ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2204      	movs	r2, #4
 80068b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fa23 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa15 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fa26 	bl	8006d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d122      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d11b      	bne.n	8006930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9f9 	bl	8006d0e <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9eb 	bl	8006cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9fc 	bl	8006d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10e      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0201 	mvn.w	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb f8ec 	bl	8001b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006966:	2b80      	cmp	r3, #128	@ 0x80
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006974:	2b80      	cmp	r3, #128	@ 0x80
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fdca 	bl	800751c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b40      	cmp	r3, #64	@ 0x40
 8006994:	d10e      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b40      	cmp	r3, #64	@ 0x40
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9c1 	bl	8006d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d10e      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0220 	mvn.w	r2, #32
 80069d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fd94 	bl	8007508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0ae      	b.n	8006b64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	f200 809f 	bhi.w	8006b54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006b55 	.word	0x08006b55
 8006a24:	08006b55 	.word	0x08006b55
 8006a28:	08006b55 	.word	0x08006b55
 8006a2c:	08006a91 	.word	0x08006a91
 8006a30:	08006b55 	.word	0x08006b55
 8006a34:	08006b55 	.word	0x08006b55
 8006a38:	08006b55 	.word	0x08006b55
 8006a3c:	08006ad3 	.word	0x08006ad3
 8006a40:	08006b55 	.word	0x08006b55
 8006a44:	08006b55 	.word	0x08006b55
 8006a48:	08006b55 	.word	0x08006b55
 8006a4c:	08006b13 	.word	0x08006b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa18 	bl	8006e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0208 	orr.w	r2, r2, #8
 8006a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0204 	bic.w	r2, r2, #4
 8006a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6999      	ldr	r1, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	619a      	str	r2, [r3, #24]
      break;
 8006a8e:	e064      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fa68 	bl	8006f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	021a      	lsls	r2, r3, #8
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	619a      	str	r2, [r3, #24]
      break;
 8006ad0:	e043      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fabd 	bl	8007058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0208 	orr.w	r2, r2, #8
 8006aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 0204 	bic.w	r2, r2, #4
 8006afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69d9      	ldr	r1, [r3, #28]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691a      	ldr	r2, [r3, #16]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	61da      	str	r2, [r3, #28]
      break;
 8006b10:	e023      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fb11 	bl	8007140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	021a      	lsls	r2, r3, #8
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	61da      	str	r2, [r3, #28]
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]
      break;
 8006b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_TIM_ConfigClockSource+0x1c>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0b4      	b.n	8006cf2 <HAL_TIM_ConfigClockSource+0x186>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc0:	d03e      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0xd4>
 8006bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bc6:	f200 8087 	bhi.w	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bce:	f000 8086 	beq.w	8006cde <HAL_TIM_ConfigClockSource+0x172>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bd6:	d87f      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b70      	cmp	r3, #112	@ 0x70
 8006bda:	d01a      	beq.n	8006c12 <HAL_TIM_ConfigClockSource+0xa6>
 8006bdc:	2b70      	cmp	r3, #112	@ 0x70
 8006bde:	d87b      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b60      	cmp	r3, #96	@ 0x60
 8006be2:	d050      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x11a>
 8006be4:	2b60      	cmp	r3, #96	@ 0x60
 8006be6:	d877      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b50      	cmp	r3, #80	@ 0x50
 8006bea:	d03c      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0xfa>
 8006bec:	2b50      	cmp	r3, #80	@ 0x50
 8006bee:	d873      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b40      	cmp	r3, #64	@ 0x40
 8006bf2:	d058      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x13a>
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d86f      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b30      	cmp	r3, #48	@ 0x30
 8006bfa:	d064      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006bfc:	2b30      	cmp	r3, #48	@ 0x30
 8006bfe:	d86b      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d060      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d867      	bhi.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d05c      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d05a      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006c10:	e062      	b.n	8006cd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6899      	ldr	r1, [r3, #8]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f000 fb5d 	bl	80072e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	609a      	str	r2, [r3, #8]
      break;
 8006c3e:	e04f      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f000 fb46 	bl	80072e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c62:	609a      	str	r2, [r3, #8]
      break;
 8006c64:	e03c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 faba 	bl	80071ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2150      	movs	r1, #80	@ 0x50
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fb13 	bl	80072aa <TIM_ITRx_SetConfig>
      break;
 8006c84:	e02c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fad9 	bl	800724a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2160      	movs	r1, #96	@ 0x60
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fb03 	bl	80072aa <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e01c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 fa9a 	bl	80071ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2140      	movs	r1, #64	@ 0x40
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 faf3 	bl	80072aa <TIM_ITRx_SetConfig>
      break;
 8006cc4:	e00c      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f000 faea 	bl	80072aa <TIM_ITRx_SetConfig>
      break;
 8006cd6:	e003      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	73fb      	strb	r3, [r7, #15]
      break;
 8006cdc:	e000      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a40      	ldr	r2, [pc, #256]	@ (8006e60 <TIM_Base_SetConfig+0x114>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d013      	beq.n	8006d8c <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d6a:	d00f      	beq.n	8006d8c <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006e64 <TIM_Base_SetConfig+0x118>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3c      	ldr	r2, [pc, #240]	@ (8006e68 <TIM_Base_SetConfig+0x11c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d007      	beq.n	8006d8c <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8006e6c <TIM_Base_SetConfig+0x120>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3a      	ldr	r2, [pc, #232]	@ (8006e70 <TIM_Base_SetConfig+0x124>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d108      	bne.n	8006d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2f      	ldr	r2, [pc, #188]	@ (8006e60 <TIM_Base_SetConfig+0x114>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d02b      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dac:	d027      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e64 <TIM_Base_SetConfig+0x118>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d023      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e68 <TIM_Base_SetConfig+0x11c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01f      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e6c <TIM_Base_SetConfig+0x120>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01b      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a29      	ldr	r2, [pc, #164]	@ (8006e70 <TIM_Base_SetConfig+0x124>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d017      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a28      	ldr	r2, [pc, #160]	@ (8006e74 <TIM_Base_SetConfig+0x128>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a27      	ldr	r2, [pc, #156]	@ (8006e78 <TIM_Base_SetConfig+0x12c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00f      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a26      	ldr	r2, [pc, #152]	@ (8006e7c <TIM_Base_SetConfig+0x130>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a25      	ldr	r2, [pc, #148]	@ (8006e80 <TIM_Base_SetConfig+0x134>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a24      	ldr	r2, [pc, #144]	@ (8006e84 <TIM_Base_SetConfig+0x138>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a23      	ldr	r2, [pc, #140]	@ (8006e88 <TIM_Base_SetConfig+0x13c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a0a      	ldr	r2, [pc, #40]	@ (8006e60 <TIM_Base_SetConfig+0x114>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_Base_SetConfig+0xf8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e70 <TIM_Base_SetConfig+0x124>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d103      	bne.n	8006e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	615a      	str	r2, [r3, #20]
}
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40000400 	.word	0x40000400
 8006e68:	40000800 	.word	0x40000800
 8006e6c:	40000c00 	.word	0x40000c00
 8006e70:	40010400 	.word	0x40010400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800
 8006e80:	40001800 	.word	0x40001800
 8006e84:	40001c00 	.word	0x40001c00
 8006e88:	40002000 	.word	0x40002000

08006e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 0302 	bic.w	r3, r3, #2
 8006ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a20      	ldr	r2, [pc, #128]	@ (8006f64 <TIM_OC1_SetConfig+0xd8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC1_SetConfig+0x64>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a1f      	ldr	r2, [pc, #124]	@ (8006f68 <TIM_OC1_SetConfig+0xdc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10c      	bne.n	8006f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0308 	bic.w	r3, r3, #8
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f023 0304 	bic.w	r3, r3, #4
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <TIM_OC1_SetConfig+0xd8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC1_SetConfig+0x8e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a14      	ldr	r2, [pc, #80]	@ (8006f68 <TIM_OC1_SetConfig+0xdc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d111      	bne.n	8006f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	621a      	str	r2, [r3, #32]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	40010000 	.word	0x40010000
 8006f68:	40010400 	.word	0x40010400

08006f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0210 	bic.w	r2, r3, #16
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0320 	bic.w	r3, r3, #32
 8006fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a22      	ldr	r2, [pc, #136]	@ (8007050 <TIM_OC2_SetConfig+0xe4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC2_SetConfig+0x68>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a21      	ldr	r2, [pc, #132]	@ (8007054 <TIM_OC2_SetConfig+0xe8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10d      	bne.n	8006ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	@ (8007050 <TIM_OC2_SetConfig+0xe4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <TIM_OC2_SetConfig+0x94>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	@ (8007054 <TIM_OC2_SetConfig+0xe8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d113      	bne.n	8007028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400

08007058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a21      	ldr	r2, [pc, #132]	@ (8007138 <TIM_OC3_SetConfig+0xe0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_OC3_SetConfig+0x66>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a20      	ldr	r2, [pc, #128]	@ (800713c <TIM_OC3_SetConfig+0xe4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d10d      	bne.n	80070da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <TIM_OC3_SetConfig+0xe0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_OC3_SetConfig+0x92>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a15      	ldr	r2, [pc, #84]	@ (800713c <TIM_OC3_SetConfig+0xe4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d113      	bne.n	8007112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40010000 	.word	0x40010000
 800713c:	40010400 	.word	0x40010400

08007140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800716e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800718a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	031b      	lsls	r3, r3, #12
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <TIM_OC4_SetConfig+0xa4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC4_SetConfig+0x68>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a11      	ldr	r2, [pc, #68]	@ (80071e8 <TIM_OC4_SetConfig+0xa8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d109      	bne.n	80071bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	019b      	lsls	r3, r3, #6
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	621a      	str	r2, [r3, #32]
}
 80071d6:	bf00      	nop
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40010400 	.word	0x40010400

080071ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 030a 	bic.w	r3, r3, #10
 8007228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724a:	b480      	push	{r7}
 800724c:	b087      	sub	sp, #28
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0210 	bic.w	r2, r3, #16
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	031b      	lsls	r3, r3, #12
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	f043 0307 	orr.w	r3, r3, #7
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	021a      	lsls	r2, r3, #8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	431a      	orrs	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4313      	orrs	r3, r2
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	bf00      	nop
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 031f 	and.w	r3, r3, #31
 8007332:	2201      	movs	r2, #1
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	43db      	mvns	r3, r3
 8007342:	401a      	ands	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	fa01 f303 	lsl.w	r3, r1, r3
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007380:	2302      	movs	r3, #2
 8007382:	e05a      	b.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a21      	ldr	r2, [pc, #132]	@ (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d022      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d0:	d01d      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d018      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00e      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d009      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a17      	ldr	r2, [pc, #92]	@ (800745c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a15      	ldr	r2, [pc, #84]	@ (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d10c      	bne.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40000c00 	.word	0x40000c00
 8007458:	40010400 	.word	0x40010400
 800745c:	40014000 	.word	0x40014000
 8007460:	40001800 	.word	0x40001800

08007464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007478:	2b01      	cmp	r3, #1
 800747a:	d101      	bne.n	8007480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800747c:	2302      	movs	r3, #2
 800747e:	e03d      	b.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e03f      	b.n	80075c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fb f9b4 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	@ 0x24
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fdd1 	bl	800811c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08c      	sub	sp, #48	@ 0x30
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d165      	bne.n	80076b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_UART_Transmit_DMA+0x26>
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e05e      	b.n	80076b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Transmit_DMA+0x38>
 8007600:	2302      	movs	r3, #2
 8007602:	e057      	b.n	80076b4 <HAL_UART_Transmit_DMA+0xe8>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2221      	movs	r2, #33	@ 0x21
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007630:	4a22      	ldr	r2, [pc, #136]	@ (80076bc <HAL_UART_Transmit_DMA+0xf0>)
 8007632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	4a21      	ldr	r2, [pc, #132]	@ (80076c0 <HAL_UART_Transmit_DMA+0xf4>)
 800763a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007640:	4a20      	ldr	r2, [pc, #128]	@ (80076c4 <HAL_UART_Transmit_DMA+0xf8>)
 8007642:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800764c:	f107 0308 	add.w	r3, r7, #8
 8007650:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3304      	adds	r3, #4
 8007660:	461a      	mov	r2, r3
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	f7fb fef6 	bl	8003454 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007670:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	617b      	str	r3, [r7, #20]
   return(result);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800769a:	627a      	str	r2, [r7, #36]	@ 0x24
 800769c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6a39      	ldr	r1, [r7, #32]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	e000      	b.n	80076b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80076b2:	2302      	movs	r3, #2
  }
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3730      	adds	r7, #48	@ 0x30
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	08007c4d 	.word	0x08007c4d
 80076c0:	08007ce7 	.word	0x08007ce7
 80076c4:	08007d03 	.word	0x08007d03

080076c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b0ba      	sub	sp, #232	@ 0xe8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10f      	bne.n	800772e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_UART_IRQHandler+0x66>
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fc3c 	bl	8007fa4 <UART_Receive_IT>
      return;
 800772c:	e256      	b.n	8007bdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 80de 	beq.w	80078f4 <HAL_UART_IRQHandler+0x22c>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007748:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 80d1 	beq.w	80078f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <HAL_UART_IRQHandler+0xae>
 800775e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	f043 0201 	orr.w	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800777a:	f003 0304 	and.w	r3, r3, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_UART_IRQHandler+0xd2>
 8007782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	f043 0202 	orr.w	r2, r3, #2
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <HAL_UART_IRQHandler+0xf6>
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	f043 0204 	orr.w	r2, r3, #4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d011      	beq.n	80077ee <HAL_UART_IRQHandler+0x126>
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	f043 0208 	orr.w	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 81ed 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d008      	beq.n	8007816 <HAL_UART_IRQHandler+0x14e>
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fbc7 	bl	8007fa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007820:	2b40      	cmp	r3, #64	@ 0x40
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <HAL_UART_IRQHandler+0x17a>
 800783a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d04f      	beq.n	80078e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 facf 	bl	8007de6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007852:	2b40      	cmp	r3, #64	@ 0x40
 8007854:	d141      	bne.n	80078da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800786c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007882:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800788e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800789a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1d9      	bne.n	8007856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d013      	beq.n	80078d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	4a7d      	ldr	r2, [pc, #500]	@ (8007aa4 <HAL_UART_IRQHandler+0x3dc>)
 80078b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fb fe94 	bl	80035e4 <HAL_DMA_Abort_IT>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d016      	beq.n	80078f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d0:	e00e      	b.n	80078f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9a4 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d8:	e00a      	b.n	80078f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9a0 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	e006      	b.n	80078f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f99c 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80078ee:	e170      	b.n	8007bd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	bf00      	nop
    return;
 80078f2:	e16e      	b.n	8007bd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	f040 814a 	bne.w	8007b92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 8143 	beq.w	8007b92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800790c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 813c 	beq.w	8007b92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793a:	2b40      	cmp	r3, #64	@ 0x40
 800793c:	f040 80b4 	bne.w	8007aa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800794c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 8140 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800795a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800795e:	429a      	cmp	r2, r3
 8007960:	f080 8139 	bcs.w	8007bd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800796a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007976:	f000 8088 	beq.w	8007a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	330c      	adds	r3, #12
 8007980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d9      	bne.n	800797a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3314      	adds	r3, #20
 80079e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e1      	bne.n	80079c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3314      	adds	r3, #20
 8007a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3314      	adds	r3, #20
 8007a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e3      	bne.n	8007a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5a:	f023 0310 	bic.w	r3, r3, #16
 8007a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e3      	bne.n	8007a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fb fd3d 	bl	8003504 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f8ca 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa0:	e099      	b.n	8007bd6 <HAL_UART_IRQHandler+0x50e>
 8007aa2:	bf00      	nop
 8007aa4:	08007ead 	.word	0x08007ead
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 808b 	beq.w	8007bda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8086 	beq.w	8007bda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007af2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007af4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e3      	bne.n	8007ace <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e3      	bne.n	8007b06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	330c      	adds	r3, #12
 8007b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0310 	bic.w	r3, r3, #16
 8007b62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b70:	61fa      	str	r2, [r7, #28]
 8007b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	69b9      	ldr	r1, [r7, #24]
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e3      	bne.n	8007b4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f852 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b90:	e023      	b.n	8007bda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x4ea>
 8007b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f992 	bl	8007ed4 <UART_Transmit_IT>
    return;
 8007bb0:	e014      	b.n	8007bdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <HAL_UART_IRQHandler+0x514>
 8007bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9d2 	bl	8007f74 <UART_EndTransmit_IT>
    return;
 8007bd0:	e004      	b.n	8007bdc <HAL_UART_IRQHandler+0x514>
    return;
 8007bd2:	bf00      	nop
 8007bd4:	e002      	b.n	8007bdc <HAL_UART_IRQHandler+0x514>
      return;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_UART_IRQHandler+0x514>
      return;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	37e8      	adds	r7, #232	@ 0xe8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b090      	sub	sp, #64	@ 0x40
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d137      	bne.n	8007cd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3314      	adds	r3, #20
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e5      	bne.n	8007c6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cc2:	61fa      	str	r2, [r7, #28]
 8007cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	69b9      	ldr	r1, [r7, #24]
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e5      	bne.n	8007ca2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cd6:	e002      	b.n	8007cde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007cd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007cda:	f7ff ff83 	bl	8007be4 <HAL_UART_TxCpltCallback>
}
 8007cde:	bf00      	nop
 8007ce0:	3740      	adds	r7, #64	@ 0x40
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff ff7f 	bl	8007bf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1e:	2b80      	cmp	r3, #128	@ 0x80
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b21      	cmp	r3, #33	@ 0x21
 8007d34:	d108      	bne.n	8007d48 <UART_DMAError+0x46>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007d42:	68b8      	ldr	r0, [r7, #8]
 8007d44:	f000 f827 	bl	8007d96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d52:	2b40      	cmp	r3, #64	@ 0x40
 8007d54:	bf0c      	ite	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	2300      	movne	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b22      	cmp	r3, #34	@ 0x22
 8007d68:	d108      	bne.n	8007d7c <UART_DMAError+0x7a>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007d76:	68b8      	ldr	r0, [r7, #8]
 8007d78:	f000 f835 	bl	8007de6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d80:	f043 0210 	orr.w	r2, r3, #16
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f7ff ff49 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b089      	sub	sp, #36	@ 0x24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007db4:	61fb      	str	r3, [r7, #28]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	61ba      	str	r2, [r7, #24]
 8007dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6979      	ldr	r1, [r7, #20]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	613b      	str	r3, [r7, #16]
   return(result);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8007dda:	bf00      	nop
 8007ddc:	3724      	adds	r7, #36	@ 0x24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b095      	sub	sp, #84	@ 0x54
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3314      	adds	r3, #20
 8007e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d119      	bne.n	8007e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e7e:	61ba      	str	r2, [r7, #24]
 8007e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6979      	ldr	r1, [r7, #20]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e5      	bne.n	8007e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ea0:	bf00      	nop
 8007ea2:	3754      	adds	r7, #84	@ 0x54
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff feaa 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b21      	cmp	r3, #33	@ 0x21
 8007ee6:	d13e      	bne.n	8007f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ef0:	d114      	bne.n	8007f1c <UART_Transmit_IT+0x48>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d110      	bne.n	8007f1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	461a      	mov	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	1c9a      	adds	r2, r3, #2
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	621a      	str	r2, [r3, #32]
 8007f1a:	e008      	b.n	8007f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6211      	str	r1, [r2, #32]
 8007f26:	781a      	ldrb	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10f      	bne.n	8007f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff fe25 	bl	8007be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	@ 0x30
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b22      	cmp	r3, #34	@ 0x22
 8007fb6:	f040 80ab 	bne.w	8008110 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc2:	d117      	bne.n	8007ff4 <UART_Receive_IT+0x50>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d113      	bne.n	8007ff4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fec:	1c9a      	adds	r2, r3, #2
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ff2:	e026      	b.n	8008042 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008006:	d007      	beq.n	8008018 <UART_Receive_IT+0x74>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <UART_Receive_IT+0x82>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d106      	bne.n	8008026 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e008      	b.n	8008038 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008032:	b2da      	uxtb	r2, r3
 8008034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008036:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29b      	uxth	r3, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	4619      	mov	r1, r3
 8008050:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008052:	2b00      	cmp	r3, #0
 8008054:	d15a      	bne.n	800810c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0220 	bic.w	r2, r2, #32
 8008064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008074:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0201 	bic.w	r2, r2, #1
 8008084:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008092:	2b01      	cmp	r3, #1
 8008094:	d135      	bne.n	8008102 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	613b      	str	r3, [r7, #16]
   return(result);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f023 0310 	bic.w	r3, r3, #16
 80080b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	330c      	adds	r3, #12
 80080ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080bc:	623a      	str	r2, [r7, #32]
 80080be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	69f9      	ldr	r1, [r7, #28]
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e5      	bne.n	800809c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d10a      	bne.n	80080f4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fd9a 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
 8008100:	e002      	b.n	8008108 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fd82 	bl	8007c0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e002      	b.n	8008112 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3730      	adds	r7, #48	@ 0x30
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800811c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008120:	b0c0      	sub	sp, #256	@ 0x100
 8008122:	af00      	add	r7, sp, #0
 8008124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	68d9      	ldr	r1, [r3, #12]
 800813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	ea40 0301 	orr.w	r3, r0, r1
 8008144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	431a      	orrs	r2, r3
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	431a      	orrs	r2, r3
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008174:	f021 010c 	bic.w	r1, r1, #12
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008182:	430b      	orrs	r3, r1
 8008184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	6999      	ldr	r1, [r3, #24]
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	ea40 0301 	orr.w	r3, r0, r1
 80081a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b8f      	ldr	r3, [pc, #572]	@ (80083e8 <UART_SetConfig+0x2cc>)
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d005      	beq.n	80081bc <UART_SetConfig+0xa0>
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b8d      	ldr	r3, [pc, #564]	@ (80083ec <UART_SetConfig+0x2d0>)
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d104      	bne.n	80081c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fc ff7a 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 80081c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081c4:	e003      	b.n	80081ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7fc ff61 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 80081ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d8:	f040 810c 	bne.w	80083f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081ee:	4622      	mov	r2, r4
 80081f0:	462b      	mov	r3, r5
 80081f2:	1891      	adds	r1, r2, r2
 80081f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081f6:	415b      	adcs	r3, r3
 80081f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081fe:	4621      	mov	r1, r4
 8008200:	eb12 0801 	adds.w	r8, r2, r1
 8008204:	4629      	mov	r1, r5
 8008206:	eb43 0901 	adc.w	r9, r3, r1
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800821a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800821e:	4690      	mov	r8, r2
 8008220:	4699      	mov	r9, r3
 8008222:	4623      	mov	r3, r4
 8008224:	eb18 0303 	adds.w	r3, r8, r3
 8008228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800822c:	462b      	mov	r3, r5
 800822e:	eb49 0303 	adc.w	r3, r9, r3
 8008232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800824a:	460b      	mov	r3, r1
 800824c:	18db      	adds	r3, r3, r3
 800824e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008250:	4613      	mov	r3, r2
 8008252:	eb42 0303 	adc.w	r3, r2, r3
 8008256:	657b      	str	r3, [r7, #84]	@ 0x54
 8008258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800825c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008260:	f7f8 fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4b61      	ldr	r3, [pc, #388]	@ (80083f0 <UART_SetConfig+0x2d4>)
 800826a:	fba3 2302 	umull	r2, r3, r3, r2
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	011c      	lsls	r4, r3, #4
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800827c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	1891      	adds	r1, r2, r2
 800828a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800828c:	415b      	adcs	r3, r3
 800828e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008294:	4641      	mov	r1, r8
 8008296:	eb12 0a01 	adds.w	sl, r2, r1
 800829a:	4649      	mov	r1, r9
 800829c:	eb43 0b01 	adc.w	fp, r3, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082b4:	4692      	mov	sl, r2
 80082b6:	469b      	mov	fp, r3
 80082b8:	4643      	mov	r3, r8
 80082ba:	eb1a 0303 	adds.w	r3, sl, r3
 80082be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082c2:	464b      	mov	r3, r9
 80082c4:	eb4b 0303 	adc.w	r3, fp, r3
 80082c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082e0:	460b      	mov	r3, r1
 80082e2:	18db      	adds	r3, r3, r3
 80082e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e6:	4613      	mov	r3, r2
 80082e8:	eb42 0303 	adc.w	r3, r2, r3
 80082ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082f6:	f7f8 fce7 	bl	8000cc8 <__aeabi_uldivmod>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	4b3b      	ldr	r3, [pc, #236]	@ (80083f0 <UART_SetConfig+0x2d4>)
 8008302:	fba3 2301 	umull	r2, r3, r3, r1
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	2264      	movs	r2, #100	@ 0x64
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	1acb      	subs	r3, r1, r3
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008316:	4b36      	ldr	r3, [pc, #216]	@ (80083f0 <UART_SetConfig+0x2d4>)
 8008318:	fba3 2302 	umull	r2, r3, r3, r2
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008324:	441c      	add	r4, r3
 8008326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800832a:	2200      	movs	r2, #0
 800832c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	1891      	adds	r1, r2, r2
 800833e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008340:	415b      	adcs	r3, r3
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008348:	4641      	mov	r1, r8
 800834a:	1851      	adds	r1, r2, r1
 800834c:	6339      	str	r1, [r7, #48]	@ 0x30
 800834e:	4649      	mov	r1, r9
 8008350:	414b      	adcs	r3, r1
 8008352:	637b      	str	r3, [r7, #52]	@ 0x34
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008360:	4659      	mov	r1, fp
 8008362:	00cb      	lsls	r3, r1, #3
 8008364:	4651      	mov	r1, sl
 8008366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836a:	4651      	mov	r1, sl
 800836c:	00ca      	lsls	r2, r1, #3
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	4603      	mov	r3, r0
 8008374:	4642      	mov	r2, r8
 8008376:	189b      	adds	r3, r3, r2
 8008378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800837c:	464b      	mov	r3, r9
 800837e:	460a      	mov	r2, r1
 8008380:	eb42 0303 	adc.w	r3, r2, r3
 8008384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800839c:	460b      	mov	r3, r1
 800839e:	18db      	adds	r3, r3, r3
 80083a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083a2:	4613      	mov	r3, r2
 80083a4:	eb42 0303 	adc.w	r3, r2, r3
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083b2:	f7f8 fc89 	bl	8000cc8 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <UART_SetConfig+0x2d4>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	@ 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	3332      	adds	r3, #50	@ 0x32
 80083ce:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <UART_SetConfig+0x2d4>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f003 0207 	and.w	r2, r3, #7
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4422      	add	r2, r4
 80083e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083e4:	e106      	b.n	80085f4 <UART_SetConfig+0x4d8>
 80083e6:	bf00      	nop
 80083e8:	40011000 	.word	0x40011000
 80083ec:	40011400 	.word	0x40011400
 80083f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008406:	4642      	mov	r2, r8
 8008408:	464b      	mov	r3, r9
 800840a:	1891      	adds	r1, r2, r2
 800840c:	6239      	str	r1, [r7, #32]
 800840e:	415b      	adcs	r3, r3
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24
 8008412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008416:	4641      	mov	r1, r8
 8008418:	1854      	adds	r4, r2, r1
 800841a:	4649      	mov	r1, r9
 800841c:	eb43 0501 	adc.w	r5, r3, r1
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	00eb      	lsls	r3, r5, #3
 800842a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800842e:	00e2      	lsls	r2, r4, #3
 8008430:	4614      	mov	r4, r2
 8008432:	461d      	mov	r5, r3
 8008434:	4643      	mov	r3, r8
 8008436:	18e3      	adds	r3, r4, r3
 8008438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800843c:	464b      	mov	r3, r9
 800843e:	eb45 0303 	adc.w	r3, r5, r3
 8008442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008462:	4629      	mov	r1, r5
 8008464:	008b      	lsls	r3, r1, #2
 8008466:	4621      	mov	r1, r4
 8008468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800846c:	4621      	mov	r1, r4
 800846e:	008a      	lsls	r2, r1, #2
 8008470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008474:	f7f8 fc28 	bl	8000cc8 <__aeabi_uldivmod>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4b60      	ldr	r3, [pc, #384]	@ (8008600 <UART_SetConfig+0x4e4>)
 800847e:	fba3 2302 	umull	r2, r3, r3, r2
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	011c      	lsls	r4, r3, #4
 8008486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800848a:	2200      	movs	r2, #0
 800848c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008498:	4642      	mov	r2, r8
 800849a:	464b      	mov	r3, r9
 800849c:	1891      	adds	r1, r2, r2
 800849e:	61b9      	str	r1, [r7, #24]
 80084a0:	415b      	adcs	r3, r3
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084a8:	4641      	mov	r1, r8
 80084aa:	1851      	adds	r1, r2, r1
 80084ac:	6139      	str	r1, [r7, #16]
 80084ae:	4649      	mov	r1, r9
 80084b0:	414b      	adcs	r3, r1
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084c0:	4659      	mov	r1, fp
 80084c2:	00cb      	lsls	r3, r1, #3
 80084c4:	4651      	mov	r1, sl
 80084c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ca:	4651      	mov	r1, sl
 80084cc:	00ca      	lsls	r2, r1, #3
 80084ce:	4610      	mov	r0, r2
 80084d0:	4619      	mov	r1, r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	4642      	mov	r2, r8
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084dc:	464b      	mov	r3, r9
 80084de:	460a      	mov	r2, r1
 80084e0:	eb42 0303 	adc.w	r3, r2, r3
 80084e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008500:	4649      	mov	r1, r9
 8008502:	008b      	lsls	r3, r1, #2
 8008504:	4641      	mov	r1, r8
 8008506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800850a:	4641      	mov	r1, r8
 800850c:	008a      	lsls	r2, r1, #2
 800850e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008512:	f7f8 fbd9 	bl	8000cc8 <__aeabi_uldivmod>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4611      	mov	r1, r2
 800851c:	4b38      	ldr	r3, [pc, #224]	@ (8008600 <UART_SetConfig+0x4e4>)
 800851e:	fba3 2301 	umull	r2, r3, r3, r1
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	2264      	movs	r2, #100	@ 0x64
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	1acb      	subs	r3, r1, r3
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	3332      	adds	r3, #50	@ 0x32
 8008530:	4a33      	ldr	r2, [pc, #204]	@ (8008600 <UART_SetConfig+0x4e4>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800853c:	441c      	add	r4, r3
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008542:	2200      	movs	r2, #0
 8008544:	673b      	str	r3, [r7, #112]	@ 0x70
 8008546:	677a      	str	r2, [r7, #116]	@ 0x74
 8008548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	1891      	adds	r1, r2, r2
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	415b      	adcs	r3, r3
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800855c:	4641      	mov	r1, r8
 800855e:	1851      	adds	r1, r2, r1
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	4649      	mov	r1, r9
 8008564:	414b      	adcs	r3, r1
 8008566:	607b      	str	r3, [r7, #4]
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008574:	4659      	mov	r1, fp
 8008576:	00cb      	lsls	r3, r1, #3
 8008578:	4651      	mov	r1, sl
 800857a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800857e:	4651      	mov	r1, sl
 8008580:	00ca      	lsls	r2, r1, #3
 8008582:	4610      	mov	r0, r2
 8008584:	4619      	mov	r1, r3
 8008586:	4603      	mov	r3, r0
 8008588:	4642      	mov	r2, r8
 800858a:	189b      	adds	r3, r3, r2
 800858c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800858e:	464b      	mov	r3, r9
 8008590:	460a      	mov	r2, r1
 8008592:	eb42 0303 	adc.w	r3, r2, r3
 8008596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	f04f 0300 	mov.w	r3, #0
 80085ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085b0:	4649      	mov	r1, r9
 80085b2:	008b      	lsls	r3, r1, #2
 80085b4:	4641      	mov	r1, r8
 80085b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ba:	4641      	mov	r1, r8
 80085bc:	008a      	lsls	r2, r1, #2
 80085be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085c2:	f7f8 fb81 	bl	8000cc8 <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <UART_SetConfig+0x4e4>)
 80085cc:	fba3 1302 	umull	r1, r3, r3, r2
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	2164      	movs	r1, #100	@ 0x64
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	3332      	adds	r3, #50	@ 0x32
 80085de:	4a08      	ldr	r2, [pc, #32]	@ (8008600 <UART_SetConfig+0x4e4>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	f003 020f 	and.w	r2, r3, #15
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4422      	add	r2, r4
 80085f2:	609a      	str	r2, [r3, #8]
}
 80085f4:	bf00      	nop
 80085f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085fa:	46bd      	mov	sp, r7
 80085fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008600:	51eb851f 	.word	0x51eb851f

08008604 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af04      	add	r7, sp, #16
 800860a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800861c:	4b23      	ldr	r3, [pc, #140]	@ (80086ac <bmi088_init+0xa8>)
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8008622:	4b23      	ldr	r3, [pc, #140]	@ (80086b0 <bmi088_init+0xac>)
 8008624:	2200      	movs	r2, #0
 8008626:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d107      	bne.n	8008644 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8008634:	2101      	movs	r1, #1
 8008636:	2018      	movs	r0, #24
 8008638:	f003 fee2 	bl	800c400 <calloc>
 800863c:	4603      	mov	r3, r0
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68d8      	ldr	r0, [r3, #12]
 8008648:	2332      	movs	r3, #50	@ 0x32
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	2301      	movs	r3, #1
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	f107 030c 	add.w	r3, r7, #12
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	2301      	movs	r3, #1
 8008658:	2200      	movs	r2, #0
 800865a:	2130      	movs	r1, #48	@ 0x30
 800865c:	f7fb fe52 	bl	8004304 <HAL_I2C_Mem_Read>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68d8      	ldr	r0, [r3, #12]
 8008668:	2332      	movs	r3, #50	@ 0x32
 800866a:	9302      	str	r3, [sp, #8]
 800866c:	2301      	movs	r3, #1
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	3301      	adds	r3, #1
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2301      	movs	r3, #1
 800867a:	2200      	movs	r2, #0
 800867c:	21d0      	movs	r1, #208	@ 0xd0
 800867e:	f7fb fe41 	bl	8004304 <HAL_I2C_Mem_Read>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 8008686:	7b3b      	ldrb	r3, [r7, #12]
 8008688:	2b1e      	cmp	r3, #30
 800868a:	d003      	beq.n	8008694 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8008694:	7b7b      	ldrb	r3, [r7, #13]
 8008696:	2b0f      	cmp	r3, #15
 8008698:	d003      	beq.n	80086a2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000b28 	.word	0x20000b28
 80086b0:	20000b29 	.word	0x20000b29

080086b4 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af04      	add	r7, sp, #16
 80086ba:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fa fdfd 	bl	80032c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fa fdf7 	bl	80032c2 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 80086d8:	2301      	movs	r3, #1
 80086da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68d8      	ldr	r0, [r3, #12]
 80086e0:	2364      	movs	r3, #100	@ 0x64
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	2301      	movs	r3, #1
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	2301      	movs	r3, #1
 80086f0:	227c      	movs	r2, #124	@ 0x7c
 80086f2:	2130      	movs	r1, #48	@ 0x30
 80086f4:	f7fb fd0c 	bl	8004110 <HAL_I2C_Mem_Write>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	4313      	orrs	r3, r2
 8008700:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8008702:	2300      	movs	r3, #0
 8008704:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68d8      	ldr	r0, [r3, #12]
 800870a:	2364      	movs	r3, #100	@ 0x64
 800870c:	9302      	str	r3, [sp, #8]
 800870e:	2301      	movs	r3, #1
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f107 030c 	add.w	r3, r7, #12
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2301      	movs	r3, #1
 800871a:	227d      	movs	r2, #125	@ 0x7d
 800871c:	2130      	movs	r1, #48	@ 0x30
 800871e:	f7fb fcf7 	bl	8004110 <HAL_I2C_Mem_Write>
 8008722:	4603      	mov	r3, r0
 8008724:	461a      	mov	r2, r3
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	4313      	orrs	r3, r2
 800872a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800872c:	2014      	movs	r0, #20
 800872e:	f7fa fa09 	bl	8002b44 <HAL_Delay>

	buf[0] = ACC_RESET;
 8008732:	23b6      	movs	r3, #182	@ 0xb6
 8008734:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68d8      	ldr	r0, [r3, #12]
 800873a:	2364      	movs	r3, #100	@ 0x64
 800873c:	9302      	str	r3, [sp, #8]
 800873e:	2301      	movs	r3, #1
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	2301      	movs	r3, #1
 800874a:	227e      	movs	r2, #126	@ 0x7e
 800874c:	2130      	movs	r1, #48	@ 0x30
 800874e:	f7fb fcdf 	bl	8004110 <HAL_I2C_Mem_Write>
 8008752:	4603      	mov	r3, r0
 8008754:	461a      	mov	r2, r3
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4313      	orrs	r3, r2
 800875a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <bmi088_config+0xb4>
 8008762:	4bb4      	ldr	r3, [pc, #720]	@ (8008a34 <bmi088_config+0x380>)
 8008764:	22a0      	movs	r2, #160	@ 0xa0
 8008766:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8008768:	200a      	movs	r0, #10
 800876a:	f7fa f9eb 	bl	8002b44 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800876e:	23b0      	movs	r3, #176	@ 0xb0
 8008770:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68d8      	ldr	r0, [r3, #12]
 8008776:	2364      	movs	r3, #100	@ 0x64
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	2301      	movs	r3, #1
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	f107 030c 	add.w	r3, r7, #12
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	2301      	movs	r3, #1
 8008786:	227e      	movs	r2, #126	@ 0x7e
 8008788:	2130      	movs	r1, #48	@ 0x30
 800878a:	f7fb fcc1 	bl	8004110 <HAL_I2C_Mem_Write>
 800878e:	4603      	mov	r3, r0
 8008790:	461a      	mov	r2, r3
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	4313      	orrs	r3, r2
 8008796:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <bmi088_config+0xf0>
 800879e:	4ba5      	ldr	r3, [pc, #660]	@ (8008a34 <bmi088_config+0x380>)
 80087a0:	22a5      	movs	r2, #165	@ 0xa5
 80087a2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80087a4:	200a      	movs	r0, #10
 80087a6:	f7fa f9cd 	bl	8002b44 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80087aa:	23b6      	movs	r3, #182	@ 0xb6
 80087ac:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68d8      	ldr	r0, [r3, #12]
 80087b2:	2364      	movs	r3, #100	@ 0x64
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	2301      	movs	r3, #1
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	2301      	movs	r3, #1
 80087c2:	2214      	movs	r2, #20
 80087c4:	21d0      	movs	r1, #208	@ 0xd0
 80087c6:	f7fb fca3 	bl	8004110 <HAL_I2C_Mem_Write>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461a      	mov	r2, r3
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <bmi088_config+0x12c>
 80087da:	4b96      	ldr	r3, [pc, #600]	@ (8008a34 <bmi088_config+0x380>)
 80087dc:	22aa      	movs	r2, #170	@ 0xaa
 80087de:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80087e0:	200a      	movs	r0, #10
 80087e2:	f7fa f9af 	bl	8002b44 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7a9b      	ldrb	r3, [r3, #10]
 80087ea:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68d8      	ldr	r0, [r3, #12]
 80087f0:	2364      	movs	r3, #100	@ 0x64
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	2301      	movs	r3, #1
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	2301      	movs	r3, #1
 8008800:	220f      	movs	r2, #15
 8008802:	21d0      	movs	r1, #208	@ 0xd0
 8008804:	f7fb fc84 	bl	8004110 <HAL_I2C_Mem_Write>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4313      	orrs	r3, r2
 8008810:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <bmi088_config+0x16a>
 8008818:	4b86      	ldr	r3, [pc, #536]	@ (8008a34 <bmi088_config+0x380>)
 800881a:	22b0      	movs	r2, #176	@ 0xb0
 800881c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7a5b      	ldrb	r3, [r3, #9]
 8008822:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68d8      	ldr	r0, [r3, #12]
 8008828:	2314      	movs	r3, #20
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	2301      	movs	r3, #1
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	f107 030c 	add.w	r3, r7, #12
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2301      	movs	r3, #1
 8008838:	2210      	movs	r2, #16
 800883a:	21d0      	movs	r1, #208	@ 0xd0
 800883c:	f7fb fc68 	bl	8004110 <HAL_I2C_Mem_Write>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4313      	orrs	r3, r2
 8008848:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <bmi088_config+0x1a2>
 8008850:	4b78      	ldr	r3, [pc, #480]	@ (8008a34 <bmi088_config+0x380>)
 8008852:	22b4      	movs	r2, #180	@ 0xb4
 8008854:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7a1b      	ldrb	r3, [r3, #8]
 800885a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68d8      	ldr	r0, [r3, #12]
 8008860:	2314      	movs	r3, #20
 8008862:	9302      	str	r3, [sp, #8]
 8008864:	2301      	movs	r3, #1
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2301      	movs	r3, #1
 8008870:	2211      	movs	r2, #17
 8008872:	21d0      	movs	r1, #208	@ 0xd0
 8008874:	f7fb fc4c 	bl	8004110 <HAL_I2C_Mem_Write>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	4313      	orrs	r3, r2
 8008880:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <bmi088_config+0x1da>
 8008888:	4b6a      	ldr	r3, [pc, #424]	@ (8008a34 <bmi088_config+0x380>)
 800888a:	22b8      	movs	r2, #184	@ 0xb8
 800888c:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800888e:	2014      	movs	r0, #20
 8008890:	f7fa f958 	bl	8002b44 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8008894:	2380      	movs	r3, #128	@ 0x80
 8008896:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68d8      	ldr	r0, [r3, #12]
 800889c:	2314      	movs	r3, #20
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	2301      	movs	r3, #1
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	f107 030c 	add.w	r3, r7, #12
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	2301      	movs	r3, #1
 80088ac:	2215      	movs	r2, #21
 80088ae:	21d0      	movs	r1, #208	@ 0xd0
 80088b0:	f7fb fc2e 	bl	8004110 <HAL_I2C_Mem_Write>
 80088b4:	4603      	mov	r3, r0
 80088b6:	461a      	mov	r2, r3
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <bmi088_config+0x216>
 80088c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008a34 <bmi088_config+0x380>)
 80088c6:	22be      	movs	r2, #190	@ 0xbe
 80088c8:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 80088ca:	2305      	movs	r3, #5
 80088cc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68d8      	ldr	r0, [r3, #12]
 80088d2:	2314      	movs	r3, #20
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	2301      	movs	r3, #1
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	2301      	movs	r3, #1
 80088e2:	2216      	movs	r2, #22
 80088e4:	21d0      	movs	r1, #208	@ 0xd0
 80088e6:	f7fb fc13 	bl	8004110 <HAL_I2C_Mem_Write>
 80088ea:	4603      	mov	r3, r0
 80088ec:	461a      	mov	r2, r3
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <bmi088_config+0x24c>
 80088fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008a34 <bmi088_config+0x380>)
 80088fc:	22c2      	movs	r2, #194	@ 0xc2
 80088fe:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8008900:	2381      	movs	r3, #129	@ 0x81
 8008902:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68d8      	ldr	r0, [r3, #12]
 8008908:	2314      	movs	r3, #20
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	2301      	movs	r3, #1
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	f107 030c 	add.w	r3, r7, #12
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	2301      	movs	r3, #1
 8008918:	2218      	movs	r2, #24
 800891a:	21d0      	movs	r1, #208	@ 0xd0
 800891c:	f7fb fbf8 	bl	8004110 <HAL_I2C_Mem_Write>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	4313      	orrs	r3, r2
 8008928:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <bmi088_config+0x282>
 8008930:	4b40      	ldr	r3, [pc, #256]	@ (8008a34 <bmi088_config+0x380>)
 8008932:	22c6      	movs	r2, #198	@ 0xc6
 8008934:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8008936:	2304      	movs	r3, #4
 8008938:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68d8      	ldr	r0, [r3, #12]
 800893e:	2314      	movs	r3, #20
 8008940:	9302      	str	r3, [sp, #8]
 8008942:	2301      	movs	r3, #1
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	f107 030c 	add.w	r3, r7, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	2301      	movs	r3, #1
 800894e:	227d      	movs	r2, #125	@ 0x7d
 8008950:	2130      	movs	r1, #48	@ 0x30
 8008952:	f7fb fbdd 	bl	8004110 <HAL_I2C_Mem_Write>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	4313      	orrs	r3, r2
 800895e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <bmi088_config+0x2b8>
 8008966:	4b33      	ldr	r3, [pc, #204]	@ (8008a34 <bmi088_config+0x380>)
 8008968:	22cb      	movs	r2, #203	@ 0xcb
 800896a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800896c:	2008      	movs	r0, #8
 800896e:	f7fa f8e9 	bl	8002b44 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	791b      	ldrb	r3, [r3, #4]
 8008976:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68d8      	ldr	r0, [r3, #12]
 800897c:	2314      	movs	r3, #20
 800897e:	9302      	str	r3, [sp, #8]
 8008980:	2301      	movs	r3, #1
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	f107 030c 	add.w	r3, r7, #12
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	2301      	movs	r3, #1
 800898c:	227c      	movs	r2, #124	@ 0x7c
 800898e:	2130      	movs	r1, #48	@ 0x30
 8008990:	f7fb fbbe 	bl	8004110 <HAL_I2C_Mem_Write>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	4313      	orrs	r3, r2
 800899c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <bmi088_config+0x2f6>
 80089a4:	4b23      	ldr	r3, [pc, #140]	@ (8008a34 <bmi088_config+0x380>)
 80089a6:	22d0      	movs	r2, #208	@ 0xd0
 80089a8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80089aa:	2008      	movs	r0, #8
 80089ac:	f7fa f8ca 	bl	8002b44 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	799b      	ldrb	r3, [r3, #6]
 80089b4:	b25b      	sxtb	r3, r3
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	b25a      	sxtb	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	79db      	ldrb	r3, [r3, #7]
 80089be:	b25b      	sxtb	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68d8      	ldr	r0, [r3, #12]
 80089cc:	2314      	movs	r3, #20
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	2301      	movs	r3, #1
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f107 030c 	add.w	r3, r7, #12
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	2301      	movs	r3, #1
 80089dc:	2240      	movs	r2, #64	@ 0x40
 80089de:	2130      	movs	r1, #48	@ 0x30
 80089e0:	f7fb fb96 	bl	8004110 <HAL_I2C_Mem_Write>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <bmi088_config+0x346>
 80089f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <bmi088_config+0x380>)
 80089f6:	22d5      	movs	r2, #213	@ 0xd5
 80089f8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	795b      	ldrb	r3, [r3, #5]
 80089fe:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68d8      	ldr	r0, [r3, #12]
 8008a04:	2314      	movs	r3, #20
 8008a06:	9302      	str	r3, [sp, #8]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	f107 030c 	add.w	r3, r7, #12
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	2301      	movs	r3, #1
 8008a14:	2241      	movs	r2, #65	@ 0x41
 8008a16:	2130      	movs	r1, #48	@ 0x30
 8008a18:	f7fb fb7a 	bl	8004110 <HAL_I2C_Mem_Write>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <bmi088_config+0x384>
 8008a2c:	4b01      	ldr	r3, [pc, #4]	@ (8008a34 <bmi088_config+0x380>)
 8008a2e:	22d9      	movs	r2, #217	@ 0xd9
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e001      	b.n	8008a38 <bmi088_config+0x384>
 8008a34:	20000b2c 	.word	0x20000b2c

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8008a38:	230a      	movs	r3, #10
 8008a3a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68d8      	ldr	r0, [r3, #12]
 8008a40:	2314      	movs	r3, #20
 8008a42:	9302      	str	r3, [sp, #8]
 8008a44:	2301      	movs	r3, #1
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	f107 030c 	add.w	r3, r7, #12
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	2253      	movs	r2, #83	@ 0x53
 8008a52:	2130      	movs	r1, #48	@ 0x30
 8008a54:	f7fb fb5c 	bl	8004110 <HAL_I2C_Mem_Write>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 8008a62:	2304      	movs	r3, #4
 8008a64:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68d8      	ldr	r0, [r3, #12]
 8008a6a:	2314      	movs	r3, #20
 8008a6c:	9302      	str	r3, [sp, #8]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	f107 030c 	add.w	r3, r7, #12
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2301      	movs	r3, #1
 8008a7a:	2258      	movs	r2, #88	@ 0x58
 8008a7c:	2130      	movs	r1, #48	@ 0x30
 8008a7e:	f7fb fb47 	bl	8004110 <HAL_I2C_Mem_Write>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa fc07 	bl	80032a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fa fc01 	bl	80032a6 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8008aa4:	2046      	movs	r0, #70	@ 0x46
 8008aa6:	f7fa f84d 	bl	8002b44 <HAL_Delay>
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	0000      	movs	r0, r0
	...

08008ab8 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8008ab8:	b5b0      	push	{r4, r5, r7, lr}
 8008aba:	b092      	sub	sp, #72	@ 0x48
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 81b9 	beq.w	8008e42 <bmi088_update+0x38a>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68d8      	ldr	r0, [r3, #12]
 8008ad4:	2314      	movs	r3, #20
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	2309      	movs	r3, #9
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	2212      	movs	r2, #18
 8008ae6:	2130      	movs	r1, #48	@ 0x30
 8008ae8:	f7fb fc0c 	bl	8004304 <HAL_I2C_Mem_Read>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68d8      	ldr	r0, [r3, #12]
 8008af6:	2314      	movs	r3, #20
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	2302      	movs	r3, #2
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2301      	movs	r3, #1
 8008b06:	2222      	movs	r2, #34	@ 0x22
 8008b08:	2130      	movs	r1, #48	@ 0x30
 8008b0a:	f7fb fbfb 	bl	8004304 <HAL_I2C_Mem_Read>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8008b14:	7c3b      	ldrb	r3, [r7, #16]
 8008b16:	b21b      	sxth	r3, r3
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	b21a      	sxth	r2, r3
 8008b1c:	7c7b      	ldrb	r3, [r7, #17]
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	b21b      	sxth	r3, r3
 8008b24:	4313      	orrs	r3, r2
 8008b26:	b21b      	sxth	r3, r3
 8008b28:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 8008b2e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b34:	d305      	bcc.n	8008b42 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 8008b36:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b38:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008b40:	e023      	b.n	8008b8a <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 8008b42:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008b44:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8008b46:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b52:	ee17 0a90 	vmov	r0, s15
 8008b56:	f7f7 fd17 	bl	8000588 <__aeabi_f2d>
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008b62:	f7f7 fd69 	bl	8000638 <__aeabi_dmul>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	4ba7      	ldr	r3, [pc, #668]	@ (8008e10 <bmi088_update+0x358>)
 8008b74:	f7f7 fbaa 	bl	80002cc <__adddf3>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	f7f8 f852 	bl	8000c28 <__aeabi_d2f>
 8008b84:	4602      	mov	r2, r0
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	649a      	str	r2, [r3, #72]	@ 0x48
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 8008b8a:	7f3b      	ldrb	r3, [r7, #28]
 8008b8c:	041a      	lsls	r2, r3, #16
 8008b8e:	7efb      	ldrb	r3, [r7, #27]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	4313      	orrs	r3, r2
 8008b94:	7eba      	ldrb	r2, [r7, #26]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba4:	ee17 0a90 	vmov	r0, s15
 8008ba8:	f7f7 fcee 	bl	8000588 <__aeabi_f2d>
 8008bac:	a392      	add	r3, pc, #584	@ (adr r3, 8008df8 <bmi088_update+0x340>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fd41 	bl	8000638 <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	a390      	add	r3, pc, #576	@ (adr r3, 8008e00 <bmi088_update+0x348>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fe62 	bl	800088c <__aeabi_ddiv>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f7f8 f82a 	bl	8000c28 <__aeabi_d2f>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	64da      	str	r2, [r3, #76]	@ 0x4c

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8008bda:	7e7b      	ldrb	r3, [r7, #25]
 8008bdc:	b21b      	sxth	r3, r3
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	b21a      	sxth	r2, r3
 8008be2:	7e3b      	ldrb	r3, [r7, #24]
 8008be4:	b21b      	sxth	r3, r3
 8008be6:	4313      	orrs	r3, r2
 8008be8:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	b21b      	sxth	r3, r3
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	b21a      	sxth	r2, r3
 8008bf2:	7dbb      	ldrb	r3, [r7, #22]
 8008bf4:	b21b      	sxth	r3, r3
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8008bfa:	7d7b      	ldrb	r3, [r7, #21]
 8008bfc:	b21b      	sxth	r3, r3
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	b21a      	sxth	r2, r3
 8008c02:	7d3b      	ldrb	r3, [r7, #20]
 8008c04:	b21b      	sxth	r3, r3
 8008c06:	4313      	orrs	r3, r2
 8008c08:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET;
 8008c0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c16:	ee17 0a90 	vmov	r0, s15
 8008c1a:	f7f7 fcb5 	bl	8000588 <__aeabi_f2d>
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	4b7c      	ldr	r3, [pc, #496]	@ (8008e14 <bmi088_update+0x35c>)
 8008c24:	f7f7 fe32 	bl	800088c <__aeabi_ddiv>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	4b78      	ldr	r3, [pc, #480]	@ (8008e18 <bmi088_update+0x360>)
 8008c36:	f7f7 fcff 	bl	8000638 <__aeabi_dmul>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4610      	mov	r0, r2
 8008c40:	4619      	mov	r1, r3
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	4b75      	ldr	r3, [pc, #468]	@ (8008e1c <bmi088_update+0x364>)
 8008c48:	f7f7 fcf6 	bl	8000638 <__aeabi_dmul>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4614      	mov	r4, r2
 8008c52:	461d      	mov	r5, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	795b      	ldrb	r3, [r3, #5]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c62:	ee17 0a90 	vmov	r0, s15
 8008c66:	f7f7 fc8f 	bl	8000588 <__aeabi_f2d>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	ec43 2b11 	vmov	d1, r2, r3
 8008c72:	ed9f 0b65 	vldr	d0, [pc, #404]	@ 8008e08 <bmi088_update+0x350>
 8008c76:	f007 ff31 	bl	8010adc <pow>
 8008c7a:	ec53 2b10 	vmov	r2, r3, d0
 8008c7e:	4620      	mov	r0, r4
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7f7 fcd9 	bl	8000638 <__aeabi_dmul>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f7f7 ffcb 	bl	8000c28 <__aeabi_d2f>
 8008c92:	4602      	mov	r2, r0
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	645a      	str	r2, [r3, #68]	@ 0x44
			BMI->datas.acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET;
 8008c98:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ca4:	ee17 0a90 	vmov	r0, s15
 8008ca8:	f7f7 fc6e 	bl	8000588 <__aeabi_f2d>
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	4b58      	ldr	r3, [pc, #352]	@ (8008e14 <bmi088_update+0x35c>)
 8008cb2:	f7f7 fdeb 	bl	800088c <__aeabi_ddiv>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f04f 0200 	mov.w	r2, #0
 8008cc2:	4b55      	ldr	r3, [pc, #340]	@ (8008e18 <bmi088_update+0x360>)
 8008cc4:	f7f7 fcb8 	bl	8000638 <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	4b51      	ldr	r3, [pc, #324]	@ (8008e1c <bmi088_update+0x364>)
 8008cd6:	f7f7 fcaf 	bl	8000638 <__aeabi_dmul>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4614      	mov	r4, r2
 8008ce0:	461d      	mov	r5, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf0:	ee17 0a90 	vmov	r0, s15
 8008cf4:	f7f7 fc48 	bl	8000588 <__aeabi_f2d>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	ec43 2b11 	vmov	d1, r2, r3
 8008d00:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8008e08 <bmi088_update+0x350>
 8008d04:	f007 feea 	bl	8010adc <pow>
 8008d08:	ec53 2b10 	vmov	r2, r3, d0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 fc92 	bl	8000638 <__aeabi_dmul>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f7f7 ff84 	bl	8000c28 <__aeabi_d2f>
 8008d20:	4602      	mov	r2, r0
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	641a      	str	r2, [r3, #64]	@ 0x40
			BMI->datas.acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET;
 8008d26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d32:	ee17 0a90 	vmov	r0, s15
 8008d36:	f7f7 fc27 	bl	8000588 <__aeabi_f2d>
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	4b35      	ldr	r3, [pc, #212]	@ (8008e14 <bmi088_update+0x35c>)
 8008d40:	f7f7 fda4 	bl	800088c <__aeabi_ddiv>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	4b31      	ldr	r3, [pc, #196]	@ (8008e18 <bmi088_update+0x360>)
 8008d52:	f7f7 fc71 	bl	8000638 <__aeabi_dmul>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	4b2e      	ldr	r3, [pc, #184]	@ (8008e1c <bmi088_update+0x364>)
 8008d64:	f7f7 fc68 	bl	8000638 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	461d      	mov	r5, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	795b      	ldrb	r3, [r3, #5]
 8008d74:	3301      	adds	r3, #1
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d7e:	ee17 0a90 	vmov	r0, s15
 8008d82:	f7f7 fc01 	bl	8000588 <__aeabi_f2d>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	ec43 2b11 	vmov	d1, r2, r3
 8008d8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8008e08 <bmi088_update+0x350>
 8008d92:	f007 fea3 	bl	8010adc <pow>
 8008d96:	ec53 2b10 	vmov	r2, r3, d0
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	f7f7 fc4b 	bl	8000638 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7f7 ff3d 	bl	8000c28 <__aeabi_d2f>
 8008dae:	4602      	mov	r2, r0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	63da      	str	r2, [r3, #60]	@ 0x3c

			if(is_starded)
 8008db4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e20 <bmi088_update+0x368>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d035      	beq.n	8008e28 <bmi088_update+0x370>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	d502      	bpl.n	8008ddc <bmi088_update+0x324>
 8008dd6:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8008e24 <bmi088_update+0x36c>
 8008dda:	e007      	b.n	8008dec <bmi088_update+0x334>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 8008df2:	e01c      	b.n	8008e2e <bmi088_update+0x376>
 8008df4:	f3af 8000 	nop.w
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	40438800 	.word	0x40438800
 8008e00:	00000000 	.word	0x00000000
 8008e04:	412e8480 	.word	0x412e8480
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	40000000 	.word	0x40000000
 8008e10:	40370000 	.word	0x40370000
 8008e14:	40e00000 	.word	0x40e00000
 8008e18:	408f4000 	.word	0x408f4000
 8008e1c:	3ff80000 	.word	0x3ff80000
 8008e20:	20000b29 	.word	0x20000b29
 8008e24:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8008e28:	4ba9      	ldr	r3, [pc, #676]	@ (80090d0 <bmi088_update+0x618>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	651a      	str	r2, [r3, #80]	@ 0x50
			BMI->flags.isAccelUpdated = 0;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8008e3c:	4ba5      	ldr	r3, [pc, #660]	@ (80090d4 <bmi088_update+0x61c>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 813b 	beq.w	80090c2 <bmi088_update+0x60a>
 8008e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80090d4 <bmi088_update+0x61c>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8136 	beq.w	80090c2 <bmi088_update+0x60a>
		{
			if(is_starded){
 8008e56:	4b9e      	ldr	r3, [pc, #632]	@ (80090d0 <bmi088_update+0x618>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8129 	beq.w	80090b2 <bmi088_update+0x5fa>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68d8      	ldr	r0, [r3, #12]
 8008e64:	230a      	movs	r3, #10
 8008e66:	9302      	str	r3, [sp, #8]
 8008e68:	2306      	movs	r3, #6
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	2301      	movs	r3, #1
 8008e74:	2202      	movs	r2, #2
 8008e76:	21d0      	movs	r1, #208	@ 0xd0
 8008e78:	f7fb fa44 	bl	8004304 <HAL_I2C_Mem_Read>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 8008e82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f040 811a 	bne.w	80090c0 <bmi088_update+0x608>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 8008e8c:	7a7b      	ldrb	r3, [r7, #9]
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b21a      	sxth	r2, r3
 8008e94:	7a3b      	ldrb	r3, [r7, #8]
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	7abb      	ldrb	r3, [r7, #10]
 8008ea6:	b21b      	sxth	r3, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 8008eac:	7b7b      	ldrb	r3, [r7, #13]
 8008eae:	b21b      	sxth	r3, r3
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	b21a      	sxth	r2, r3
 8008eb4:	7b3b      	ldrb	r3, [r7, #12]
 8008eb6:	b21b      	sxth	r3, r3
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	843b      	strh	r3, [r7, #32]
/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][2]) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][1]) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][0]) * BMI->deltaTime;
*/
				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]);
 8008ebc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ec8:	ee17 0a90 	vmov	r0, s15
 8008ecc:	f7f7 fb5c 	bl	8000588 <__aeabi_f2d>
 8008ed0:	a37d      	add	r3, pc, #500	@ (adr r3, 80090c8 <bmi088_update+0x610>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fcd9 	bl	800088c <__aeabi_ddiv>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4614      	mov	r4, r2
 8008ee0:	461d      	mov	r5, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7a9b      	ldrb	r3, [r3, #10]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008eec:	4113      	asrs	r3, r2
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef6:	ee17 0a90 	vmov	r0, s15
 8008efa:	f7f7 fb45 	bl	8000588 <__aeabi_f2d>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fb97 	bl	8000638 <__aeabi_dmul>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4614      	mov	r4, r2
 8008f10:	461d      	mov	r5, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f7 fb35 	bl	8000588 <__aeabi_f2d>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4620      	mov	r0, r4
 8008f24:	4629      	mov	r1, r5
 8008f26:	f7f7 f9cf 	bl	80002c8 <__aeabi_dsub>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4610      	mov	r0, r2
 8008f30:	4619      	mov	r1, r3
 8008f32:	f7f7 fe79 	bl	8000c28 <__aeabi_d2f>
 8008f36:	4602      	mov	r2, r0
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]);
 8008f3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f48:	ee17 0a90 	vmov	r0, s15
 8008f4c:	f7f7 fb1c 	bl	8000588 <__aeabi_f2d>
 8008f50:	a35d      	add	r3, pc, #372	@ (adr r3, 80090c8 <bmi088_update+0x610>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fc99 	bl	800088c <__aeabi_ddiv>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4614      	mov	r4, r2
 8008f60:	461d      	mov	r5, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7a9b      	ldrb	r3, [r3, #10]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008f6c:	4113      	asrs	r3, r2
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f76:	ee17 0a90 	vmov	r0, s15
 8008f7a:	f7f7 fb05 	bl	8000588 <__aeabi_f2d>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 fb57 	bl	8000638 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4614      	mov	r4, r2
 8008f90:	461d      	mov	r5, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7f7 faf5 	bl	8000588 <__aeabi_f2d>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f7f7 f98f 	bl	80002c8 <__aeabi_dsub>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f7f7 fe39 	bl	8000c28 <__aeabi_d2f>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]);
 8008fbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008fc0:	ee07 3a90 	vmov	s15, r3
 8008fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fc8:	ee17 0a90 	vmov	r0, s15
 8008fcc:	f7f7 fadc 	bl	8000588 <__aeabi_f2d>
 8008fd0:	a33d      	add	r3, pc, #244	@ (adr r3, 80090c8 <bmi088_update+0x610>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 fc59 	bl	800088c <__aeabi_ddiv>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4614      	mov	r4, r2
 8008fe0:	461d      	mov	r5, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7a9b      	ldrb	r3, [r3, #10]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8008fec:	4113      	asrs	r3, r2
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ff6:	ee17 0a90 	vmov	r0, s15
 8008ffa:	f7f7 fac5 	bl	8000588 <__aeabi_f2d>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4620      	mov	r0, r4
 8009004:	4629      	mov	r1, r5
 8009006:	f7f7 fb17 	bl	8000638 <__aeabi_dmul>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4614      	mov	r4, r2
 8009010:	461d      	mov	r5, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f7f7 fab5 	bl	8000588 <__aeabi_f2d>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 f94f 	bl	80002c8 <__aeabi_dsub>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4610      	mov	r0, r2
 8009030:	4619      	mov	r1, r3
 8009032:	f7f7 fdf9 	bl	8000c28 <__aeabi_d2f>
 8009036:	4602      	mov	r2, r0
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	621a      	str	r2, [r3, #32]

				BMI->datas.gyro_x_angle += (BMI->datas.gyro_x) * BMI->datas.delta_time;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	edd3 6a06 	vldr	s13, [r3, #24]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800904e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.gyro_y_angle += (BMI->datas.gyro_y) * BMI->datas.delta_time;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	edd3 6a07 	vldr	s13, [r3, #28]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800906e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.gyro_z_angle += (BMI->datas.gyro_z) * BMI->datas.delta_time;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	edd3 6a08 	vldr	s13, [r3, #32]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800908e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				if(BMI->IMU_callback != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <bmi088_update+0x5f4>
				{
					BMI->IMU_callback(BMI);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3

				/*
				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
				quaternionToEuler();
				*/
				is_gyro_renewed = 1;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	@ (80090d8 <bmi088_update+0x620>)
 80090ae:	2201      	movs	r2, #1
 80090b0:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 80090b8:	4b06      	ldr	r3, [pc, #24]	@ (80090d4 <bmi088_update+0x61c>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e000      	b.n	80090c2 <bmi088_update+0x60a>
					return;
 80090c0:	bf00      	nop
		}
}
 80090c2:	3738      	adds	r7, #56	@ 0x38
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bdb0      	pop	{r4, r5, r7, pc}
 80090c8:	00000000 	.word	0x00000000
 80090cc:	40dfffc0 	.word	0x40dfffc0
 80090d0:	20000b29 	.word	0x20000b29
 80090d4:	20000b28 	.word	0x20000b28
 80090d8:	20000b2a 	.word	0x20000b2a

080090dc <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	705a      	strb	r2, [r3, #1]
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	701a      	strb	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fccb 	bl	8008ab8 <bmi088_update>
		if(is_gyro_renewed == 1)
 8009122:	4b2f      	ldr	r3, [pc, #188]	@ (80091e0 <get_offset+0xd0>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d1f8      	bne.n	800911c <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009130:	da2d      	bge.n	800918e <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	ed93 7a00 	vldr	s14, [r3]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	edd3 7a06 	vldr	s15, [r3, #24]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009148:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	ed93 7a01 	vldr	s14, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	edd3 7a07 	vldr	s15, [r3, #28]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009162:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	ed93 7a02 	vldr	s14, [r3, #8]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	edd3 7a08 	vldr	s15, [r3, #32]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800917c:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8009186:	4b16      	ldr	r3, [pc, #88]	@ (80091e0 <get_offset+0xd0>)
 8009188:	2200      	movs	r2, #0
 800918a:	701a      	strb	r2, [r3, #0]
 800918c:	e7c6      	b.n	800911c <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	ed93 7a00 	vldr	s14, [r3]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80091e4 <get_offset+0xd4>
 800919e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091a2:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80091e4 <get_offset+0xd4>
 80091b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091ba:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80091e4 <get_offset+0xd4>
 80091ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091d2:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 80091d6:	bf00      	nop
		}

	}
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000b2a 	.word	0x20000b2a
 80091e4:	447a0000 	.word	0x447a0000

080091e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80091ec:	4904      	ldr	r1, [pc, #16]	@ (8009200 <MX_FATFS_Init+0x18>)
 80091ee:	4805      	ldr	r0, [pc, #20]	@ (8009204 <MX_FATFS_Init+0x1c>)
 80091f0:	f003 f8f6 	bl	800c3e0 <FATFS_LinkDriver>
 80091f4:	4603      	mov	r3, r0
 80091f6:	461a      	mov	r2, r3
 80091f8:	4b03      	ldr	r3, [pc, #12]	@ (8009208 <MX_FATFS_Init+0x20>)
 80091fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80091fc:	bf00      	nop
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20000b34 	.word	0x20000b34
 8009204:	2000000c 	.word	0x2000000c
 8009208:	20000b30 	.word	0x20000b30

0800920c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009210:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009212:	4618      	mov	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f9d7 	bl	80095dc <USER_SPI_initialize>
 800922e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009230:	4618      	mov	r0, r3
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fab5 	bl	80097b4 <USER_SPI_status>
 800924a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009264:	7bf8      	ldrb	r0, [r7, #15]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	f000 fab8 	bl	80097e0 <USER_SPI_read>
 8009270:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	4603      	mov	r3, r0
 8009288:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800928a:	7bf8      	ldrb	r0, [r7, #15]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	f000 fb0b 	bl	80098ac <USER_SPI_write>
 8009296:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	603a      	str	r2, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
 80092ac:	460b      	mov	r3, r1
 80092ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80092b0:	79b9      	ldrb	r1, [r7, #6]
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fb74 	bl	80099a4 <USER_SPI_ioctl>
 80092bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80092d0:	f7f9 fc2c 	bl	8002b2c <HAL_GetTick>
 80092d4:	4603      	mov	r3, r0
 80092d6:	4a04      	ldr	r2, [pc, #16]	@ (80092e8 <SPI_Timer_On+0x20>)
 80092d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80092da:	4a04      	ldr	r2, [pc, #16]	@ (80092ec <SPI_Timer_On+0x24>)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6013      	str	r3, [r2, #0]
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20000b3c 	.word	0x20000b3c
 80092ec:	20000b40 	.word	0x20000b40

080092f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80092f4:	f7f9 fc1a 	bl	8002b2c <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	4b06      	ldr	r3, [pc, #24]	@ (8009314 <SPI_Timer_Status+0x24>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	4b05      	ldr	r3, [pc, #20]	@ (8009318 <SPI_Timer_Status+0x28>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	bf34      	ite	cc
 8009308:	2301      	movcc	r3, #1
 800930a:	2300      	movcs	r3, #0
 800930c:	b2db      	uxtb	r3, r3
}
 800930e:	4618      	mov	r0, r3
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000b3c 	.word	0x20000b3c
 8009318:	20000b40 	.word	0x20000b40

0800931c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af02      	add	r7, sp, #8
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009326:	f107 020f 	add.w	r2, r7, #15
 800932a:	1df9      	adds	r1, r7, #7
 800932c:	2332      	movs	r3, #50	@ 0x32
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2301      	movs	r3, #1
 8009332:	4804      	ldr	r0, [pc, #16]	@ (8009344 <xchg_spi+0x28>)
 8009334:	f7fc fd65 	bl	8005e02 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000904 	.word	0x20000904

08009348 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	e00a      	b.n	800936e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	18d4      	adds	r4, r2, r3
 800935e:	20ff      	movs	r0, #255	@ 0xff
 8009360:	f7ff ffdc 	bl	800931c <xchg_spi>
 8009364:	4603      	mov	r3, r0
 8009366:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3301      	adds	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d3f0      	bcc.n	8009358 <rcvr_spi_multi+0x10>
	}
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}

08009380 <xmit_spi_multi>:
static
void xmit_spi_multi (
	BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	b29a      	uxth	r2, r3
 800938e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4803      	ldr	r0, [pc, #12]	@ (80093a4 <xmit_spi_multi+0x24>)
 8009396:	f7fc fbf8 	bl	8005b8a <HAL_SPI_Transmit>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000904 	.word	0x20000904

080093a8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80093b0:	f7f9 fbbc 	bl	8002b2c <HAL_GetTick>
 80093b4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80093ba:	20ff      	movs	r0, #255	@ 0xff
 80093bc:	f7ff ffae 	bl	800931c <xchg_spi>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	2bff      	cmp	r3, #255	@ 0xff
 80093c8:	d007      	beq.n	80093da <wait_ready+0x32>
 80093ca:	f7f9 fbaf 	bl	8002b2c <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d8ef      	bhi.n	80093ba <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2bff      	cmp	r3, #255	@ 0xff
 80093de:	bf0c      	ite	eq
 80093e0:	2301      	moveq	r3, #1
 80093e2:	2300      	movne	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80093f4:	2201      	movs	r2, #1
 80093f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80093fa:	4804      	ldr	r0, [pc, #16]	@ (800940c <despiselect+0x1c>)
 80093fc:	f7fa fd12 	bl	8003e24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009400:	20ff      	movs	r0, #255	@ 0xff
 8009402:	f7ff ff8b 	bl	800931c <xchg_spi>

}
 8009406:	bf00      	nop
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	40020000 	.word	0x40020000

08009410 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009414:	2200      	movs	r2, #0
 8009416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800941a:	480a      	ldr	r0, [pc, #40]	@ (8009444 <spiselect+0x34>)
 800941c:	f7fa fd02 	bl	8003e24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009420:	20ff      	movs	r0, #255	@ 0xff
 8009422:	f7ff ff7b 	bl	800931c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009426:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800942a:	f7ff ffbd 	bl	80093a8 <wait_ready>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <spiselect+0x28>
 8009434:	2301      	movs	r3, #1
 8009436:	e002      	b.n	800943e <spiselect+0x2e>

	despiselect();
 8009438:	f7ff ffda 	bl	80093f0 <despiselect>
	return 0;	/* Timeout */
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	40020000 	.word	0x40020000

08009448 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009452:	20c8      	movs	r0, #200	@ 0xc8
 8009454:	f7ff ff38 	bl	80092c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009458:	20ff      	movs	r0, #255	@ 0xff
 800945a:	f7ff ff5f 	bl	800931c <xchg_spi>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2bff      	cmp	r3, #255	@ 0xff
 8009466:	d104      	bne.n	8009472 <rcvr_datablock+0x2a>
 8009468:	f7ff ff42 	bl	80092f0 <SPI_Timer_Status>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f2      	bne.n	8009458 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	2bfe      	cmp	r3, #254	@ 0xfe
 8009476:	d001      	beq.n	800947c <rcvr_datablock+0x34>
 8009478:	2300      	movs	r3, #0
 800947a:	e00a      	b.n	8009492 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff ff62 	bl	8009348 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009484:	20ff      	movs	r0, #255	@ 0xff
 8009486:	f7ff ff49 	bl	800931c <xchg_spi>
 800948a:	20ff      	movs	r0, #255	@ 0xff
 800948c:	f7ff ff46 	bl	800931c <xchg_spi>

	return 1;						/* Function succeeded */
 8009490:	2301      	movs	r3, #1
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80094a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80094aa:	f7ff ff7d 	bl	80093a8 <wait_ready>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <xmit_datablock+0x1e>
 80094b4:	2300      	movs	r3, #0
 80094b6:	e01e      	b.n	80094f6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff ff2e 	bl	800931c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	2bfd      	cmp	r3, #253	@ 0xfd
 80094c4:	d016      	beq.n	80094f4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80094c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff ff58 	bl	8009380 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80094d0:	20ff      	movs	r0, #255	@ 0xff
 80094d2:	f7ff ff23 	bl	800931c <xchg_spi>
 80094d6:	20ff      	movs	r0, #255	@ 0xff
 80094d8:	f7ff ff20 	bl	800931c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80094dc:	20ff      	movs	r0, #255	@ 0xff
 80094de:	f7ff ff1d 	bl	800931c <xchg_spi>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2b05      	cmp	r3, #5
 80094ee:	d001      	beq.n	80094f4 <xmit_datablock+0x5a>
 80094f0:	2300      	movs	r3, #0
 80094f2:	e000      	b.n	80094f6 <xmit_datablock+0x5c>
	}
	return 1;
 80094f4:	2301      	movs	r3, #1
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	4603      	mov	r3, r0
 8009506:	6039      	str	r1, [r7, #0]
 8009508:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800950a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950e:	2b00      	cmp	r3, #0
 8009510:	da0e      	bge.n	8009530 <send_cmd+0x32>
		cmd &= 0x7F;
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009518:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800951a:	2100      	movs	r1, #0
 800951c:	2037      	movs	r0, #55	@ 0x37
 800951e:	f7ff ffee 	bl	80094fe <send_cmd>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d901      	bls.n	8009530 <send_cmd+0x32>
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	e051      	b.n	80095d4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b0c      	cmp	r3, #12
 8009534:	d008      	beq.n	8009548 <send_cmd+0x4a>
		despiselect();
 8009536:	f7ff ff5b 	bl	80093f0 <despiselect>
		if (!spiselect()) return 0xFF;
 800953a:	f7ff ff69 	bl	8009410 <spiselect>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <send_cmd+0x4a>
 8009544:	23ff      	movs	r3, #255	@ 0xff
 8009546:	e045      	b.n	80095d4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800954e:	b2db      	uxtb	r3, r3
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fee3 	bl	800931c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	0e1b      	lsrs	r3, r3, #24
 800955a:	b2db      	uxtb	r3, r3
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fedd 	bl	800931c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	b2db      	uxtb	r3, r3
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fed7 	bl	800931c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	0a1b      	lsrs	r3, r3, #8
 8009572:	b2db      	uxtb	r3, r3
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fed1 	bl	800931c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fecc 	bl	800931c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009584:	2301      	movs	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <send_cmd+0x94>
 800958e:	2395      	movs	r3, #149	@ 0x95
 8009590:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	2b08      	cmp	r3, #8
 8009596:	d101      	bne.n	800959c <send_cmd+0x9e>
 8009598:	2387      	movs	r3, #135	@ 0x87
 800959a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff febc 	bl	800931c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b0c      	cmp	r3, #12
 80095a8:	d102      	bne.n	80095b0 <send_cmd+0xb2>
 80095aa:	20ff      	movs	r0, #255	@ 0xff
 80095ac:	f7ff feb6 	bl	800931c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80095b0:	230a      	movs	r3, #10
 80095b2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80095b4:	20ff      	movs	r0, #255	@ 0xff
 80095b6:	f7ff feb1 	bl	800931c <xchg_spi>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80095be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da05      	bge.n	80095d2 <send_cmd+0xd4>
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	73fb      	strb	r3, [r7, #15]
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1f0      	bne.n	80095b4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USER_SPI_initialize+0x14>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0d6      	b.n	800979e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80095f0:	4b6d      	ldr	r3, [pc, #436]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <USER_SPI_initialize+0x2a>
 80095fe:	4b6a      	ldr	r3, [pc, #424]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	e0cb      	b.n	800979e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009606:	4b69      	ldr	r3, [pc, #420]	@ (80097ac <USER_SPI_initialize+0x1d0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8009610:	4b66      	ldr	r3, [pc, #408]	@ (80097ac <USER_SPI_initialize+0x1d0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8009618:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800961a:	230a      	movs	r3, #10
 800961c:	73fb      	strb	r3, [r7, #15]
 800961e:	e005      	b.n	800962c <USER_SPI_initialize+0x50>
 8009620:	20ff      	movs	r0, #255	@ 0xff
 8009622:	f7ff fe7b 	bl	800931c <xchg_spi>
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	3b01      	subs	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f6      	bne.n	8009620 <USER_SPI_initialize+0x44>

	ty = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009636:	2100      	movs	r1, #0
 8009638:	2000      	movs	r0, #0
 800963a:	f7ff ff60 	bl	80094fe <send_cmd>
 800963e:	4603      	mov	r3, r0
 8009640:	2b01      	cmp	r3, #1
 8009642:	f040 808b 	bne.w	800975c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800964a:	f7ff fe3d 	bl	80092c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800964e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8009652:	2008      	movs	r0, #8
 8009654:	f7ff ff53 	bl	80094fe <send_cmd>
 8009658:	4603      	mov	r3, r0
 800965a:	2b01      	cmp	r3, #1
 800965c:	d151      	bne.n	8009702 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	e00d      	b.n	8009680 <USER_SPI_initialize+0xa4>
 8009664:	7bfc      	ldrb	r4, [r7, #15]
 8009666:	20ff      	movs	r0, #255	@ 0xff
 8009668:	f7ff fe58 	bl	800931c <xchg_spi>
 800966c:	4603      	mov	r3, r0
 800966e:	461a      	mov	r2, r3
 8009670:	f104 0310 	add.w	r3, r4, #16
 8009674:	443b      	add	r3, r7
 8009676:	f803 2c08 	strb.w	r2, [r3, #-8]
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	3301      	adds	r3, #1
 800967e:	73fb      	strb	r3, [r7, #15]
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	2b03      	cmp	r3, #3
 8009684:	d9ee      	bls.n	8009664 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009686:	7abb      	ldrb	r3, [r7, #10]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d167      	bne.n	800975c <USER_SPI_initialize+0x180>
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	2baa      	cmp	r3, #170	@ 0xaa
 8009690:	d164      	bne.n	800975c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009692:	bf00      	nop
 8009694:	f7ff fe2c 	bl	80092f0 <SPI_Timer_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <USER_SPI_initialize+0xd2>
 800969e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80096a2:	20a9      	movs	r0, #169	@ 0xa9
 80096a4:	f7ff ff2b 	bl	80094fe <send_cmd>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f2      	bne.n	8009694 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80096ae:	f7ff fe1f 	bl	80092f0 <SPI_Timer_Status>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d051      	beq.n	800975c <USER_SPI_initialize+0x180>
 80096b8:	2100      	movs	r1, #0
 80096ba:	203a      	movs	r0, #58	@ 0x3a
 80096bc:	f7ff ff1f 	bl	80094fe <send_cmd>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d14a      	bne.n	800975c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e00d      	b.n	80096e8 <USER_SPI_initialize+0x10c>
 80096cc:	7bfc      	ldrb	r4, [r7, #15]
 80096ce:	20ff      	movs	r0, #255	@ 0xff
 80096d0:	f7ff fe24 	bl	800931c <xchg_spi>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	f104 0310 	add.w	r3, r4, #16
 80096dc:	443b      	add	r3, r7
 80096de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	3301      	adds	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d9ee      	bls.n	80096cc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80096ee:	7a3b      	ldrb	r3, [r7, #8]
 80096f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <USER_SPI_initialize+0x120>
 80096f8:	230c      	movs	r3, #12
 80096fa:	e000      	b.n	80096fe <USER_SPI_initialize+0x122>
 80096fc:	2304      	movs	r3, #4
 80096fe:	737b      	strb	r3, [r7, #13]
 8009700:	e02c      	b.n	800975c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009702:	2100      	movs	r1, #0
 8009704:	20a9      	movs	r0, #169	@ 0xa9
 8009706:	f7ff fefa 	bl	80094fe <send_cmd>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d804      	bhi.n	800971a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009710:	2302      	movs	r3, #2
 8009712:	737b      	strb	r3, [r7, #13]
 8009714:	23a9      	movs	r3, #169	@ 0xa9
 8009716:	73bb      	strb	r3, [r7, #14]
 8009718:	e003      	b.n	8009722 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800971a:	2301      	movs	r3, #1
 800971c:	737b      	strb	r3, [r7, #13]
 800971e:	2301      	movs	r3, #1
 8009720:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009722:	bf00      	nop
 8009724:	f7ff fde4 	bl	80092f0 <SPI_Timer_Status>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <USER_SPI_initialize+0x162>
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fee3 	bl	80094fe <send_cmd>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f2      	bne.n	8009724 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800973e:	f7ff fdd7 	bl	80092f0 <SPI_Timer_Status>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <USER_SPI_initialize+0x17c>
 8009748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800974c:	2010      	movs	r0, #16
 800974e:	f7ff fed6 	bl	80094fe <send_cmd>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <USER_SPI_initialize+0x180>
				ty = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800975c:	4a14      	ldr	r2, [pc, #80]	@ (80097b0 <USER_SPI_initialize+0x1d4>)
 800975e:	7b7b      	ldrb	r3, [r7, #13]
 8009760:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009762:	f7ff fe45 	bl	80093f0 <despiselect>

	if (ty) {			/* OK */
 8009766:	7b7b      	ldrb	r3, [r7, #13]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d012      	beq.n	8009792 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800976c:	4b0f      	ldr	r3, [pc, #60]	@ (80097ac <USER_SPI_initialize+0x1d0>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8009776:	4b0d      	ldr	r3, [pc, #52]	@ (80097ac <USER_SPI_initialize+0x1d0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0210 	orr.w	r2, r2, #16
 800977e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009780:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f023 0301 	bic.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 800978e:	701a      	strb	r2, [r3, #0]
 8009790:	e002      	b.n	8009798 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009792:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 8009794:	2201      	movs	r2, #1
 8009796:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009798:	4b03      	ldr	r3, [pc, #12]	@ (80097a8 <USER_SPI_initialize+0x1cc>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	b2db      	uxtb	r3, r3
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000020 	.word	0x20000020
 80097ac:	20000904 	.word	0x20000904
 80097b0:	20000b38 	.word	0x20000b38

080097b4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <USER_SPI_status+0x14>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e002      	b.n	80097ce <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80097c8:	4b04      	ldr	r3, [pc, #16]	@ (80097dc <USER_SPI_status+0x28>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20000020 	.word	0x20000020

080097e0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <USER_SPI_read+0x1c>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <USER_SPI_read+0x20>
 80097fc:	2304      	movs	r3, #4
 80097fe:	e04d      	b.n	800989c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009800:	4b28      	ldr	r3, [pc, #160]	@ (80098a4 <USER_SPI_read+0xc4>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <USER_SPI_read+0x32>
 800980e:	2303      	movs	r3, #3
 8009810:	e044      	b.n	800989c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009812:	4b25      	ldr	r3, [pc, #148]	@ (80098a8 <USER_SPI_read+0xc8>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <USER_SPI_read+0x44>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	025b      	lsls	r3, r3, #9
 8009822:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d111      	bne.n	800984e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	2011      	movs	r0, #17
 800982e:	f7ff fe66 	bl	80094fe <send_cmd>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d129      	bne.n	800988c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800983c:	68b8      	ldr	r0, [r7, #8]
 800983e:	f7ff fe03 	bl	8009448 <rcvr_datablock>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d021      	beq.n	800988c <USER_SPI_read+0xac>
			count = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	e01e      	b.n	800988c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	2012      	movs	r0, #18
 8009852:	f7ff fe54 	bl	80094fe <send_cmd>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d117      	bne.n	800988c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800985c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009860:	68b8      	ldr	r0, [r7, #8]
 8009862:	f7ff fdf1 	bl	8009448 <rcvr_datablock>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00a      	beq.n	8009882 <USER_SPI_read+0xa2>
				buff += 512;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009872:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	603b      	str	r3, [r7, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1ed      	bne.n	800985c <USER_SPI_read+0x7c>
 8009880:	e000      	b.n	8009884 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009882:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009884:	2100      	movs	r1, #0
 8009886:	200c      	movs	r0, #12
 8009888:	f7ff fe39 	bl	80094fe <send_cmd>
		}
	}
	despiselect();
 800988c:	f7ff fdb0 	bl	80093f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	bf14      	ite	ne
 8009896:	2301      	movne	r3, #1
 8009898:	2300      	moveq	r3, #0
 800989a:	b2db      	uxtb	r3, r3
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000020 	.word	0x20000020
 80098a8:	20000b38 	.word	0x20000b38

080098ac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <USER_SPI_write+0x1c>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <USER_SPI_write+0x20>
 80098c8:	2304      	movs	r3, #4
 80098ca:	e063      	b.n	8009994 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80098cc:	4b33      	ldr	r3, [pc, #204]	@ (800999c <USER_SPI_write+0xf0>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <USER_SPI_write+0x32>
 80098da:	2303      	movs	r3, #3
 80098dc:	e05a      	b.n	8009994 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80098de:	4b2f      	ldr	r3, [pc, #188]	@ (800999c <USER_SPI_write+0xf0>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <USER_SPI_write+0x44>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e051      	b.n	8009994 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80098f0:	4b2b      	ldr	r3, [pc, #172]	@ (80099a0 <USER_SPI_write+0xf4>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <USER_SPI_write+0x56>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	025b      	lsls	r3, r3, #9
 8009900:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d110      	bne.n	800992a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	2018      	movs	r0, #24
 800990c:	f7ff fdf7 	bl	80094fe <send_cmd>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d136      	bne.n	8009984 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009916:	21fe      	movs	r1, #254	@ 0xfe
 8009918:	68b8      	ldr	r0, [r7, #8]
 800991a:	f7ff fdbe 	bl	800949a <xmit_datablock>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02f      	beq.n	8009984 <USER_SPI_write+0xd8>
			count = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	e02c      	b.n	8009984 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800992a:	4b1d      	ldr	r3, [pc, #116]	@ (80099a0 <USER_SPI_write+0xf4>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	f003 0306 	and.w	r3, r3, #6
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <USER_SPI_write+0x92>
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	2097      	movs	r0, #151	@ 0x97
 800993a:	f7ff fde0 	bl	80094fe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	2019      	movs	r0, #25
 8009942:	f7ff fddc 	bl	80094fe <send_cmd>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d11b      	bne.n	8009984 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800994c:	21fc      	movs	r1, #252	@ 0xfc
 800994e:	68b8      	ldr	r0, [r7, #8]
 8009950:	f7ff fda3 	bl	800949a <xmit_datablock>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <USER_SPI_write+0xc4>
				buff += 512;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009960:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	3b01      	subs	r3, #1
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1ee      	bne.n	800994c <USER_SPI_write+0xa0>
 800996e:	e000      	b.n	8009972 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009970:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009972:	21fd      	movs	r1, #253	@ 0xfd
 8009974:	2000      	movs	r0, #0
 8009976:	f7ff fd90 	bl	800949a <xmit_datablock>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d101      	bne.n	8009984 <USER_SPI_write+0xd8>
 8009980:	2301      	movs	r3, #1
 8009982:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009984:	f7ff fd34 	bl	80093f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bf14      	ite	ne
 800998e:	2301      	movne	r3, #1
 8009990:	2300      	moveq	r3, #0
 8009992:	b2db      	uxtb	r3, r3
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000020 	.word	0x20000020
 80099a0:	20000b38 	.word	0x20000b38

080099a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08c      	sub	sp, #48	@ 0x30
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	603a      	str	r2, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	460b      	mov	r3, r1
 80099b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <USER_SPI_ioctl+0x1a>
 80099ba:	2304      	movs	r3, #4
 80099bc:	e15a      	b.n	8009c74 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80099be:	4baf      	ldr	r3, [pc, #700]	@ (8009c7c <USER_SPI_ioctl+0x2d8>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <USER_SPI_ioctl+0x2c>
 80099cc:	2303      	movs	r3, #3
 80099ce:	e151      	b.n	8009c74 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80099d6:	79bb      	ldrb	r3, [r7, #6]
 80099d8:	2b04      	cmp	r3, #4
 80099da:	f200 8136 	bhi.w	8009c4a <USER_SPI_ioctl+0x2a6>
 80099de:	a201      	add	r2, pc, #4	@ (adr r2, 80099e4 <USER_SPI_ioctl+0x40>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099f9 	.word	0x080099f9
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009c4b 	.word	0x08009c4b
 80099f0:	08009ab9 	.word	0x08009ab9
 80099f4:	08009baf 	.word	0x08009baf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80099f8:	f7ff fd0a 	bl	8009410 <spiselect>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 8127 	beq.w	8009c52 <USER_SPI_ioctl+0x2ae>
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009a0a:	e122      	b.n	8009c52 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	2009      	movs	r0, #9
 8009a10:	f7ff fd75 	bl	80094fe <send_cmd>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 811d 	bne.w	8009c56 <USER_SPI_ioctl+0x2b2>
 8009a1c:	f107 030c 	add.w	r3, r7, #12
 8009a20:	2110      	movs	r1, #16
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fd10 	bl	8009448 <rcvr_datablock>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 8113 	beq.w	8009c56 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009a30:	7b3b      	ldrb	r3, [r7, #12]
 8009a32:	099b      	lsrs	r3, r3, #6
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d111      	bne.n	8009a5e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009a3a:	7d7b      	ldrb	r3, [r7, #21]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	7d3b      	ldrb	r3, [r7, #20]
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	4413      	add	r3, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	7cfb      	ldrb	r3, [r7, #19]
 8009a48:	041b      	lsls	r3, r3, #16
 8009a4a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009a4e:	4413      	add	r3, r2
 8009a50:	3301      	adds	r3, #1
 8009a52:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	029a      	lsls	r2, r3, #10
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e028      	b.n	8009ab0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009a5e:	7c7b      	ldrb	r3, [r7, #17]
 8009a60:	f003 030f 	and.w	r3, r3, #15
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	7dbb      	ldrb	r3, [r7, #22]
 8009a68:	09db      	lsrs	r3, r3, #7
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	7d7b      	ldrb	r3, [r7, #21]
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0306 	and.w	r3, r3, #6
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	3302      	adds	r3, #2
 8009a82:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009a86:	7d3b      	ldrb	r3, [r7, #20]
 8009a88:	099b      	lsrs	r3, r3, #6
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	7cfb      	ldrb	r3, [r7, #19]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	441a      	add	r2, r3
 8009a94:	7cbb      	ldrb	r3, [r7, #18]
 8009a96:	029b      	lsls	r3, r3, #10
 8009a98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a9c:	4413      	add	r3, r2
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009aa2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009aa6:	3b09      	subs	r3, #9
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	409a      	lsls	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009ab6:	e0ce      	b.n	8009c56 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009ab8:	4b71      	ldr	r3, [pc, #452]	@ (8009c80 <USER_SPI_ioctl+0x2dc>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d031      	beq.n	8009b28 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	208d      	movs	r0, #141	@ 0x8d
 8009ac8:	f7ff fd19 	bl	80094fe <send_cmd>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f040 80c3 	bne.w	8009c5a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009ad4:	20ff      	movs	r0, #255	@ 0xff
 8009ad6:	f7ff fc21 	bl	800931c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009ada:	f107 030c 	add.w	r3, r7, #12
 8009ade:	2110      	movs	r1, #16
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fcb1 	bl	8009448 <rcvr_datablock>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80b6 	beq.w	8009c5a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009aee:	2330      	movs	r3, #48	@ 0x30
 8009af0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009af4:	e007      	b.n	8009b06 <USER_SPI_ioctl+0x162>
 8009af6:	20ff      	movs	r0, #255	@ 0xff
 8009af8:	f7ff fc10 	bl	800931c <xchg_spi>
 8009afc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b00:	3b01      	subs	r3, #1
 8009b02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009b06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f3      	bne.n	8009af6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009b0e:	7dbb      	ldrb	r3, [r7, #22]
 8009b10:	091b      	lsrs	r3, r3, #4
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	2310      	movs	r3, #16
 8009b18:	fa03 f202 	lsl.w	r2, r3, r2
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009b26:	e098      	b.n	8009c5a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009b28:	2100      	movs	r1, #0
 8009b2a:	2009      	movs	r0, #9
 8009b2c:	f7ff fce7 	bl	80094fe <send_cmd>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f040 8091 	bne.w	8009c5a <USER_SPI_ioctl+0x2b6>
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	2110      	movs	r1, #16
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7ff fc82 	bl	8009448 <rcvr_datablock>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8087 	beq.w	8009c5a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8009c80 <USER_SPI_ioctl+0x2dc>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d012      	beq.n	8009b7e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009b58:	7dbb      	ldrb	r3, [r7, #22]
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009b60:	7dfa      	ldrb	r2, [r7, #23]
 8009b62:	09d2      	lsrs	r2, r2, #7
 8009b64:	b2d2      	uxtb	r2, r2
 8009b66:	4413      	add	r3, r2
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	7e7b      	ldrb	r3, [r7, #25]
 8009b6c:	099b      	lsrs	r3, r3, #6
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e013      	b.n	8009ba6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009b7e:	7dbb      	ldrb	r3, [r7, #22]
 8009b80:	109b      	asrs	r3, r3, #2
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f003 031f 	and.w	r3, r3, #31
 8009b88:	3301      	adds	r3, #1
 8009b8a:	7dfa      	ldrb	r2, [r7, #23]
 8009b8c:	00d2      	lsls	r2, r2, #3
 8009b8e:	f002 0218 	and.w	r2, r2, #24
 8009b92:	7df9      	ldrb	r1, [r7, #23]
 8009b94:	0949      	lsrs	r1, r1, #5
 8009b96:	b2c9      	uxtb	r1, r1
 8009b98:	440a      	add	r2, r1
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009bac:	e055      	b.n	8009c5a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009bae:	4b34      	ldr	r3, [pc, #208]	@ (8009c80 <USER_SPI_ioctl+0x2dc>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	f003 0306 	and.w	r3, r3, #6
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d051      	beq.n	8009c5e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009bba:	f107 020c 	add.w	r2, r7, #12
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	210b      	movs	r1, #11
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff feee 	bl	80099a4 <USER_SPI_ioctl>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d149      	bne.n	8009c62 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009bce:	7b3b      	ldrb	r3, [r7, #12]
 8009bd0:	099b      	lsrs	r3, r3, #6
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <USER_SPI_ioctl+0x23e>
 8009bd8:	7dbb      	ldrb	r3, [r7, #22]
 8009bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d041      	beq.n	8009c66 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	623b      	str	r3, [r7, #32]
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bec:	6a3b      	ldr	r3, [r7, #32]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009bf2:	4b23      	ldr	r3, [pc, #140]	@ (8009c80 <USER_SPI_ioctl+0x2dc>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	f003 0308 	and.w	r3, r3, #8
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d105      	bne.n	8009c0a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	025b      	lsls	r3, r3, #9
 8009c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c06:	025b      	lsls	r3, r3, #9
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009c0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c0c:	2020      	movs	r0, #32
 8009c0e:	f7ff fc76 	bl	80094fe <send_cmd>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d128      	bne.n	8009c6a <USER_SPI_ioctl+0x2c6>
 8009c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c1a:	2021      	movs	r0, #33	@ 0x21
 8009c1c:	f7ff fc6f 	bl	80094fe <send_cmd>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d121      	bne.n	8009c6a <USER_SPI_ioctl+0x2c6>
 8009c26:	2100      	movs	r1, #0
 8009c28:	2026      	movs	r0, #38	@ 0x26
 8009c2a:	f7ff fc68 	bl	80094fe <send_cmd>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11a      	bne.n	8009c6a <USER_SPI_ioctl+0x2c6>
 8009c34:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009c38:	f7ff fbb6 	bl	80093a8 <wait_ready>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d013      	beq.n	8009c6a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009c42:	2300      	movs	r3, #0
 8009c44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009c48:	e00f      	b.n	8009c6a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009c50:	e00c      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		break;
 8009c52:	bf00      	nop
 8009c54:	e00a      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		break;
 8009c56:	bf00      	nop
 8009c58:	e008      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		break;
 8009c5a:	bf00      	nop
 8009c5c:	e006      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009c5e:	bf00      	nop
 8009c60:	e004      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009c62:	bf00      	nop
 8009c64:	e002      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009c66:	bf00      	nop
 8009c68:	e000      	b.n	8009c6c <USER_SPI_ioctl+0x2c8>
		break;
 8009c6a:	bf00      	nop
	}

	despiselect();
 8009c6c:	f7ff fbc0 	bl	80093f0 <despiselect>

	return res;
 8009c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3730      	adds	r7, #48	@ 0x30
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20000020 	.word	0x20000020
 8009c80:	20000b38 	.word	0x20000b38

08009c84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	4a08      	ldr	r2, [pc, #32]	@ (8009cb4 <disk_status+0x30>)
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	79fa      	ldrb	r2, [r7, #7]
 8009c9c:	4905      	ldr	r1, [pc, #20]	@ (8009cb4 <disk_status+0x30>)
 8009c9e:	440a      	add	r2, r1
 8009ca0:	7a12      	ldrb	r2, [r2, #8]
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	4798      	blx	r3
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000b6c 	.word	0x20000b6c

08009cb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8009d00 <disk_initialize+0x48>)
 8009cca:	5cd3      	ldrb	r3, [r2, r3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d111      	bne.n	8009cf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8009d00 <disk_initialize+0x48>)
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	4a09      	ldr	r2, [pc, #36]	@ (8009d00 <disk_initialize+0x48>)
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	79fa      	ldrb	r2, [r7, #7]
 8009ce6:	4906      	ldr	r1, [pc, #24]	@ (8009d00 <disk_initialize+0x48>)
 8009ce8:	440a      	add	r2, r1
 8009cea:	7a12      	ldrb	r2, [r2, #8]
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000b6c 	.word	0x20000b6c

08009d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	4a0a      	ldr	r2, [pc, #40]	@ (8009d40 <disk_read+0x3c>)
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	689c      	ldr	r4, [r3, #8]
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	4a07      	ldr	r2, [pc, #28]	@ (8009d40 <disk_read+0x3c>)
 8009d24:	4413      	add	r3, r2
 8009d26:	7a18      	ldrb	r0, [r3, #8]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	47a0      	blx	r4
 8009d30:	4603      	mov	r3, r0
 8009d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd90      	pop	{r4, r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000b6c 	.word	0x20000b6c

08009d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d44:	b590      	push	{r4, r7, lr}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	4a0a      	ldr	r2, [pc, #40]	@ (8009d80 <disk_write+0x3c>)
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	68dc      	ldr	r4, [r3, #12]
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4a07      	ldr	r2, [pc, #28]	@ (8009d80 <disk_write+0x3c>)
 8009d64:	4413      	add	r3, r2
 8009d66:	7a18      	ldrb	r0, [r3, #8]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	68b9      	ldr	r1, [r7, #8]
 8009d6e:	47a0      	blx	r4
 8009d70:	4603      	mov	r3, r0
 8009d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd90      	pop	{r4, r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000b6c 	.word	0x20000b6c

08009d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	603a      	str	r2, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
 8009d90:	460b      	mov	r3, r1
 8009d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	4a09      	ldr	r2, [pc, #36]	@ (8009dbc <disk_ioctl+0x38>)
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	79fa      	ldrb	r2, [r7, #7]
 8009da2:	4906      	ldr	r1, [pc, #24]	@ (8009dbc <disk_ioctl+0x38>)
 8009da4:	440a      	add	r2, r1
 8009da6:	7a10      	ldrb	r0, [r2, #8]
 8009da8:	79b9      	ldrb	r1, [r7, #6]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4798      	blx	r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000b6c 	.word	0x20000b6c

08009dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009dd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	b21a      	sxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009de4:	89fb      	ldrh	r3, [r7, #14]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	021b      	lsls	r3, r3, #8
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	3202      	adds	r2, #2
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	3201      	adds	r2, #1
 8009e18:	7812      	ldrb	r2, [r2, #0]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	1c5a      	adds	r2, r3, #1
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	887a      	ldrh	r2, [r7, #2]
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	887b      	ldrh	r3, [r7, #2]
 8009e52:	0a1b      	lsrs	r3, r3, #8
 8009e54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	887a      	ldrh	r2, [r7, #2]
 8009e5e:	b2d2      	uxtb	r2, r2
 8009e60:	701a      	strb	r2, [r3, #0]
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	0a1b      	lsrs	r3, r3, #8
 8009e9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	b2d2      	uxtb	r2, r2
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ec6:	b480      	push	{r7}
 8009ec8:	b087      	sub	sp, #28
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00d      	beq.n	8009efc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	1c53      	adds	r3, r2, #1
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	1c59      	adds	r1, r3, #1
 8009eea:	6179      	str	r1, [r7, #20]
 8009eec:	7812      	ldrb	r2, [r2, #0]
 8009eee:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	607b      	str	r3, [r7, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1f1      	bne.n	8009ee0 <mem_cpy+0x1a>
	}
}
 8009efc:	bf00      	nop
 8009efe:	371c      	adds	r7, #28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	617a      	str	r2, [r7, #20]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	607b      	str	r3, [r7, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1f3      	bne.n	8009f18 <mem_set+0x10>
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f3e:	b480      	push	{r7}
 8009f40:	b089      	sub	sp, #36	@ 0x24
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	61fb      	str	r3, [r7, #28]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	61fa      	str	r2, [r7, #28]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	61ba      	str	r2, [r7, #24]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	1acb      	subs	r3, r1, r3
 8009f6a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	607b      	str	r3, [r7, #4]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <mem_cmp+0x40>
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0eb      	beq.n	8009f56 <mem_cmp+0x18>

	return r;
 8009f7e:	697b      	ldr	r3, [r7, #20]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3724      	adds	r7, #36	@ 0x24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f96:	e002      	b.n	8009f9e <chk_chr+0x12>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <chk_chr+0x26>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d1f2      	bne.n	8009f98 <chk_chr+0xc>
	return *str;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60bb      	str	r3, [r7, #8]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	60fb      	str	r3, [r7, #12]
 8009fd6:	e029      	b.n	800a02c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009fd8:	4a27      	ldr	r2, [pc, #156]	@ (800a078 <chk_lock+0xb4>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	4413      	add	r3, r2
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d01d      	beq.n	800a022 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fe6:	4a24      	ldr	r2, [pc, #144]	@ (800a078 <chk_lock+0xb4>)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	4413      	add	r3, r2
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d116      	bne.n	800a026 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009ff8:	4a1f      	ldr	r2, [pc, #124]	@ (800a078 <chk_lock+0xb4>)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4413      	add	r3, r2
 800a000:	3304      	adds	r3, #4
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a008:	429a      	cmp	r2, r3
 800a00a:	d10c      	bne.n	800a026 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a00c:	4a1a      	ldr	r2, [pc, #104]	@ (800a078 <chk_lock+0xb4>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	4413      	add	r3, r2
 800a014:	3308      	adds	r3, #8
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d102      	bne.n	800a026 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a020:	e007      	b.n	800a032 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a022:	2301      	movs	r3, #1
 800a024:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d9d2      	bls.n	8009fd8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d109      	bne.n	800a04c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <chk_lock+0x80>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b02      	cmp	r3, #2
 800a042:	d101      	bne.n	800a048 <chk_lock+0x84>
 800a044:	2300      	movs	r3, #0
 800a046:	e010      	b.n	800a06a <chk_lock+0xa6>
 800a048:	2312      	movs	r3, #18
 800a04a:	e00e      	b.n	800a06a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d108      	bne.n	800a064 <chk_lock+0xa0>
 800a052:	4a09      	ldr	r2, [pc, #36]	@ (800a078 <chk_lock+0xb4>)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	4413      	add	r3, r2
 800a05a:	330c      	adds	r3, #12
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a062:	d101      	bne.n	800a068 <chk_lock+0xa4>
 800a064:	2310      	movs	r3, #16
 800a066:	e000      	b.n	800a06a <chk_lock+0xa6>
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000b4c 	.word	0x20000b4c

0800a07c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a082:	2300      	movs	r3, #0
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	e002      	b.n	800a08e <enq_lock+0x12>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3301      	adds	r3, #1
 800a08c:	607b      	str	r3, [r7, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d806      	bhi.n	800a0a2 <enq_lock+0x26>
 800a094:	4a09      	ldr	r2, [pc, #36]	@ (800a0bc <enq_lock+0x40>)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	4413      	add	r3, r2
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1f2      	bne.n	800a088 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	bf14      	ite	ne
 800a0a8:	2301      	movne	r3, #1
 800a0aa:	2300      	moveq	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20000b4c 	.word	0x20000b4c

0800a0c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e01f      	b.n	800a110 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0d0:	4a41      	ldr	r2, [pc, #260]	@ (800a1d8 <inc_lock+0x118>)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	4413      	add	r3, r2
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d113      	bne.n	800a10a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0e2:	4a3d      	ldr	r2, [pc, #244]	@ (800a1d8 <inc_lock+0x118>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d109      	bne.n	800a10a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a0f6:	4a38      	ldr	r2, [pc, #224]	@ (800a1d8 <inc_lock+0x118>)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3308      	adds	r3, #8
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a106:	429a      	cmp	r2, r3
 800a108:	d006      	beq.n	800a118 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3301      	adds	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d9dc      	bls.n	800a0d0 <inc_lock+0x10>
 800a116:	e000      	b.n	800a11a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a118:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d132      	bne.n	800a186 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e002      	b.n	800a12c <inc_lock+0x6c>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d806      	bhi.n	800a140 <inc_lock+0x80>
 800a132:	4a29      	ldr	r2, [pc, #164]	@ (800a1d8 <inc_lock+0x118>)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	4413      	add	r3, r2
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f2      	bne.n	800a126 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d101      	bne.n	800a14a <inc_lock+0x8a>
 800a146:	2300      	movs	r3, #0
 800a148:	e040      	b.n	800a1cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	4922      	ldr	r1, [pc, #136]	@ (800a1d8 <inc_lock+0x118>)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	011b      	lsls	r3, r3, #4
 800a154:	440b      	add	r3, r1
 800a156:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	491e      	ldr	r1, [pc, #120]	@ (800a1d8 <inc_lock+0x118>)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	440b      	add	r3, r1
 800a164:	3304      	adds	r3, #4
 800a166:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	695a      	ldr	r2, [r3, #20]
 800a16c:	491a      	ldr	r1, [pc, #104]	@ (800a1d8 <inc_lock+0x118>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	440b      	add	r3, r1
 800a174:	3308      	adds	r3, #8
 800a176:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a178:	4a17      	ldr	r2, [pc, #92]	@ (800a1d8 <inc_lock+0x118>)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	4413      	add	r3, r2
 800a180:	330c      	adds	r3, #12
 800a182:	2200      	movs	r2, #0
 800a184:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d009      	beq.n	800a1a0 <inc_lock+0xe0>
 800a18c:	4a12      	ldr	r2, [pc, #72]	@ (800a1d8 <inc_lock+0x118>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	4413      	add	r3, r2
 800a194:	330c      	adds	r3, #12
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <inc_lock+0xe0>
 800a19c:	2300      	movs	r3, #0
 800a19e:	e015      	b.n	800a1cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d108      	bne.n	800a1b8 <inc_lock+0xf8>
 800a1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d8 <inc_lock+0x118>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	330c      	adds	r3, #12
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	e001      	b.n	800a1bc <inc_lock+0xfc>
 800a1b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1bc:	4906      	ldr	r1, [pc, #24]	@ (800a1d8 <inc_lock+0x118>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	440b      	add	r3, r1
 800a1c4:	330c      	adds	r3, #12
 800a1c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	20000b4c 	.word	0x20000b4c

0800a1dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	607b      	str	r3, [r7, #4]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d825      	bhi.n	800a23c <dec_lock+0x60>
		n = Files[i].ctr;
 800a1f0:	4a17      	ldr	r2, [pc, #92]	@ (800a250 <dec_lock+0x74>)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	4413      	add	r3, r2
 800a1f8:	330c      	adds	r3, #12
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a1fe:	89fb      	ldrh	r3, [r7, #14]
 800a200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a204:	d101      	bne.n	800a20a <dec_lock+0x2e>
 800a206:	2300      	movs	r3, #0
 800a208:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a20a:	89fb      	ldrh	r3, [r7, #14]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <dec_lock+0x3a>
 800a210:	89fb      	ldrh	r3, [r7, #14]
 800a212:	3b01      	subs	r3, #1
 800a214:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a216:	4a0e      	ldr	r2, [pc, #56]	@ (800a250 <dec_lock+0x74>)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	011b      	lsls	r3, r3, #4
 800a21c:	4413      	add	r3, r2
 800a21e:	330c      	adds	r3, #12
 800a220:	89fa      	ldrh	r2, [r7, #14]
 800a222:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a224:	89fb      	ldrh	r3, [r7, #14]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <dec_lock+0x5a>
 800a22a:	4a09      	ldr	r2, [pc, #36]	@ (800a250 <dec_lock+0x74>)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	4413      	add	r3, r2
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	737b      	strb	r3, [r7, #13]
 800a23a:	e001      	b.n	800a240 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a23c:	2302      	movs	r3, #2
 800a23e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a240:	7b7b      	ldrb	r3, [r7, #13]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000b4c 	.word	0x20000b4c

0800a254 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e010      	b.n	800a284 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a262:	4a0d      	ldr	r2, [pc, #52]	@ (800a298 <clear_lock+0x44>)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	4413      	add	r3, r2
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d105      	bne.n	800a27e <clear_lock+0x2a>
 800a272:	4a09      	ldr	r2, [pc, #36]	@ (800a298 <clear_lock+0x44>)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	4413      	add	r3, r2
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d9eb      	bls.n	800a262 <clear_lock+0xe>
	}
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	20000b4c 	.word	0x20000b4c

0800a29c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	78db      	ldrb	r3, [r3, #3]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d034      	beq.n	800a31a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	7858      	ldrb	r0, [r3, #1]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	f7ff fd3e 	bl	8009d44 <disk_write>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	73fb      	strb	r3, [r7, #15]
 800a2d2:	e022      	b.n	800a31a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	1ad2      	subs	r2, r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d217      	bcs.n	800a31a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	789b      	ldrb	r3, [r3, #2]
 800a2ee:	613b      	str	r3, [r7, #16]
 800a2f0:	e010      	b.n	800a314 <sync_window+0x78>
					wsect += fs->fsize;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	7858      	ldrb	r0, [r3, #1]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a306:	2301      	movs	r3, #1
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	f7ff fd1b 	bl	8009d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3b01      	subs	r3, #1
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d8eb      	bhi.n	800a2f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d01b      	beq.n	800a374 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ffad 	bl	800a29c <sync_window>
 800a342:	4603      	mov	r3, r0
 800a344:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d113      	bne.n	800a374 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	7858      	ldrb	r0, [r3, #1]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a356:	2301      	movs	r3, #1
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	f7ff fcd3 	bl	8009d04 <disk_read>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a368:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff ff87 	bl	800a29c <sync_window>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d158      	bne.n	800a44a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d148      	bne.n	800a432 <sync_fs+0xb2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	791b      	ldrb	r3, [r3, #4]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d144      	bne.n	800a432 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3330      	adds	r3, #48	@ 0x30
 800a3ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff fda8 	bl	8009f08 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3330      	adds	r3, #48	@ 0x30
 800a3bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a3c0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fd37 	bl	8009e38 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3330      	adds	r3, #48	@ 0x30
 800a3ce:	4921      	ldr	r1, [pc, #132]	@ (800a454 <sync_fs+0xd4>)
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff fd4c 	bl	8009e6e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3330      	adds	r3, #48	@ 0x30
 800a3da:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a3de:	491e      	ldr	r1, [pc, #120]	@ (800a458 <sync_fs+0xd8>)
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff fd44 	bl	8009e6e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3330      	adds	r3, #48	@ 0x30
 800a3ea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7ff fd3a 	bl	8009e6e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3330      	adds	r3, #48	@ 0x30
 800a3fe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7ff fd30 	bl	8009e6e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7858      	ldrb	r0, [r3, #1]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	2301      	movs	r3, #1
 800a428:	f7ff fc8c 	bl	8009d44 <disk_write>
			fs->fsi_flag = 0;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	2200      	movs	r2, #0
 800a438:	2100      	movs	r1, #0
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fca2 	bl	8009d84 <disk_ioctl>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <sync_fs+0xca>
 800a446:	2301      	movs	r3, #1
 800a448:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	41615252 	.word	0x41615252
 800a458:	61417272 	.word	0x61417272

0800a45c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	3b02      	subs	r3, #2
 800a46a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	3b02      	subs	r3, #2
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d301      	bcc.n	800a47c <clust2sect+0x20>
 800a478:	2300      	movs	r3, #0
 800a47a:	e008      	b.n	800a48e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	895b      	ldrh	r3, [r3, #10]
 800a480:	461a      	mov	r2, r3
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	fb03 f202 	mul.w	r2, r3, r2
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	4413      	add	r3, r2
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b086      	sub	sp, #24
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d904      	bls.n	800a4ba <get_fat+0x20>
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	e08e      	b.n	800a5de <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d061      	beq.n	800a592 <get_fat+0xf8>
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	dc7b      	bgt.n	800a5ca <get_fat+0x130>
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d002      	beq.n	800a4dc <get_fat+0x42>
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d041      	beq.n	800a55e <get_fat+0xc4>
 800a4da:	e076      	b.n	800a5ca <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	085b      	lsrs	r3, r3, #1
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	6a1a      	ldr	r2, [r3, #32]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	0a5b      	lsrs	r3, r3, #9
 800a4f2:	4413      	add	r3, r2
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f7ff ff14 	bl	800a324 <move_window>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d166      	bne.n	800a5d0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	60fa      	str	r2, [r7, #12]
 800a508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	4413      	add	r3, r2
 800a510:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a514:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6a1a      	ldr	r2, [r3, #32]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	0a5b      	lsrs	r3, r3, #9
 800a51e:	4413      	add	r3, r2
 800a520:	4619      	mov	r1, r3
 800a522:	6938      	ldr	r0, [r7, #16]
 800a524:	f7ff fefe 	bl	800a324 <move_window>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d152      	bne.n	800a5d4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	4413      	add	r3, r2
 800a538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4313      	orrs	r3, r2
 800a542:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <get_fat+0xba>
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	091b      	lsrs	r3, r3, #4
 800a552:	e002      	b.n	800a55a <get_fat+0xc0>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a55a:	617b      	str	r3, [r7, #20]
			break;
 800a55c:	e03f      	b.n	800a5de <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	6a1a      	ldr	r2, [r3, #32]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	0a1b      	lsrs	r3, r3, #8
 800a566:	4413      	add	r3, r2
 800a568:	4619      	mov	r1, r3
 800a56a:	6938      	ldr	r0, [r7, #16]
 800a56c:	f7ff feda 	bl	800a324 <move_window>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d130      	bne.n	800a5d8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a584:	4413      	add	r3, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff fc1a 	bl	8009dc0 <ld_word>
 800a58c:	4603      	mov	r3, r0
 800a58e:	617b      	str	r3, [r7, #20]
			break;
 800a590:	e025      	b.n	800a5de <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6a1a      	ldr	r2, [r3, #32]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	09db      	lsrs	r3, r3, #7
 800a59a:	4413      	add	r3, r2
 800a59c:	4619      	mov	r1, r3
 800a59e:	6938      	ldr	r0, [r7, #16]
 800a5a0:	f7ff fec0 	bl	800a324 <move_window>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d118      	bne.n	800a5dc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fc19 	bl	8009df2 <ld_dword>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a5c6:	617b      	str	r3, [r7, #20]
			break;
 800a5c8:	e009      	b.n	800a5de <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	e006      	b.n	800a5de <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5d0:	bf00      	nop
 800a5d2:	e004      	b.n	800a5de <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5d4:	bf00      	nop
 800a5d6:	e002      	b.n	800a5de <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5d8:	bf00      	nop
 800a5da:	e000      	b.n	800a5de <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5dc:	bf00      	nop
		}
	}

	return val;
 800a5de:	697b      	ldr	r3, [r7, #20]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3718      	adds	r7, #24
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a5e8:	b590      	push	{r4, r7, lr}
 800a5ea:	b089      	sub	sp, #36	@ 0x24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	f240 80d9 	bls.w	800a7b2 <put_fat+0x1ca>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	f080 80d3 	bcs.w	800a7b2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	2b03      	cmp	r3, #3
 800a612:	f000 8096 	beq.w	800a742 <put_fat+0x15a>
 800a616:	2b03      	cmp	r3, #3
 800a618:	f300 80cb 	bgt.w	800a7b2 <put_fat+0x1ca>
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d002      	beq.n	800a626 <put_fat+0x3e>
 800a620:	2b02      	cmp	r3, #2
 800a622:	d06e      	beq.n	800a702 <put_fat+0x11a>
 800a624:	e0c5      	b.n	800a7b2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	61bb      	str	r3, [r7, #24]
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	085b      	lsrs	r3, r3, #1
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	4413      	add	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6a1a      	ldr	r2, [r3, #32]
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	0a5b      	lsrs	r3, r3, #9
 800a63c:	4413      	add	r3, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fe6f 	bl	800a324 <move_window>
 800a646:	4603      	mov	r3, r0
 800a648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a64a:	7ffb      	ldrb	r3, [r7, #31]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f040 80a9 	bne.w	800a7a4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	61b9      	str	r1, [r7, #24]
 800a65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a662:	4413      	add	r3, r2
 800a664:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00d      	beq.n	800a68c <put_fat+0xa4>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	b25b      	sxtb	r3, r3
 800a676:	f003 030f 	and.w	r3, r3, #15
 800a67a:	b25a      	sxtb	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	b25b      	sxtb	r3, r3
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	b25b      	sxtb	r3, r3
 800a684:	4313      	orrs	r3, r2
 800a686:	b25b      	sxtb	r3, r3
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	e001      	b.n	800a690 <put_fat+0xa8>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	0a5b      	lsrs	r3, r3, #9
 800a6a2:	4413      	add	r3, r2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7ff fe3c 	bl	800a324 <move_window>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d178      	bne.n	800a7a8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c2:	4413      	add	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <put_fat+0xf0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	091b      	lsrs	r3, r3, #4
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	e00e      	b.n	800a6f6 <put_fat+0x10e>
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b25b      	sxtb	r3, r3
 800a6de:	f023 030f 	bic.w	r3, r3, #15
 800a6e2:	b25a      	sxtb	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	f003 030f 	and.w	r3, r3, #15
 800a6ee:	b25b      	sxtb	r3, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b25b      	sxtb	r3, r3
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	70da      	strb	r2, [r3, #3]
			break;
 800a700:	e057      	b.n	800a7b2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a1a      	ldr	r2, [r3, #32]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	0a1b      	lsrs	r3, r3, #8
 800a70a:	4413      	add	r3, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fe08 	bl	800a324 <move_window>
 800a714:	4603      	mov	r3, r0
 800a716:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a718:	7ffb      	ldrb	r3, [r7, #31]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d146      	bne.n	800a7ac <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a72c:	4413      	add	r3, r2
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	b292      	uxth	r2, r2
 800a732:	4611      	mov	r1, r2
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fb7f 	bl	8009e38 <st_word>
			fs->wflag = 1;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2201      	movs	r2, #1
 800a73e:	70da      	strb	r2, [r3, #3]
			break;
 800a740:	e037      	b.n	800a7b2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6a1a      	ldr	r2, [r3, #32]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	09db      	lsrs	r3, r3, #7
 800a74a:	4413      	add	r3, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fde8 	bl	800a324 <move_window>
 800a754:	4603      	mov	r3, r0
 800a756:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a758:	7ffb      	ldrb	r3, [r7, #31]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d128      	bne.n	800a7b0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a772:	4413      	add	r3, r2
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff fb3c 	bl	8009df2 <ld_dword>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a780:	4323      	orrs	r3, r4
 800a782:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a792:	4413      	add	r3, r2
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4618      	mov	r0, r3
 800a798:	f7ff fb69 	bl	8009e6e <st_dword>
			fs->wflag = 1;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	70da      	strb	r2, [r3, #3]
			break;
 800a7a2:	e006      	b.n	800a7b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7a4:	bf00      	nop
 800a7a6:	e004      	b.n	800a7b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7a8:	bf00      	nop
 800a7aa:	e002      	b.n	800a7b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7ac:	bf00      	nop
 800a7ae:	e000      	b.n	800a7b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a7b0:	bf00      	nop
		}
	}
	return res;
 800a7b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3724      	adds	r7, #36	@ 0x24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd90      	pop	{r4, r7, pc}

0800a7bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d904      	bls.n	800a7e2 <remove_chain+0x26>
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d301      	bcc.n	800a7e6 <remove_chain+0x2a>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e04b      	b.n	800a87e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00c      	beq.n	800a806 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	69b8      	ldr	r0, [r7, #24]
 800a7f4:	f7ff fef8 	bl	800a5e8 <put_fat>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a7fc:	7ffb      	ldrb	r3, [r7, #31]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <remove_chain+0x4a>
 800a802:	7ffb      	ldrb	r3, [r7, #31]
 800a804:	e03b      	b.n	800a87e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a806:	68b9      	ldr	r1, [r7, #8]
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff fe46 	bl	800a49a <get_fat>
 800a80e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d031      	beq.n	800a87a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d101      	bne.n	800a820 <remove_chain+0x64>
 800a81c:	2302      	movs	r3, #2
 800a81e:	e02e      	b.n	800a87e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a826:	d101      	bne.n	800a82c <remove_chain+0x70>
 800a828:	2301      	movs	r3, #1
 800a82a:	e028      	b.n	800a87e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a82c:	2200      	movs	r2, #0
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	69b8      	ldr	r0, [r7, #24]
 800a832:	f7ff fed9 	bl	800a5e8 <put_fat>
 800a836:	4603      	mov	r3, r0
 800a838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a83a:	7ffb      	ldrb	r3, [r7, #31]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <remove_chain+0x88>
 800a840:	7ffb      	ldrb	r3, [r7, #31]
 800a842:	e01c      	b.n	800a87e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	3b02      	subs	r3, #2
 800a84e:	429a      	cmp	r2, r3
 800a850:	d20b      	bcs.n	800a86a <remove_chain+0xae>
			fs->free_clst++;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	791b      	ldrb	r3, [r3, #4]
 800a860:	f043 0301 	orr.w	r3, r3, #1
 800a864:	b2da      	uxtb	r2, r3
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	429a      	cmp	r2, r3
 800a876:	d3c6      	bcc.n	800a806 <remove_chain+0x4a>
 800a878:	e000      	b.n	800a87c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a87a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b088      	sub	sp, #32
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10d      	bne.n	800a8b8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <create_chain+0x2c>
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d31b      	bcc.n	800a8ea <create_chain+0x64>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	e018      	b.n	800a8ea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fded 	bl	800a49a <get_fat>
 800a8c0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d801      	bhi.n	800a8cc <create_chain+0x46>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e070      	b.n	800a9ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8d2:	d101      	bne.n	800a8d8 <create_chain+0x52>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	e06a      	b.n	800a9ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d201      	bcs.n	800a8e6 <create_chain+0x60>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	e063      	b.n	800a9ae <create_chain+0x128>
		scl = clst;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	69fa      	ldr	r2, [r7, #28]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d307      	bcc.n	800a90e <create_chain+0x88>
				ncl = 2;
 800a8fe:	2302      	movs	r3, #2
 800a900:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a902:	69fa      	ldr	r2, [r7, #28]
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	429a      	cmp	r2, r3
 800a908:	d901      	bls.n	800a90e <create_chain+0x88>
 800a90a:	2300      	movs	r3, #0
 800a90c:	e04f      	b.n	800a9ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a90e:	69f9      	ldr	r1, [r7, #28]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fdc2 	bl	800a49a <get_fat>
 800a916:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00e      	beq.n	800a93c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d003      	beq.n	800a92c <create_chain+0xa6>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a92a:	d101      	bne.n	800a930 <create_chain+0xaa>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	e03e      	b.n	800a9ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	429a      	cmp	r2, r3
 800a936:	d1da      	bne.n	800a8ee <create_chain+0x68>
 800a938:	2300      	movs	r3, #0
 800a93a:	e038      	b.n	800a9ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a93c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a93e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a942:	69f9      	ldr	r1, [r7, #28]
 800a944:	6938      	ldr	r0, [r7, #16]
 800a946:	f7ff fe4f 	bl	800a5e8 <put_fat>
 800a94a:	4603      	mov	r3, r0
 800a94c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d109      	bne.n	800a968 <create_chain+0xe2>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d006      	beq.n	800a968 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f7ff fe42 	bl	800a5e8 <put_fat>
 800a964:	4603      	mov	r3, r0
 800a966:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d116      	bne.n	800a99c <create_chain+0x116>
		fs->last_clst = ncl;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	3b02      	subs	r3, #2
 800a97e:	429a      	cmp	r2, r3
 800a980:	d804      	bhi.n	800a98c <create_chain+0x106>
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	791b      	ldrb	r3, [r3, #4]
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	711a      	strb	r2, [r3, #4]
 800a99a:	e007      	b.n	800a9ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d102      	bne.n	800a9a8 <create_chain+0x122>
 800a9a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9a6:	e000      	b.n	800a9aa <create_chain+0x124>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a9ac:	69fb      	ldr	r3, [r7, #28]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	0a5b      	lsrs	r3, r3, #9
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	8952      	ldrh	r2, [r2, #10]
 800a9d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	613a      	str	r2, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d101      	bne.n	800a9f0 <clmt_clust+0x3a>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	e010      	b.n	800aa12 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d307      	bcc.n	800aa08 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3304      	adds	r3, #4
 800aa04:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa06:	e7e9      	b.n	800a9dc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aa08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	4413      	add	r3, r2
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	371c      	adds	r7, #28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b086      	sub	sp, #24
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa34:	d204      	bcs.n	800aa40 <dir_sdi+0x22>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa40:	2302      	movs	r3, #2
 800aa42:	e063      	b.n	800ab0c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <dir_sdi+0x46>
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d902      	bls.n	800aa64 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa62:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10c      	bne.n	800aa84 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	095b      	lsrs	r3, r3, #5
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	8912      	ldrh	r2, [r2, #8]
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d301      	bcc.n	800aa7a <dir_sdi+0x5c>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e048      	b.n	800ab0c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	61da      	str	r2, [r3, #28]
 800aa82:	e029      	b.n	800aad8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	895b      	ldrh	r3, [r3, #10]
 800aa88:	025b      	lsls	r3, r3, #9
 800aa8a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa8c:	e019      	b.n	800aac2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6979      	ldr	r1, [r7, #20]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fd01 	bl	800a49a <get_fat>
 800aa98:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa0:	d101      	bne.n	800aaa6 <dir_sdi+0x88>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e032      	b.n	800ab0c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d904      	bls.n	800aab6 <dir_sdi+0x98>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d301      	bcc.n	800aaba <dir_sdi+0x9c>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e028      	b.n	800ab0c <dir_sdi+0xee>
			ofs -= csz;
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d2e1      	bcs.n	800aa8e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800aaca:	6979      	ldr	r1, [r7, #20]
 800aacc:	6938      	ldr	r0, [r7, #16]
 800aace:	f7ff fcc5 	bl	800a45c <clust2sect>
 800aad2:	4602      	mov	r2, r0
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <dir_sdi+0xcc>
 800aae6:	2302      	movs	r3, #2
 800aae8:	e010      	b.n	800ab0c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69da      	ldr	r2, [r3, #28]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	0a5b      	lsrs	r3, r3, #9
 800aaf2:	441a      	add	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	3320      	adds	r3, #32
 800ab2a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d003      	beq.n	800ab3c <dir_next+0x28>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab3a:	d301      	bcc.n	800ab40 <dir_next+0x2c>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	e0aa      	b.n	800ac96 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 8098 	bne.w	800ac7c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10b      	bne.n	800ab76 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	095b      	lsrs	r3, r3, #5
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	8912      	ldrh	r2, [r2, #8]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	f0c0 8088 	bcc.w	800ac7c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	61da      	str	r2, [r3, #28]
 800ab72:	2304      	movs	r3, #4
 800ab74:	e08f      	b.n	800ac96 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	0a5b      	lsrs	r3, r3, #9
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	8952      	ldrh	r2, [r2, #10]
 800ab7e:	3a01      	subs	r2, #1
 800ab80:	4013      	ands	r3, r2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d17a      	bne.n	800ac7c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7ff fc83 	bl	800a49a <get_fat>
 800ab94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d801      	bhi.n	800aba0 <dir_next+0x8c>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e07a      	b.n	800ac96 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aba6:	d101      	bne.n	800abac <dir_next+0x98>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e074      	b.n	800ac96 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d358      	bcc.n	800ac68 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d104      	bne.n	800abc6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	61da      	str	r2, [r3, #28]
 800abc2:	2304      	movs	r3, #4
 800abc4:	e067      	b.n	800ac96 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f7ff fe59 	bl	800a886 <create_chain>
 800abd4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <dir_next+0xcc>
 800abdc:	2307      	movs	r3, #7
 800abde:	e05a      	b.n	800ac96 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <dir_next+0xd6>
 800abe6:	2302      	movs	r3, #2
 800abe8:	e055      	b.n	800ac96 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abf0:	d101      	bne.n	800abf6 <dir_next+0xe2>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e04f      	b.n	800ac96 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff fb50 	bl	800a29c <sync_window>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <dir_next+0xf2>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e047      	b.n	800ac96 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3330      	adds	r3, #48	@ 0x30
 800ac0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff f979 	bl	8009f08 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	6979      	ldr	r1, [r7, #20]
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff fc1d 	bl	800a45c <clust2sect>
 800ac22:	4602      	mov	r2, r0
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ac28:	e012      	b.n	800ac50 <dir_next+0x13c>
						fs->wflag = 1;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fb33 	bl	800a29c <sync_window>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <dir_next+0x12c>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e02a      	b.n	800ac96 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3301      	adds	r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	895b      	ldrh	r3, [r3, #10]
 800ac54:	461a      	mov	r2, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d3e6      	bcc.n	800ac2a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7ff fbf3 	bl	800a45c <clust2sect>
 800ac76:	4602      	mov	r2, r0
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	441a      	add	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b086      	sub	sp, #24
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff feb4 	bl	800aa1e <dir_sdi>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d12b      	bne.n	800ad18 <dir_alloc+0x7a>
		n = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	4619      	mov	r1, r3
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fb2a 	bl	800a324 <move_window>
 800acd0:	4603      	mov	r3, r0
 800acd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d11d      	bne.n	800ad16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2be5      	cmp	r3, #229	@ 0xe5
 800ace2:	d004      	beq.n	800acee <dir_alloc+0x50>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d107      	bne.n	800acfe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	3301      	adds	r3, #1
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d102      	bne.n	800ad02 <dir_alloc+0x64>
 800acfc:	e00c      	b.n	800ad18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad02:	2101      	movs	r1, #1
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ff05 	bl	800ab14 <dir_next>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0d7      	beq.n	800acc4 <dir_alloc+0x26>
 800ad14:	e000      	b.n	800ad18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ad16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d101      	bne.n	800ad22 <dir_alloc+0x84>
 800ad1e:	2307      	movs	r3, #7
 800ad20:	75fb      	strb	r3, [r7, #23]
	return res;
 800ad22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	331a      	adds	r3, #26
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff f840 	bl	8009dc0 <ld_word>
 800ad40:	4603      	mov	r3, r0
 800ad42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b03      	cmp	r3, #3
 800ad4a:	d109      	bne.n	800ad60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	3314      	adds	r3, #20
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff f835 	bl	8009dc0 <ld_word>
 800ad56:	4603      	mov	r3, r0
 800ad58:	041b      	lsls	r3, r3, #16
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ad60:	68fb      	ldr	r3, [r7, #12]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	331a      	adds	r3, #26
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	b292      	uxth	r2, r2
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff f859 	bl	8009e38 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d109      	bne.n	800ada2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f103 0214 	add.w	r2, r3, #20
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	0c1b      	lsrs	r3, r3, #16
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	f7ff f84b 	bl	8009e38 <st_word>
	}
}
 800ada2:	bf00      	nop
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b086      	sub	sp, #24
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff fe2f 	bl	800aa1e <dir_sdi>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <dir_find+0x24>
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	e03e      	b.n	800ae4c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4619      	mov	r1, r3
 800add4:	6938      	ldr	r0, [r7, #16]
 800add6:	f7ff faa5 	bl	800a324 <move_window>
 800adda:	4603      	mov	r3, r0
 800addc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d12f      	bne.n	800ae44 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <dir_find+0x4e>
 800adf2:	2304      	movs	r3, #4
 800adf4:	75fb      	strb	r3, [r7, #23]
 800adf6:	e028      	b.n	800ae4a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	330b      	adds	r3, #11
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	330b      	adds	r3, #11
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f003 0308 	and.w	r3, r3, #8
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <dir_find+0x86>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a18      	ldr	r0, [r3, #32]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3324      	adds	r3, #36	@ 0x24
 800ae22:	220b      	movs	r2, #11
 800ae24:	4619      	mov	r1, r3
 800ae26:	f7ff f88a 	bl	8009f3e <mem_cmp>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae30:	2100      	movs	r1, #0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fe6e 	bl	800ab14 <dir_next>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0c5      	beq.n	800adce <dir_find+0x24>
 800ae42:	e002      	b.n	800ae4a <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae44:	bf00      	nop
 800ae46:	e000      	b.n	800ae4a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae48:	bf00      	nop

	return res;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ae62:	2101      	movs	r1, #1
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ff1a 	bl	800ac9e <dir_alloc>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d11c      	bne.n	800aeae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68b8      	ldr	r0, [r7, #8]
 800ae7c:	f7ff fa52 	bl	800a324 <move_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d111      	bne.n	800aeae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	2100      	movs	r1, #0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff f838 	bl	8009f08 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a18      	ldr	r0, [r3, #32]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3324      	adds	r3, #36	@ 0x24
 800aea0:	220b      	movs	r2, #11
 800aea2:	4619      	mov	r1, r3
 800aea4:	f7ff f80f 	bl	8009ec6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3324      	adds	r3, #36	@ 0x24
 800aecc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aece:	220b      	movs	r2, #11
 800aed0:	2120      	movs	r1, #32
 800aed2:	68b8      	ldr	r0, [r7, #8]
 800aed4:	f7ff f818 	bl	8009f08 <mem_set>
	si = i = 0; ni = 8;
 800aed8:	2300      	movs	r3, #0
 800aeda:	613b      	str	r3, [r7, #16]
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	2308      	movs	r3, #8
 800aee2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	61fa      	str	r2, [r7, #28]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4413      	add	r3, r2
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aef2:	7efb      	ldrb	r3, [r7, #27]
 800aef4:	2b20      	cmp	r3, #32
 800aef6:	d94e      	bls.n	800af96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aef8:	7efb      	ldrb	r3, [r7, #27]
 800aefa:	2b2f      	cmp	r3, #47	@ 0x2f
 800aefc:	d006      	beq.n	800af0c <create_name+0x54>
 800aefe:	7efb      	ldrb	r3, [r7, #27]
 800af00:	2b5c      	cmp	r3, #92	@ 0x5c
 800af02:	d110      	bne.n	800af26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af04:	e002      	b.n	800af0c <create_name+0x54>
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	3301      	adds	r3, #1
 800af0a:	61fb      	str	r3, [r7, #28]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	4413      	add	r3, r2
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b2f      	cmp	r3, #47	@ 0x2f
 800af16:	d0f6      	beq.n	800af06 <create_name+0x4e>
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b5c      	cmp	r3, #92	@ 0x5c
 800af22:	d0f0      	beq.n	800af06 <create_name+0x4e>
			break;
 800af24:	e038      	b.n	800af98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af26:	7efb      	ldrb	r3, [r7, #27]
 800af28:	2b2e      	cmp	r3, #46	@ 0x2e
 800af2a:	d003      	beq.n	800af34 <create_name+0x7c>
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	d30c      	bcc.n	800af4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2b0b      	cmp	r3, #11
 800af38:	d002      	beq.n	800af40 <create_name+0x88>
 800af3a:	7efb      	ldrb	r3, [r7, #27]
 800af3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af3e:	d001      	beq.n	800af44 <create_name+0x8c>
 800af40:	2306      	movs	r3, #6
 800af42:	e044      	b.n	800afce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af44:	2308      	movs	r3, #8
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	230b      	movs	r3, #11
 800af4a:	617b      	str	r3, [r7, #20]
			continue;
 800af4c:	e022      	b.n	800af94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af52:	2b00      	cmp	r3, #0
 800af54:	da04      	bge.n	800af60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af56:	7efb      	ldrb	r3, [r7, #27]
 800af58:	3b80      	subs	r3, #128	@ 0x80
 800af5a:	4a1f      	ldr	r2, [pc, #124]	@ (800afd8 <create_name+0x120>)
 800af5c:	5cd3      	ldrb	r3, [r2, r3]
 800af5e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800af60:	7efb      	ldrb	r3, [r7, #27]
 800af62:	4619      	mov	r1, r3
 800af64:	481d      	ldr	r0, [pc, #116]	@ (800afdc <create_name+0x124>)
 800af66:	f7ff f811 	bl	8009f8c <chk_chr>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <create_name+0xbc>
 800af70:	2306      	movs	r3, #6
 800af72:	e02c      	b.n	800afce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af74:	7efb      	ldrb	r3, [r7, #27]
 800af76:	2b60      	cmp	r3, #96	@ 0x60
 800af78:	d905      	bls.n	800af86 <create_name+0xce>
 800af7a:	7efb      	ldrb	r3, [r7, #27]
 800af7c:	2b7a      	cmp	r3, #122	@ 0x7a
 800af7e:	d802      	bhi.n	800af86 <create_name+0xce>
 800af80:	7efb      	ldrb	r3, [r7, #27]
 800af82:	3b20      	subs	r3, #32
 800af84:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	613a      	str	r2, [r7, #16]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	4413      	add	r3, r2
 800af90:	7efa      	ldrb	r2, [r7, #27]
 800af92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af94:	e7a6      	b.n	800aee4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	441a      	add	r2, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <create_name+0xf4>
 800afa8:	2306      	movs	r3, #6
 800afaa:	e010      	b.n	800afce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2be5      	cmp	r3, #229	@ 0xe5
 800afb2:	d102      	bne.n	800afba <create_name+0x102>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2205      	movs	r2, #5
 800afb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800afba:	7efb      	ldrb	r3, [r7, #27]
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	d801      	bhi.n	800afc4 <create_name+0x10c>
 800afc0:	2204      	movs	r2, #4
 800afc2:	e000      	b.n	800afc6 <create_name+0x10e>
 800afc4:	2200      	movs	r2, #0
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	330b      	adds	r3, #11
 800afca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800afcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	08011ab4 	.word	0x08011ab4
 800afdc:	08011a50 	.word	0x08011a50

0800afe0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aff4:	e002      	b.n	800affc <follow_path+0x1c>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b2f      	cmp	r3, #47	@ 0x2f
 800b002:	d0f8      	beq.n	800aff6 <follow_path+0x16>
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b5c      	cmp	r3, #92	@ 0x5c
 800b00a:	d0f4      	beq.n	800aff6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	2200      	movs	r2, #0
 800b010:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b1f      	cmp	r3, #31
 800b018:	d80a      	bhi.n	800b030 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2280      	movs	r2, #128	@ 0x80
 800b01e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b022:	2100      	movs	r1, #0
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff fcfa 	bl	800aa1e <dir_sdi>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]
 800b02e:	e043      	b.n	800b0b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b030:	463b      	mov	r3, r7
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7ff ff3f 	bl	800aeb8 <create_name>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d134      	bne.n	800b0ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff feb0 	bl	800adaa <dir_find>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b054:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00a      	beq.n	800b072 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d127      	bne.n	800b0b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b062:	7afb      	ldrb	r3, [r7, #11]
 800b064:	f003 0304 	and.w	r3, r3, #4
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d122      	bne.n	800b0b2 <follow_path+0xd2>
 800b06c:	2305      	movs	r3, #5
 800b06e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b070:	e01f      	b.n	800b0b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d11c      	bne.n	800b0b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	799b      	ldrb	r3, [r3, #6]
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b00      	cmp	r3, #0
 800b086:	d102      	bne.n	800b08e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b088:	2305      	movs	r3, #5
 800b08a:	75fb      	strb	r3, [r7, #23]
 800b08c:	e014      	b.n	800b0b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09c:	4413      	add	r3, r2
 800b09e:	4619      	mov	r1, r3
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff fe43 	bl	800ad2c <ld_clust>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0ac:	e7c0      	b.n	800b030 <follow_path+0x50>
			if (res != FR_OK) break;
 800b0ae:	bf00      	nop
 800b0b0:	e002      	b.n	800b0b8 <follow_path+0xd8>
				break;
 800b0b2:	bf00      	nop
 800b0b4:	e000      	b.n	800b0b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0b6:	bf00      	nop
			}
		}
	}

	return res;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b087      	sub	sp, #28
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d031      	beq.n	800b13c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	617b      	str	r3, [r7, #20]
 800b0de:	e002      	b.n	800b0e6 <get_ldnumber+0x24>
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	617b      	str	r3, [r7, #20]
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	d903      	bls.n	800b0f6 <get_ldnumber+0x34>
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0f4:	d1f4      	bne.n	800b0e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0fc:	d11c      	bne.n	800b138 <get_ldnumber+0x76>
			tp = *path;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	60fa      	str	r2, [r7, #12]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	3b30      	subs	r3, #48	@ 0x30
 800b10e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2b09      	cmp	r3, #9
 800b114:	d80e      	bhi.n	800b134 <get_ldnumber+0x72>
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d10a      	bne.n	800b134 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d107      	bne.n	800b134 <get_ldnumber+0x72>
					vol = (int)i;
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	3301      	adds	r3, #1
 800b12c:	617b      	str	r3, [r7, #20]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	e002      	b.n	800b13e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b138:	2300      	movs	r3, #0
 800b13a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b13c:	693b      	ldr	r3, [r7, #16]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
	...

0800b14c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	70da      	strb	r2, [r3, #3]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b162:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff f8dc 	bl	800a324 <move_window>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <check_fs+0x2a>
 800b172:	2304      	movs	r3, #4
 800b174:	e038      	b.n	800b1e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3330      	adds	r3, #48	@ 0x30
 800b17a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fe1e 	bl	8009dc0 <ld_word>
 800b184:	4603      	mov	r3, r0
 800b186:	461a      	mov	r2, r3
 800b188:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d001      	beq.n	800b194 <check_fs+0x48>
 800b190:	2303      	movs	r3, #3
 800b192:	e029      	b.n	800b1e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b19a:	2be9      	cmp	r3, #233	@ 0xe9
 800b19c:	d009      	beq.n	800b1b2 <check_fs+0x66>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b1a4:	2beb      	cmp	r3, #235	@ 0xeb
 800b1a6:	d11e      	bne.n	800b1e6 <check_fs+0x9a>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b1ae:	2b90      	cmp	r3, #144	@ 0x90
 800b1b0:	d119      	bne.n	800b1e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3330      	adds	r3, #48	@ 0x30
 800b1b6:	3336      	adds	r3, #54	@ 0x36
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fe1a 	bl	8009df2 <ld_dword>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b1c4:	4a0a      	ldr	r2, [pc, #40]	@ (800b1f0 <check_fs+0xa4>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d101      	bne.n	800b1ce <check_fs+0x82>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e00c      	b.n	800b1e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3330      	adds	r3, #48	@ 0x30
 800b1d2:	3352      	adds	r3, #82	@ 0x52
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fe0c 	bl	8009df2 <ld_dword>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	4a05      	ldr	r2, [pc, #20]	@ (800b1f4 <check_fs+0xa8>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d101      	bne.n	800b1e6 <check_fs+0x9a>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e000      	b.n	800b1e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1e6:	2302      	movs	r3, #2
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	00544146 	.word	0x00544146
 800b1f4:	33544146 	.word	0x33544146

0800b1f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b096      	sub	sp, #88	@ 0x58
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff ff58 	bl	800b0c2 <get_ldnumber>
 800b212:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b216:	2b00      	cmp	r3, #0
 800b218:	da01      	bge.n	800b21e <find_volume+0x26>
 800b21a:	230b      	movs	r3, #11
 800b21c:	e22d      	b.n	800b67a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b21e:	4aa1      	ldr	r2, [pc, #644]	@ (800b4a4 <find_volume+0x2ac>)
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b226:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <find_volume+0x3a>
 800b22e:	230c      	movs	r3, #12
 800b230:	e223      	b.n	800b67a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b236:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b238:	79fb      	ldrb	r3, [r7, #7]
 800b23a:	f023 0301 	bic.w	r3, r3, #1
 800b23e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d01a      	beq.n	800b27e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	785b      	ldrb	r3, [r3, #1]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fd19 	bl	8009c84 <disk_status>
 800b252:	4603      	mov	r3, r0
 800b254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10c      	bne.n	800b27e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <find_volume+0x82>
 800b26a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b26e:	f003 0304 	and.w	r3, r3, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b276:	230a      	movs	r3, #10
 800b278:	e1ff      	b.n	800b67a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b27a:	2300      	movs	r3, #0
 800b27c:	e1fd      	b.n	800b67a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b280:	2200      	movs	r2, #0
 800b282:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b286:	b2da      	uxtb	r2, r3
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fd11 	bl	8009cb8 <disk_initialize>
 800b296:	4603      	mov	r3, r0
 800b298:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b29c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e1e6      	b.n	800b67a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b2ac:	79fb      	ldrb	r3, [r7, #7]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d007      	beq.n	800b2c2 <find_volume+0xca>
 800b2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b2be:	230a      	movs	r3, #10
 800b2c0:	e1db      	b.n	800b67a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b2c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2ca:	f7ff ff3f 	bl	800b14c <check_fs>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d149      	bne.n	800b370 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2dc:	2300      	movs	r3, #0
 800b2de:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2e0:	e01e      	b.n	800b320 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b2f0:	4413      	add	r3, r2
 800b2f2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d006      	beq.n	800b30c <find_volume+0x114>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	3308      	adds	r3, #8
 800b302:	4618      	mov	r0, r3
 800b304:	f7fe fd75 	bl	8009df2 <ld_dword>
 800b308:	4602      	mov	r2, r0
 800b30a:	e000      	b.n	800b30e <find_volume+0x116>
 800b30c:	2200      	movs	r2, #0
 800b30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	3358      	adds	r3, #88	@ 0x58
 800b314:	443b      	add	r3, r7
 800b316:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b31c:	3301      	adds	r3, #1
 800b31e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b322:	2b03      	cmp	r3, #3
 800b324:	d9dd      	bls.n	800b2e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b326:	2300      	movs	r3, #0
 800b328:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b32a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <find_volume+0x13e>
 800b330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b332:	3b01      	subs	r3, #1
 800b334:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	3358      	adds	r3, #88	@ 0x58
 800b33c:	443b      	add	r3, r7
 800b33e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b342:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b346:	2b00      	cmp	r3, #0
 800b348:	d005      	beq.n	800b356 <find_volume+0x15e>
 800b34a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b34c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b34e:	f7ff fefd 	bl	800b14c <check_fs>
 800b352:	4603      	mov	r3, r0
 800b354:	e000      	b.n	800b358 <find_volume+0x160>
 800b356:	2303      	movs	r3, #3
 800b358:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b35c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b360:	2b01      	cmp	r3, #1
 800b362:	d905      	bls.n	800b370 <find_volume+0x178>
 800b364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b366:	3301      	adds	r3, #1
 800b368:	643b      	str	r3, [r7, #64]	@ 0x40
 800b36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d9e2      	bls.n	800b336 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b374:	2b04      	cmp	r3, #4
 800b376:	d101      	bne.n	800b37c <find_volume+0x184>
 800b378:	2301      	movs	r3, #1
 800b37a:	e17e      	b.n	800b67a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b37c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b380:	2b01      	cmp	r3, #1
 800b382:	d901      	bls.n	800b388 <find_volume+0x190>
 800b384:	230d      	movs	r3, #13
 800b386:	e178      	b.n	800b67a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	3330      	adds	r3, #48	@ 0x30
 800b38c:	330b      	adds	r3, #11
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fd16 	bl	8009dc0 <ld_word>
 800b394:	4603      	mov	r3, r0
 800b396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b39a:	d001      	beq.n	800b3a0 <find_volume+0x1a8>
 800b39c:	230d      	movs	r3, #13
 800b39e:	e16c      	b.n	800b67a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	3330      	adds	r3, #48	@ 0x30
 800b3a4:	3316      	adds	r3, #22
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fd0a 	bl	8009dc0 <ld_word>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <find_volume+0x1cc>
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	3330      	adds	r3, #48	@ 0x30
 800b3ba:	3324      	adds	r3, #36	@ 0x24
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fe fd18 	bl	8009df2 <ld_dword>
 800b3c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3cc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d6:	789b      	ldrb	r3, [r3, #2]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d005      	beq.n	800b3e8 <find_volume+0x1f0>
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3de:	789b      	ldrb	r3, [r3, #2]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d001      	beq.n	800b3e8 <find_volume+0x1f0>
 800b3e4:	230d      	movs	r3, #13
 800b3e6:	e148      	b.n	800b67a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ea:	789b      	ldrb	r3, [r3, #2]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3f0:	fb02 f303 	mul.w	r3, r2, r3
 800b3f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b400:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	895b      	ldrh	r3, [r3, #10]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d008      	beq.n	800b41c <find_volume+0x224>
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	895b      	ldrh	r3, [r3, #10]
 800b40e:	461a      	mov	r2, r3
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	895b      	ldrh	r3, [r3, #10]
 800b414:	3b01      	subs	r3, #1
 800b416:	4013      	ands	r3, r2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <find_volume+0x228>
 800b41c:	230d      	movs	r3, #13
 800b41e:	e12c      	b.n	800b67a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b422:	3330      	adds	r3, #48	@ 0x30
 800b424:	3311      	adds	r3, #17
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fcca 	bl	8009dc0 <ld_word>
 800b42c:	4603      	mov	r3, r0
 800b42e:	461a      	mov	r2, r3
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	891b      	ldrh	r3, [r3, #8]
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <find_volume+0x24e>
 800b442:	230d      	movs	r3, #13
 800b444:	e119      	b.n	800b67a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	3330      	adds	r3, #48	@ 0x30
 800b44a:	3313      	adds	r3, #19
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fcb7 	bl	8009dc0 <ld_word>
 800b452:	4603      	mov	r3, r0
 800b454:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <find_volume+0x272>
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	3330      	adds	r3, #48	@ 0x30
 800b460:	3320      	adds	r3, #32
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fcc5 	bl	8009df2 <ld_dword>
 800b468:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	3330      	adds	r3, #48	@ 0x30
 800b46e:	330e      	adds	r3, #14
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe fca5 	bl	8009dc0 <ld_word>
 800b476:	4603      	mov	r3, r0
 800b478:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b47a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <find_volume+0x28c>
 800b480:	230d      	movs	r3, #13
 800b482:	e0fa      	b.n	800b67a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b484:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b488:	4413      	add	r3, r2
 800b48a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b48c:	8912      	ldrh	r2, [r2, #8]
 800b48e:	0912      	lsrs	r2, r2, #4
 800b490:	b292      	uxth	r2, r2
 800b492:	4413      	add	r3, r2
 800b494:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d204      	bcs.n	800b4a8 <find_volume+0x2b0>
 800b49e:	230d      	movs	r3, #13
 800b4a0:	e0eb      	b.n	800b67a <find_volume+0x482>
 800b4a2:	bf00      	nop
 800b4a4:	20000b44 	.word	0x20000b44
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4b0:	8952      	ldrh	r2, [r2, #10]
 800b4b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <find_volume+0x2ca>
 800b4be:	230d      	movs	r3, #13
 800b4c0:	e0db      	b.n	800b67a <find_volume+0x482>
		fmt = FS_FAT32;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ca:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d802      	bhi.n	800b4d8 <find_volume+0x2e0>
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4da:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d802      	bhi.n	800b4e8 <find_volume+0x2f0>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	1c9a      	adds	r2, r3, #2
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4fa:	441a      	add	r2, r3
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b500:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b504:	441a      	add	r2, r3
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b50a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d11e      	bne.n	800b550 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b514:	3330      	adds	r3, #48	@ 0x30
 800b516:	332a      	adds	r3, #42	@ 0x2a
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fc51 	bl	8009dc0 <ld_word>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <find_volume+0x330>
 800b524:	230d      	movs	r3, #13
 800b526:	e0a8      	b.n	800b67a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52a:	891b      	ldrh	r3, [r3, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <find_volume+0x33c>
 800b530:	230d      	movs	r3, #13
 800b532:	e0a2      	b.n	800b67a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b536:	3330      	adds	r3, #48	@ 0x30
 800b538:	332c      	adds	r3, #44	@ 0x2c
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fc59 	bl	8009df2 <ld_dword>
 800b540:	4602      	mov	r2, r0
 800b542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b544:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b54e:	e01f      	b.n	800b590 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	891b      	ldrh	r3, [r3, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <find_volume+0x364>
 800b558:	230d      	movs	r3, #13
 800b55a:	e08e      	b.n	800b67a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55e:	6a1a      	ldr	r2, [r3, #32]
 800b560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b562:	441a      	add	r2, r3
 800b564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b566:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d103      	bne.n	800b578 <find_volume+0x380>
 800b570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	e00a      	b.n	800b58e <find_volume+0x396>
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	695a      	ldr	r2, [r3, #20]
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	4413      	add	r3, r2
 800b582:	085a      	lsrs	r2, r3, #1
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b58e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b596:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b59a:	0a5b      	lsrs	r3, r3, #9
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d201      	bcs.n	800b5a4 <find_volume+0x3ac>
 800b5a0:	230d      	movs	r3, #13
 800b5a2:	e06a      	b.n	800b67a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5aa:	611a      	str	r2, [r3, #16]
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ae:	691a      	ldr	r2, [r3, #16]
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b6:	2280      	movs	r2, #128	@ 0x80
 800b5b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b5ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d149      	bne.n	800b656 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	3330      	adds	r3, #48	@ 0x30
 800b5c6:	3330      	adds	r3, #48	@ 0x30
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fbf9 	bl	8009dc0 <ld_word>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d140      	bne.n	800b656 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5dc:	f7fe fea2 	bl	800a324 <move_window>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d137      	bne.n	800b656 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ee:	3330      	adds	r3, #48	@ 0x30
 800b5f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fe fbe3 	bl	8009dc0 <ld_word>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b602:	429a      	cmp	r2, r3
 800b604:	d127      	bne.n	800b656 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b608:	3330      	adds	r3, #48	@ 0x30
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe fbf1 	bl	8009df2 <ld_dword>
 800b610:	4603      	mov	r3, r0
 800b612:	4a1c      	ldr	r2, [pc, #112]	@ (800b684 <find_volume+0x48c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d11e      	bne.n	800b656 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	3330      	adds	r3, #48	@ 0x30
 800b61c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fbe6 	bl	8009df2 <ld_dword>
 800b626:	4603      	mov	r3, r0
 800b628:	4a17      	ldr	r2, [pc, #92]	@ (800b688 <find_volume+0x490>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d113      	bne.n	800b656 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	3330      	adds	r3, #48	@ 0x30
 800b632:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe fbdb 	bl	8009df2 <ld_dword>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b640:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b644:	3330      	adds	r3, #48	@ 0x30
 800b646:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fbd1 	bl	8009df2 <ld_dword>
 800b650:	4602      	mov	r2, r0
 800b652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b654:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b65c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b65e:	4b0b      	ldr	r3, [pc, #44]	@ (800b68c <find_volume+0x494>)
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	b29a      	uxth	r2, r3
 800b666:	4b09      	ldr	r3, [pc, #36]	@ (800b68c <find_volume+0x494>)
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	4b08      	ldr	r3, [pc, #32]	@ (800b68c <find_volume+0x494>)
 800b66c:	881a      	ldrh	r2, [r3, #0]
 800b66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b670:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b672:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b674:	f7fe fdee 	bl	800a254 <clear_lock>
#endif
	return FR_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3758      	adds	r7, #88	@ 0x58
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	41615252 	.word	0x41615252
 800b688:	61417272 	.word	0x61417272
 800b68c:	20000b48 	.word	0x20000b48

0800b690 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b69a:	2309      	movs	r3, #9
 800b69c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01c      	beq.n	800b6de <validate+0x4e>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d018      	beq.n	800b6de <validate+0x4e>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d013      	beq.n	800b6de <validate+0x4e>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	889a      	ldrh	r2, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	88db      	ldrh	r3, [r3, #6]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d10c      	bne.n	800b6de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fada 	bl	8009c84 <disk_status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <validate+0x4e>
			res = FR_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <validate+0x5a>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	e000      	b.n	800b6ec <validate+0x5c>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	6013      	str	r3, [r2, #0]
	return res;
 800b6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4613      	mov	r3, r2
 800b708:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b70e:	f107 0310 	add.w	r3, r7, #16
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fcd5 	bl	800b0c2 <get_ldnumber>
 800b718:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da01      	bge.n	800b724 <f_mount+0x28>
 800b720:	230b      	movs	r3, #11
 800b722:	e02b      	b.n	800b77c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b724:	4a17      	ldr	r2, [pc, #92]	@ (800b784 <f_mount+0x88>)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b734:	69b8      	ldr	r0, [r7, #24]
 800b736:	f7fe fd8d 	bl	800a254 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	490d      	ldr	r1, [pc, #52]	@ (800b784 <f_mount+0x88>)
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <f_mount+0x66>
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d001      	beq.n	800b766 <f_mount+0x6a>
 800b762:	2300      	movs	r3, #0
 800b764:	e00a      	b.n	800b77c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b766:	f107 010c 	add.w	r1, r7, #12
 800b76a:	f107 0308 	add.w	r3, r7, #8
 800b76e:	2200      	movs	r2, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f7ff fd41 	bl	800b1f8 <find_volume>
 800b776:	4603      	mov	r3, r0
 800b778:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3720      	adds	r7, #32
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000b44 	.word	0x20000b44

0800b788 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b098      	sub	sp, #96	@ 0x60
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	4613      	mov	r3, r2
 800b794:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <f_open+0x18>
 800b79c:	2309      	movs	r3, #9
 800b79e:	e1a9      	b.n	800baf4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7a8:	79fa      	ldrb	r2, [r7, #7]
 800b7aa:	f107 0110 	add.w	r1, r7, #16
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff fd20 	bl	800b1f8 <find_volume>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b7be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f040 818d 	bne.w	800bae2 <f_open+0x35a>
		dj.obj.fs = fs;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	f107 0314 	add.w	r3, r7, #20
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff fc03 	bl	800afe0 <follow_path>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d118      	bne.n	800b81a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b7ec:	b25b      	sxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da03      	bge.n	800b7fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800b7f2:	2306      	movs	r3, #6
 800b7f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b7f8:	e00f      	b.n	800b81a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	bf8c      	ite	hi
 800b800:	2301      	movhi	r3, #1
 800b802:	2300      	movls	r3, #0
 800b804:	b2db      	uxtb	r3, r3
 800b806:	461a      	mov	r2, r3
 800b808:	f107 0314 	add.w	r3, r7, #20
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fbd8 	bl	8009fc4 <chk_lock>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	f003 031c 	and.w	r3, r3, #28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d07f      	beq.n	800b924 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b824:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d017      	beq.n	800b85c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b82c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b830:	2b04      	cmp	r3, #4
 800b832:	d10e      	bne.n	800b852 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b834:	f7fe fc22 	bl	800a07c <enq_lock>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <f_open+0xc4>
 800b83e:	f107 0314 	add.w	r3, r7, #20
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fb06 	bl	800ae54 <dir_register>
 800b848:	4603      	mov	r3, r0
 800b84a:	e000      	b.n	800b84e <f_open+0xc6>
 800b84c:	2312      	movs	r3, #18
 800b84e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	f043 0308 	orr.w	r3, r3, #8
 800b858:	71fb      	strb	r3, [r7, #7]
 800b85a:	e010      	b.n	800b87e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b85c:	7ebb      	ldrb	r3, [r7, #26]
 800b85e:	f003 0311 	and.w	r3, r3, #17
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <f_open+0xe6>
					res = FR_DENIED;
 800b866:	2307      	movs	r3, #7
 800b868:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b86c:	e007      	b.n	800b87e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	f003 0304 	and.w	r3, r3, #4
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <f_open+0xf6>
 800b878:	2308      	movs	r3, #8
 800b87a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b87e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b882:	2b00      	cmp	r3, #0
 800b884:	d168      	bne.n	800b958 <f_open+0x1d0>
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d063      	beq.n	800b958 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b890:	f7fd fcbc 	bl	800920c <get_fattime>
 800b894:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b898:	330e      	adds	r3, #14
 800b89a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fae6 	bl	8009e6e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a4:	3316      	adds	r3, #22
 800b8a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fae0 	bl	8009e6e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	330b      	adds	r3, #11
 800b8b2:	2220      	movs	r2, #32
 800b8b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff fa35 	bl	800ad2c <ld_clust>
 800b8c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fa4d 	bl	800ad6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d2:	331c      	adds	r3, #28
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe fac9 	bl	8009e6e <st_dword>
					fs->wflag = 1;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b8e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d037      	beq.n	800b958 <f_open+0x1d0>
						dw = fs->winsect;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b8ee:	f107 0314 	add.w	r3, r7, #20
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe ff60 	bl	800a7bc <remove_chain>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b902:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b906:	2b00      	cmp	r3, #0
 800b908:	d126      	bne.n	800b958 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fd08 	bl	800a324 <move_window>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b91e:	3a01      	subs	r2, #1
 800b920:	60da      	str	r2, [r3, #12]
 800b922:	e019      	b.n	800b958 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d115      	bne.n	800b958 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b92c:	7ebb      	ldrb	r3, [r7, #26]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <f_open+0x1b6>
					res = FR_NO_FILE;
 800b936:	2304      	movs	r3, #4
 800b938:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b93c:	e00c      	b.n	800b958 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	f003 0302 	and.w	r3, r3, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d007      	beq.n	800b958 <f_open+0x1d0>
 800b948:	7ebb      	ldrb	r3, [r7, #26]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <f_open+0x1d0>
						res = FR_DENIED;
 800b952:	2307      	movs	r3, #7
 800b954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b958:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d126      	bne.n	800b9ae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	f003 0308 	and.w	r3, r3, #8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b96a:	79fb      	ldrb	r3, [r7, #7]
 800b96c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b970:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b97a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	2b01      	cmp	r3, #1
 800b984:	bf8c      	ite	hi
 800b986:	2301      	movhi	r3, #1
 800b988:	2300      	movls	r3, #0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	f107 0314 	add.w	r3, r7, #20
 800b992:	4611      	mov	r1, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f7fe fb93 	bl	800a0c0 <inc_lock>
 800b99a:	4602      	mov	r2, r0
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <f_open+0x226>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 8095 	bne.w	800bae2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9bc:	4611      	mov	r1, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff f9b4 	bl	800ad2c <ld_clust>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9cc:	331c      	adds	r3, #28
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fa0f 	bl	8009df2 <ld_dword>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	88da      	ldrh	r2, [r3, #6]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	79fa      	ldrb	r2, [r7, #7]
 800b9f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3330      	adds	r3, #48	@ 0x30
 800ba0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fa79 	bl	8009f08 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	f003 0320 	and.w	r3, r3, #32
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d060      	beq.n	800bae2 <f_open+0x35a>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d05c      	beq.n	800bae2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	68da      	ldr	r2, [r3, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	895b      	ldrh	r3, [r3, #10]
 800ba34:	025b      	lsls	r3, r3, #9
 800ba36:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba44:	e016      	b.n	800ba74 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe fd25 	bl	800a49a <get_fat>
 800ba50:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d802      	bhi.n	800ba5e <f_open+0x2d6>
 800ba58:	2302      	movs	r3, #2
 800ba5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba64:	d102      	bne.n	800ba6c <f_open+0x2e4>
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d103      	bne.n	800ba84 <f_open+0x2fc>
 800ba7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d8e0      	bhi.n	800ba46 <f_open+0x2be>
				}
				fp->clust = clst;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d127      	bne.n	800bae2 <f_open+0x35a>
 800ba92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d022      	beq.n	800bae2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe fcdb 	bl	800a45c <clust2sect>
 800baa6:	6478      	str	r0, [r7, #68]	@ 0x44
 800baa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d103      	bne.n	800bab6 <f_open+0x32e>
						res = FR_INT_ERR;
 800baae:	2302      	movs	r3, #2
 800bab0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bab4:	e015      	b.n	800bae2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab8:	0a5a      	lsrs	r2, r3, #9
 800baba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800babc:	441a      	add	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	7858      	ldrb	r0, [r3, #1]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6a1a      	ldr	r2, [r3, #32]
 800bad0:	2301      	movs	r3, #1
 800bad2:	f7fe f917 	bl	8009d04 <disk_read>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <f_open+0x35a>
 800badc:	2301      	movs	r3, #1
 800bade:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d002      	beq.n	800baf0 <f_open+0x368>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800baf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3760      	adds	r7, #96	@ 0x60
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08c      	sub	sp, #48	@ 0x30
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f107 0210 	add.w	r2, r7, #16
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fdb7 	bl	800b690 <validate>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d107      	bne.n	800bb40 <f_write+0x44>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	7d5b      	ldrb	r3, [r3, #21]
 800bb34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bb38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <f_write+0x4a>
 800bb40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb44:	e14b      	b.n	800bdde <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	7d1b      	ldrb	r3, [r3, #20]
 800bb4a:	f003 0302 	and.w	r3, r3, #2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <f_write+0x5a>
 800bb52:	2307      	movs	r3, #7
 800bb54:	e143      	b.n	800bdde <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	699a      	ldr	r2, [r3, #24]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	f080 812d 	bcs.w	800bdc2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	699b      	ldr	r3, [r3, #24]
 800bb6c:	43db      	mvns	r3, r3
 800bb6e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bb70:	e127      	b.n	800bdc2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f040 80e3 	bne.w	800bd46 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	0a5b      	lsrs	r3, r3, #9
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	8952      	ldrh	r2, [r2, #10]
 800bb8a:	3a01      	subs	r2, #1
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d143      	bne.n	800bc1e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d11a      	bne.n	800bbe0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2100      	movs	r1, #0
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fe69 	bl	800a886 <create_chain>
 800bbb4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bbb6:	e013      	b.n	800bbe0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f7fe fef5 	bl	800a9b6 <clmt_clust>
 800bbcc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bbce:	e007      	b.n	800bbe0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4610      	mov	r0, r2
 800bbda:	f7fe fe54 	bl	800a886 <create_chain>
 800bbde:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f000 80f2 	beq.w	800bdcc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d104      	bne.n	800bbf8 <f_write+0xfc>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	755a      	strb	r2, [r3, #21]
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e0f2      	b.n	800bdde <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbfe:	d104      	bne.n	800bc0a <f_write+0x10e>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2201      	movs	r2, #1
 800bc04:	755a      	strb	r2, [r3, #21]
 800bc06:	2301      	movs	r3, #1
 800bc08:	e0e9      	b.n	800bdde <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc0e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d102      	bne.n	800bc1e <f_write+0x122>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc1c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	7d1b      	ldrb	r3, [r3, #20]
 800bc22:	b25b      	sxtb	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	da18      	bge.n	800bc5a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	7858      	ldrb	r0, [r3, #1]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6a1a      	ldr	r2, [r3, #32]
 800bc36:	2301      	movs	r3, #1
 800bc38:	f7fe f884 	bl	8009d44 <disk_write>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d004      	beq.n	800bc4c <f_write+0x150>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2201      	movs	r2, #1
 800bc46:	755a      	strb	r2, [r3, #21]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e0c8      	b.n	800bdde <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	7d1b      	ldrb	r3, [r3, #20]
 800bc50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7fe fbfa 	bl	800a45c <clust2sect>
 800bc68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d104      	bne.n	800bc7a <f_write+0x17e>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2202      	movs	r2, #2
 800bc74:	755a      	strb	r2, [r3, #21]
 800bc76:	2302      	movs	r3, #2
 800bc78:	e0b1      	b.n	800bdde <f_write+0x2e2>
			sect += csect;
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	4413      	add	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	0a5b      	lsrs	r3, r3, #9
 800bc86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d03c      	beq.n	800bd08 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	4413      	add	r3, r2
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	8952      	ldrh	r2, [r2, #10]
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d905      	bls.n	800bca8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	895b      	ldrh	r3, [r3, #10]
 800bca0:	461a      	mov	r2, r3
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	7858      	ldrb	r0, [r3, #1]
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	69f9      	ldr	r1, [r7, #28]
 800bcb2:	f7fe f847 	bl	8009d44 <disk_write>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <f_write+0x1ca>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	755a      	strb	r2, [r3, #21]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e08b      	b.n	800bdde <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6a1a      	ldr	r2, [r3, #32]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	6a3a      	ldr	r2, [r7, #32]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d915      	bls.n	800bd00 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a1a      	ldr	r2, [r3, #32]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	025b      	lsls	r3, r3, #9
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcec:	4619      	mov	r1, r3
 800bcee:	f7fe f8ea 	bl	8009ec6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	7d1b      	ldrb	r3, [r3, #20]
 800bcf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	025b      	lsls	r3, r3, #9
 800bd04:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bd06:	e03f      	b.n	800bd88 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a1b      	ldr	r3, [r3, #32]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d016      	beq.n	800bd40 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	699a      	ldr	r2, [r3, #24]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d210      	bcs.n	800bd40 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	7858      	ldrb	r0, [r3, #1]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd28:	2301      	movs	r3, #1
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	f7fd ffea 	bl	8009d04 <disk_read>
 800bd30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	755a      	strb	r2, [r3, #21]
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e04e      	b.n	800bdde <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bd52:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d901      	bls.n	800bd60 <f_write+0x264>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6e:	4413      	add	r3, r2
 800bd70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd72:	69f9      	ldr	r1, [r7, #28]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe f8a6 	bl	8009ec6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	7d1b      	ldrb	r3, [r3, #20]
 800bd7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bd88:	69fa      	ldr	r2, [r7, #28]
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	441a      	add	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	619a      	str	r2, [r3, #24]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	bf38      	it	cc
 800bda8:	461a      	movcc	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	60da      	str	r2, [r3, #12]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb4:	441a      	add	r2, r3
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f aed4 	bne.w	800bb72 <f_write+0x76>
 800bdca:	e000      	b.n	800bdce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bdcc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	7d1b      	ldrb	r3, [r3, #20]
 800bdd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3730      	adds	r7, #48	@ 0x30
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f107 0208 	add.w	r2, r7, #8
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fc4a 	bl	800b690 <validate>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d168      	bne.n	800bed8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	7d1b      	ldrb	r3, [r3, #20]
 800be0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d062      	beq.n	800bed8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7d1b      	ldrb	r3, [r3, #20]
 800be16:	b25b      	sxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da15      	bge.n	800be48 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	7858      	ldrb	r0, [r3, #1]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1a      	ldr	r2, [r3, #32]
 800be2a:	2301      	movs	r3, #1
 800be2c:	f7fd ff8a 	bl	8009d44 <disk_write>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <f_sync+0x54>
 800be36:	2301      	movs	r3, #1
 800be38:	e04f      	b.n	800beda <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	7d1b      	ldrb	r3, [r3, #20]
 800be3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be42:	b2da      	uxtb	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be48:	f7fd f9e0 	bl	800920c <get_fattime>
 800be4c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be54:	4619      	mov	r1, r3
 800be56:	4610      	mov	r0, r2
 800be58:	f7fe fa64 	bl	800a324 <move_window>
 800be5c:	4603      	mov	r3, r0
 800be5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be60:	7dfb      	ldrb	r3, [r7, #23]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d138      	bne.n	800bed8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	330b      	adds	r3, #11
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	330b      	adds	r3, #11
 800be76:	f042 0220 	orr.w	r2, r2, #32
 800be7a:	b2d2      	uxtb	r2, r2
 800be7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	461a      	mov	r2, r3
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	f7fe ff6e 	bl	800ad6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f103 021c 	add.w	r2, r3, #28
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	4619      	mov	r1, r3
 800be9a:	4610      	mov	r0, r2
 800be9c:	f7fd ffe7 	bl	8009e6e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	3316      	adds	r3, #22
 800bea4:	6939      	ldr	r1, [r7, #16]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fd ffe1 	bl	8009e6e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3312      	adds	r3, #18
 800beb0:	2100      	movs	r1, #0
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fd ffc0 	bl	8009e38 <st_word>
					fs->wflag = 1;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2201      	movs	r2, #1
 800bebc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fa5d 	bl	800a380 <sync_fs>
 800bec6:	4603      	mov	r3, r0
 800bec8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7d1b      	ldrb	r3, [r3, #20]
 800bece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff ff7b 	bl	800bde6 <f_sync>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d118      	bne.n	800bf2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f107 0208 	add.w	r2, r7, #8
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fbc4 	bl	800b690 <validate>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf0c:	7bfb      	ldrb	r3, [r7, #15]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10c      	bne.n	800bf2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe f960 	bl	800a1dc <dec_lock>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b090      	sub	sp, #64	@ 0x40
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f107 0208 	add.w	r2, r7, #8
 800bf46:	4611      	mov	r1, r2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fba1 	bl	800b690 <validate>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bf54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d103      	bne.n	800bf64 <f_lseek+0x2e>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7d5b      	ldrb	r3, [r3, #21]
 800bf60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bf64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <f_lseek+0x3c>
 800bf6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf70:	e1e6      	b.n	800c340 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 80d1 	beq.w	800c11e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf82:	d15a      	bne.n	800c03a <f_lseek+0x104>
			tbl = fp->cltbl;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8c:	1d1a      	adds	r2, r3, #4
 800bf8e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	2302      	movs	r3, #2
 800bf96:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d03a      	beq.n	800c01a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa6:	613b      	str	r3, [r7, #16]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	3302      	adds	r3, #2
 800bfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	3301      	adds	r3, #1
 800bfba:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fa6a 	bl	800a49a <get_fat>
 800bfc6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d804      	bhi.n	800bfd8 <f_lseek+0xa2>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	755a      	strb	r2, [r3, #21]
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e1b3      	b.n	800c340 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfde:	d104      	bne.n	800bfea <f_lseek+0xb4>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	755a      	strb	r2, [r3, #21]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e1aa      	b.n	800c340 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3301      	adds	r3, #1
 800bfee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d0de      	beq.n	800bfb2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d809      	bhi.n	800c010 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	1d1a      	adds	r2, r3, #4
 800c000:	627a      	str	r2, [r7, #36]	@ 0x24
 800c002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	1d1a      	adds	r2, r3, #4
 800c00a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c016:	429a      	cmp	r2, r3
 800c018:	d3c4      	bcc.n	800bfa4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c020:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	429a      	cmp	r2, r3
 800c028:	d803      	bhi.n	800c032 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e184      	b.n	800c33c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c032:	2311      	movs	r3, #17
 800c034:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c038:	e180      	b.n	800c33c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d902      	bls.n	800c04a <f_lseek+0x114>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 8172 	beq.w	800c33c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	4619      	mov	r1, r3
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7fe fca9 	bl	800a9b6 <clmt_clust>
 800c064:	4602      	mov	r2, r0
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f7fe f9f2 	bl	800a45c <clust2sect>
 800c078:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <f_lseek+0x154>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	755a      	strb	r2, [r3, #21]
 800c086:	2302      	movs	r3, #2
 800c088:	e15a      	b.n	800c340 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	0a5b      	lsrs	r3, r3, #9
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	8952      	ldrh	r2, [r2, #10]
 800c094:	3a01      	subs	r2, #1
 800c096:	4013      	ands	r3, r2
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	4413      	add	r3, r2
 800c09c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 8148 	beq.w	800c33c <f_lseek+0x406>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a1b      	ldr	r3, [r3, #32]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f000 8142 	beq.w	800c33c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7d1b      	ldrb	r3, [r3, #20]
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da18      	bge.n	800c0f4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	7858      	ldrb	r0, [r3, #1]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6a1a      	ldr	r2, [r3, #32]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f7fd fe37 	bl	8009d44 <disk_write>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <f_lseek+0x1b0>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	755a      	strb	r2, [r3, #21]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e12c      	b.n	800c340 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	7858      	ldrb	r0, [r3, #1]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0fe:	2301      	movs	r3, #1
 800c100:	69ba      	ldr	r2, [r7, #24]
 800c102:	f7fd fdff 	bl	8009d04 <disk_read>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d004      	beq.n	800c116 <f_lseek+0x1e0>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	755a      	strb	r2, [r3, #21]
 800c112:	2301      	movs	r3, #1
 800c114:	e114      	b.n	800c340 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	69ba      	ldr	r2, [r7, #24]
 800c11a:	621a      	str	r2, [r3, #32]
 800c11c:	e10e      	b.n	800c33c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d908      	bls.n	800c13a <f_lseek+0x204>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7d1b      	ldrb	r3, [r3, #20]
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d102      	bne.n	800c13a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	637b      	str	r3, [r7, #52]	@ 0x34
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c148:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 80a7 	beq.w	800c2a0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	895b      	ldrh	r3, [r3, #10]
 800c156:	025b      	lsls	r3, r3, #9
 800c158:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01b      	beq.n	800c198 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	1e5a      	subs	r2, r3, #1
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	fbb2 f2f3 	udiv	r2, r2, r3
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	1e59      	subs	r1, r3, #1
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c174:	429a      	cmp	r2, r3
 800c176:	d30f      	bcc.n	800c198 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	1e5a      	subs	r2, r3, #1
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	425b      	negs	r3, r3
 800c180:	401a      	ands	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c196:	e022      	b.n	800c1de <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d119      	bne.n	800c1d8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fb6c 	bl	800a886 <create_chain>
 800c1ae:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d104      	bne.n	800c1c0 <f_lseek+0x28a>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	755a      	strb	r2, [r3, #21]
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e0bf      	b.n	800c340 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1c6:	d104      	bne.n	800c1d2 <f_lseek+0x29c>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	755a      	strb	r2, [r3, #21]
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e0b6      	b.n	800c340 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d05d      	beq.n	800c2a0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c1e4:	e03a      	b.n	800c25c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	603b      	str	r3, [r7, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	441a      	add	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	7d1b      	ldrb	r3, [r3, #20]
 800c1fe:	f003 0302 	and.w	r3, r3, #2
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00b      	beq.n	800c21e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fb3b 	bl	800a886 <create_chain>
 800c210:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c214:	2b00      	cmp	r3, #0
 800c216:	d108      	bne.n	800c22a <f_lseek+0x2f4>
							ofs = 0; break;
 800c218:	2300      	movs	r3, #0
 800c21a:	603b      	str	r3, [r7, #0]
 800c21c:	e022      	b.n	800c264 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe f939 	bl	800a49a <get_fat>
 800c228:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c230:	d104      	bne.n	800c23c <f_lseek+0x306>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	755a      	strb	r2, [r3, #21]
 800c238:	2301      	movs	r3, #1
 800c23a:	e081      	b.n	800c340 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d904      	bls.n	800c24c <f_lseek+0x316>
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c248:	429a      	cmp	r2, r3
 800c24a:	d304      	bcc.n	800c256 <f_lseek+0x320>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	755a      	strb	r2, [r3, #21]
 800c252:	2302      	movs	r3, #2
 800c254:	e074      	b.n	800c340 <f_lseek+0x40a>
					fp->clust = clst;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c25a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	429a      	cmp	r2, r3
 800c262:	d8c0      	bhi.n	800c1e6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	699a      	ldr	r2, [r3, #24]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	441a      	add	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c276:	2b00      	cmp	r3, #0
 800c278:	d012      	beq.n	800c2a0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe f8ec 	bl	800a45c <clust2sect>
 800c284:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d104      	bne.n	800c296 <f_lseek+0x360>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2202      	movs	r2, #2
 800c290:	755a      	strb	r2, [r3, #21]
 800c292:	2302      	movs	r3, #2
 800c294:	e054      	b.n	800c340 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	0a5b      	lsrs	r3, r3, #9
 800c29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c29c:	4413      	add	r3, r2
 800c29e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	699a      	ldr	r2, [r3, #24]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d90a      	bls.n	800c2c2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	699a      	ldr	r2, [r3, #24]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7d1b      	ldrb	r3, [r3, #20]
 800c2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d036      	beq.n	800c33c <f_lseek+0x406>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d031      	beq.n	800c33c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7d1b      	ldrb	r3, [r3, #20]
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	da18      	bge.n	800c314 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	7858      	ldrb	r0, [r3, #1]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a1a      	ldr	r2, [r3, #32]
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	f7fd fd27 	bl	8009d44 <disk_write>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <f_lseek+0x3d0>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	755a      	strb	r2, [r3, #21]
 800c302:	2301      	movs	r3, #1
 800c304:	e01c      	b.n	800c340 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	7d1b      	ldrb	r3, [r3, #20]
 800c30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	7858      	ldrb	r0, [r3, #1]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c31e:	2301      	movs	r3, #1
 800c320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c322:	f7fd fcef 	bl	8009d04 <disk_read>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <f_lseek+0x400>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	755a      	strb	r2, [r3, #21]
 800c332:	2301      	movs	r3, #1
 800c334:	e004      	b.n	800c340 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c33a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c33c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c340:	4618      	mov	r0, r3
 800c342:	3740      	adds	r7, #64	@ 0x40
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	4613      	mov	r3, r2
 800c354:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c356:	2301      	movs	r3, #1
 800c358:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c35e:	4b1f      	ldr	r3, [pc, #124]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c360:	7a5b      	ldrb	r3, [r3, #9]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b00      	cmp	r3, #0
 800c366:	d131      	bne.n	800c3cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c368:	4b1c      	ldr	r3, [pc, #112]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c36a:	7a5b      	ldrb	r3, [r3, #9]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	461a      	mov	r2, r3
 800c370:	4b1a      	ldr	r3, [pc, #104]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c372:	2100      	movs	r1, #0
 800c374:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c376:	4b19      	ldr	r3, [pc, #100]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c378:	7a5b      	ldrb	r3, [r3, #9]
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	4a17      	ldr	r2, [pc, #92]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c386:	4b15      	ldr	r3, [pc, #84]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c388:	7a5b      	ldrb	r3, [r3, #9]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	461a      	mov	r2, r3
 800c38e:	4b13      	ldr	r3, [pc, #76]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c390:	4413      	add	r3, r2
 800c392:	79fa      	ldrb	r2, [r7, #7]
 800c394:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c396:	4b11      	ldr	r3, [pc, #68]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c398:	7a5b      	ldrb	r3, [r3, #9]
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	b2d1      	uxtb	r1, r2
 800c3a0:	4a0e      	ldr	r2, [pc, #56]	@ (800c3dc <FATFS_LinkDriverEx+0x94>)
 800c3a2:	7251      	strb	r1, [r2, #9]
 800c3a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3a6:	7dbb      	ldrb	r3, [r7, #22]
 800c3a8:	3330      	adds	r3, #48	@ 0x30
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	223a      	movs	r2, #58	@ 0x3a
 800c3b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	3302      	adds	r3, #2
 800c3bc:	222f      	movs	r2, #47	@ 0x2f
 800c3be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	3303      	adds	r3, #3
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	371c      	adds	r7, #28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	20000b6c 	.word	0x20000b6c

0800c3e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff ffaa 	bl	800c348 <FATFS_LinkDriverEx>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
	...

0800c400 <calloc>:
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <calloc+0xc>)
 800c402:	460a      	mov	r2, r1
 800c404:	4601      	mov	r1, r0
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	f000 b802 	b.w	800c410 <_calloc_r>
 800c40c:	20000030 	.word	0x20000030

0800c410 <_calloc_r>:
 800c410:	b570      	push	{r4, r5, r6, lr}
 800c412:	fba1 5402 	umull	r5, r4, r1, r2
 800c416:	b934      	cbnz	r4, 800c426 <_calloc_r+0x16>
 800c418:	4629      	mov	r1, r5
 800c41a:	f000 f82f 	bl	800c47c <_malloc_r>
 800c41e:	4606      	mov	r6, r0
 800c420:	b928      	cbnz	r0, 800c42e <_calloc_r+0x1e>
 800c422:	4630      	mov	r0, r6
 800c424:	bd70      	pop	{r4, r5, r6, pc}
 800c426:	220c      	movs	r2, #12
 800c428:	6002      	str	r2, [r0, #0]
 800c42a:	2600      	movs	r6, #0
 800c42c:	e7f9      	b.n	800c422 <_calloc_r+0x12>
 800c42e:	462a      	mov	r2, r5
 800c430:	4621      	mov	r1, r4
 800c432:	f001 f83a 	bl	800d4aa <memset>
 800c436:	e7f4      	b.n	800c422 <_calloc_r+0x12>

0800c438 <sbrk_aligned>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	4e0f      	ldr	r6, [pc, #60]	@ (800c478 <sbrk_aligned+0x40>)
 800c43c:	460c      	mov	r4, r1
 800c43e:	6831      	ldr	r1, [r6, #0]
 800c440:	4605      	mov	r5, r0
 800c442:	b911      	cbnz	r1, 800c44a <sbrk_aligned+0x12>
 800c444:	f001 f872 	bl	800d52c <_sbrk_r>
 800c448:	6030      	str	r0, [r6, #0]
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f001 f86d 	bl	800d52c <_sbrk_r>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d103      	bne.n	800c45e <sbrk_aligned+0x26>
 800c456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c45a:	4620      	mov	r0, r4
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	1cc4      	adds	r4, r0, #3
 800c460:	f024 0403 	bic.w	r4, r4, #3
 800c464:	42a0      	cmp	r0, r4
 800c466:	d0f8      	beq.n	800c45a <sbrk_aligned+0x22>
 800c468:	1a21      	subs	r1, r4, r0
 800c46a:	4628      	mov	r0, r5
 800c46c:	f001 f85e 	bl	800d52c <_sbrk_r>
 800c470:	3001      	adds	r0, #1
 800c472:	d1f2      	bne.n	800c45a <sbrk_aligned+0x22>
 800c474:	e7ef      	b.n	800c456 <sbrk_aligned+0x1e>
 800c476:	bf00      	nop
 800c478:	20000b78 	.word	0x20000b78

0800c47c <_malloc_r>:
 800c47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c480:	1ccd      	adds	r5, r1, #3
 800c482:	f025 0503 	bic.w	r5, r5, #3
 800c486:	3508      	adds	r5, #8
 800c488:	2d0c      	cmp	r5, #12
 800c48a:	bf38      	it	cc
 800c48c:	250c      	movcc	r5, #12
 800c48e:	2d00      	cmp	r5, #0
 800c490:	4606      	mov	r6, r0
 800c492:	db01      	blt.n	800c498 <_malloc_r+0x1c>
 800c494:	42a9      	cmp	r1, r5
 800c496:	d904      	bls.n	800c4a2 <_malloc_r+0x26>
 800c498:	230c      	movs	r3, #12
 800c49a:	6033      	str	r3, [r6, #0]
 800c49c:	2000      	movs	r0, #0
 800c49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c578 <_malloc_r+0xfc>
 800c4a6:	f000 f869 	bl	800c57c <__malloc_lock>
 800c4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ae:	461c      	mov	r4, r3
 800c4b0:	bb44      	cbnz	r4, 800c504 <_malloc_r+0x88>
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7ff ffbf 	bl	800c438 <sbrk_aligned>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	4604      	mov	r4, r0
 800c4be:	d158      	bne.n	800c572 <_malloc_r+0xf6>
 800c4c0:	f8d8 4000 	ldr.w	r4, [r8]
 800c4c4:	4627      	mov	r7, r4
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d143      	bne.n	800c552 <_malloc_r+0xd6>
 800c4ca:	2c00      	cmp	r4, #0
 800c4cc:	d04b      	beq.n	800c566 <_malloc_r+0xea>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	eb04 0903 	add.w	r9, r4, r3
 800c4d8:	f001 f828 	bl	800d52c <_sbrk_r>
 800c4dc:	4581      	cmp	r9, r0
 800c4de:	d142      	bne.n	800c566 <_malloc_r+0xea>
 800c4e0:	6821      	ldr	r1, [r4, #0]
 800c4e2:	1a6d      	subs	r5, r5, r1
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ffa6 	bl	800c438 <sbrk_aligned>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	d03a      	beq.n	800c566 <_malloc_r+0xea>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	442b      	add	r3, r5
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	bb62      	cbnz	r2, 800c558 <_malloc_r+0xdc>
 800c4fe:	f8c8 7000 	str.w	r7, [r8]
 800c502:	e00f      	b.n	800c524 <_malloc_r+0xa8>
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	1b52      	subs	r2, r2, r5
 800c508:	d420      	bmi.n	800c54c <_malloc_r+0xd0>
 800c50a:	2a0b      	cmp	r2, #11
 800c50c:	d917      	bls.n	800c53e <_malloc_r+0xc2>
 800c50e:	1961      	adds	r1, r4, r5
 800c510:	42a3      	cmp	r3, r4
 800c512:	6025      	str	r5, [r4, #0]
 800c514:	bf18      	it	ne
 800c516:	6059      	strne	r1, [r3, #4]
 800c518:	6863      	ldr	r3, [r4, #4]
 800c51a:	bf08      	it	eq
 800c51c:	f8c8 1000 	streq.w	r1, [r8]
 800c520:	5162      	str	r2, [r4, r5]
 800c522:	604b      	str	r3, [r1, #4]
 800c524:	4630      	mov	r0, r6
 800c526:	f000 f82f 	bl	800c588 <__malloc_unlock>
 800c52a:	f104 000b 	add.w	r0, r4, #11
 800c52e:	1d23      	adds	r3, r4, #4
 800c530:	f020 0007 	bic.w	r0, r0, #7
 800c534:	1ac2      	subs	r2, r0, r3
 800c536:	bf1c      	itt	ne
 800c538:	1a1b      	subne	r3, r3, r0
 800c53a:	50a3      	strne	r3, [r4, r2]
 800c53c:	e7af      	b.n	800c49e <_malloc_r+0x22>
 800c53e:	6862      	ldr	r2, [r4, #4]
 800c540:	42a3      	cmp	r3, r4
 800c542:	bf0c      	ite	eq
 800c544:	f8c8 2000 	streq.w	r2, [r8]
 800c548:	605a      	strne	r2, [r3, #4]
 800c54a:	e7eb      	b.n	800c524 <_malloc_r+0xa8>
 800c54c:	4623      	mov	r3, r4
 800c54e:	6864      	ldr	r4, [r4, #4]
 800c550:	e7ae      	b.n	800c4b0 <_malloc_r+0x34>
 800c552:	463c      	mov	r4, r7
 800c554:	687f      	ldr	r7, [r7, #4]
 800c556:	e7b6      	b.n	800c4c6 <_malloc_r+0x4a>
 800c558:	461a      	mov	r2, r3
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d1fb      	bne.n	800c558 <_malloc_r+0xdc>
 800c560:	2300      	movs	r3, #0
 800c562:	6053      	str	r3, [r2, #4]
 800c564:	e7de      	b.n	800c524 <_malloc_r+0xa8>
 800c566:	230c      	movs	r3, #12
 800c568:	6033      	str	r3, [r6, #0]
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 f80c 	bl	800c588 <__malloc_unlock>
 800c570:	e794      	b.n	800c49c <_malloc_r+0x20>
 800c572:	6005      	str	r5, [r0, #0]
 800c574:	e7d6      	b.n	800c524 <_malloc_r+0xa8>
 800c576:	bf00      	nop
 800c578:	20000b7c 	.word	0x20000b7c

0800c57c <__malloc_lock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	@ (800c584 <__malloc_lock+0x8>)
 800c57e:	f001 b822 	b.w	800d5c6 <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	20000cc0 	.word	0x20000cc0

0800c588 <__malloc_unlock>:
 800c588:	4801      	ldr	r0, [pc, #4]	@ (800c590 <__malloc_unlock+0x8>)
 800c58a:	f001 b81d 	b.w	800d5c8 <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	20000cc0 	.word	0x20000cc0

0800c594 <__cvt>:
 800c594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	ec57 6b10 	vmov	r6, r7, d0
 800c59c:	2f00      	cmp	r7, #0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	bfbb      	ittet	lt
 800c5a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c5aa:	461f      	movlt	r7, r3
 800c5ac:	2300      	movge	r3, #0
 800c5ae:	232d      	movlt	r3, #45	@ 0x2d
 800c5b0:	700b      	strb	r3, [r1, #0]
 800c5b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c5b8:	4691      	mov	r9, r2
 800c5ba:	f023 0820 	bic.w	r8, r3, #32
 800c5be:	bfbc      	itt	lt
 800c5c0:	4632      	movlt	r2, r6
 800c5c2:	4616      	movlt	r6, r2
 800c5c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5c8:	d005      	beq.n	800c5d6 <__cvt+0x42>
 800c5ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c5ce:	d100      	bne.n	800c5d2 <__cvt+0x3e>
 800c5d0:	3401      	adds	r4, #1
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	e000      	b.n	800c5d8 <__cvt+0x44>
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	ab02      	add	r3, sp, #8
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	ec47 6b10 	vmov	d0, r6, r7
 800c5e4:	4653      	mov	r3, sl
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	f001 f87e 	bl	800d6e8 <_dtoa_r>
 800c5ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	d119      	bne.n	800c628 <__cvt+0x94>
 800c5f4:	f019 0f01 	tst.w	r9, #1
 800c5f8:	d00e      	beq.n	800c618 <__cvt+0x84>
 800c5fa:	eb00 0904 	add.w	r9, r0, r4
 800c5fe:	2200      	movs	r2, #0
 800c600:	2300      	movs	r3, #0
 800c602:	4630      	mov	r0, r6
 800c604:	4639      	mov	r1, r7
 800c606:	f7f4 fa7f 	bl	8000b08 <__aeabi_dcmpeq>
 800c60a:	b108      	cbz	r0, 800c610 <__cvt+0x7c>
 800c60c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c610:	2230      	movs	r2, #48	@ 0x30
 800c612:	9b03      	ldr	r3, [sp, #12]
 800c614:	454b      	cmp	r3, r9
 800c616:	d31e      	bcc.n	800c656 <__cvt+0xc2>
 800c618:	9b03      	ldr	r3, [sp, #12]
 800c61a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c61c:	1b5b      	subs	r3, r3, r5
 800c61e:	4628      	mov	r0, r5
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	b004      	add	sp, #16
 800c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c62c:	eb00 0904 	add.w	r9, r0, r4
 800c630:	d1e5      	bne.n	800c5fe <__cvt+0x6a>
 800c632:	7803      	ldrb	r3, [r0, #0]
 800c634:	2b30      	cmp	r3, #48	@ 0x30
 800c636:	d10a      	bne.n	800c64e <__cvt+0xba>
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	4630      	mov	r0, r6
 800c63e:	4639      	mov	r1, r7
 800c640:	f7f4 fa62 	bl	8000b08 <__aeabi_dcmpeq>
 800c644:	b918      	cbnz	r0, 800c64e <__cvt+0xba>
 800c646:	f1c4 0401 	rsb	r4, r4, #1
 800c64a:	f8ca 4000 	str.w	r4, [sl]
 800c64e:	f8da 3000 	ldr.w	r3, [sl]
 800c652:	4499      	add	r9, r3
 800c654:	e7d3      	b.n	800c5fe <__cvt+0x6a>
 800c656:	1c59      	adds	r1, r3, #1
 800c658:	9103      	str	r1, [sp, #12]
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	e7d9      	b.n	800c612 <__cvt+0x7e>

0800c65e <__exponent>:
 800c65e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c660:	2900      	cmp	r1, #0
 800c662:	bfba      	itte	lt
 800c664:	4249      	neglt	r1, r1
 800c666:	232d      	movlt	r3, #45	@ 0x2d
 800c668:	232b      	movge	r3, #43	@ 0x2b
 800c66a:	2909      	cmp	r1, #9
 800c66c:	7002      	strb	r2, [r0, #0]
 800c66e:	7043      	strb	r3, [r0, #1]
 800c670:	dd29      	ble.n	800c6c6 <__exponent+0x68>
 800c672:	f10d 0307 	add.w	r3, sp, #7
 800c676:	461d      	mov	r5, r3
 800c678:	270a      	movs	r7, #10
 800c67a:	461a      	mov	r2, r3
 800c67c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c680:	fb07 1416 	mls	r4, r7, r6, r1
 800c684:	3430      	adds	r4, #48	@ 0x30
 800c686:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c68a:	460c      	mov	r4, r1
 800c68c:	2c63      	cmp	r4, #99	@ 0x63
 800c68e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c692:	4631      	mov	r1, r6
 800c694:	dcf1      	bgt.n	800c67a <__exponent+0x1c>
 800c696:	3130      	adds	r1, #48	@ 0x30
 800c698:	1e94      	subs	r4, r2, #2
 800c69a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c69e:	1c41      	adds	r1, r0, #1
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	42ab      	cmp	r3, r5
 800c6a4:	d30a      	bcc.n	800c6bc <__exponent+0x5e>
 800c6a6:	f10d 0309 	add.w	r3, sp, #9
 800c6aa:	1a9b      	subs	r3, r3, r2
 800c6ac:	42ac      	cmp	r4, r5
 800c6ae:	bf88      	it	hi
 800c6b0:	2300      	movhi	r3, #0
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	4403      	add	r3, r0
 800c6b6:	1a18      	subs	r0, r3, r0
 800c6b8:	b003      	add	sp, #12
 800c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c6c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c6c4:	e7ed      	b.n	800c6a2 <__exponent+0x44>
 800c6c6:	2330      	movs	r3, #48	@ 0x30
 800c6c8:	3130      	adds	r1, #48	@ 0x30
 800c6ca:	7083      	strb	r3, [r0, #2]
 800c6cc:	70c1      	strb	r1, [r0, #3]
 800c6ce:	1d03      	adds	r3, r0, #4
 800c6d0:	e7f1      	b.n	800c6b6 <__exponent+0x58>
	...

0800c6d4 <_printf_float>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	b08d      	sub	sp, #52	@ 0x34
 800c6da:	460c      	mov	r4, r1
 800c6dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6e0:	4616      	mov	r6, r2
 800c6e2:	461f      	mov	r7, r3
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	f000 fee9 	bl	800d4bc <_localeconv_r>
 800c6ea:	6803      	ldr	r3, [r0, #0]
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f3 fdde 	bl	80002b0 <strlen>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6fc:	9005      	str	r0, [sp, #20]
 800c6fe:	3307      	adds	r3, #7
 800c700:	f023 0307 	bic.w	r3, r3, #7
 800c704:	f103 0208 	add.w	r2, r3, #8
 800c708:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c70c:	f8d4 b000 	ldr.w	fp, [r4]
 800c710:	f8c8 2000 	str.w	r2, [r8]
 800c714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c718:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c72a:	4b9c      	ldr	r3, [pc, #624]	@ (800c99c <_printf_float+0x2c8>)
 800c72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c730:	f7f4 fa1c 	bl	8000b6c <__aeabi_dcmpun>
 800c734:	bb70      	cbnz	r0, 800c794 <_printf_float+0xc0>
 800c736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c73a:	4b98      	ldr	r3, [pc, #608]	@ (800c99c <_printf_float+0x2c8>)
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c740:	f7f4 f9f6 	bl	8000b30 <__aeabi_dcmple>
 800c744:	bb30      	cbnz	r0, 800c794 <_printf_float+0xc0>
 800c746:	2200      	movs	r2, #0
 800c748:	2300      	movs	r3, #0
 800c74a:	4640      	mov	r0, r8
 800c74c:	4649      	mov	r1, r9
 800c74e:	f7f4 f9e5 	bl	8000b1c <__aeabi_dcmplt>
 800c752:	b110      	cbz	r0, 800c75a <_printf_float+0x86>
 800c754:	232d      	movs	r3, #45	@ 0x2d
 800c756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75a:	4a91      	ldr	r2, [pc, #580]	@ (800c9a0 <_printf_float+0x2cc>)
 800c75c:	4b91      	ldr	r3, [pc, #580]	@ (800c9a4 <_printf_float+0x2d0>)
 800c75e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c762:	bf8c      	ite	hi
 800c764:	4690      	movhi	r8, r2
 800c766:	4698      	movls	r8, r3
 800c768:	2303      	movs	r3, #3
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	f02b 0304 	bic.w	r3, fp, #4
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	f04f 0900 	mov.w	r9, #0
 800c776:	9700      	str	r7, [sp, #0]
 800c778:	4633      	mov	r3, r6
 800c77a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c77c:	4621      	mov	r1, r4
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 f9d2 	bl	800cb28 <_printf_common>
 800c784:	3001      	adds	r0, #1
 800c786:	f040 808d 	bne.w	800c8a4 <_printf_float+0x1d0>
 800c78a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c78e:	b00d      	add	sp, #52	@ 0x34
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c794:	4642      	mov	r2, r8
 800c796:	464b      	mov	r3, r9
 800c798:	4640      	mov	r0, r8
 800c79a:	4649      	mov	r1, r9
 800c79c:	f7f4 f9e6 	bl	8000b6c <__aeabi_dcmpun>
 800c7a0:	b140      	cbz	r0, 800c7b4 <_printf_float+0xe0>
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfbc      	itt	lt
 800c7a8:	232d      	movlt	r3, #45	@ 0x2d
 800c7aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7ae:	4a7e      	ldr	r2, [pc, #504]	@ (800c9a8 <_printf_float+0x2d4>)
 800c7b0:	4b7e      	ldr	r3, [pc, #504]	@ (800c9ac <_printf_float+0x2d8>)
 800c7b2:	e7d4      	b.n	800c75e <_printf_float+0x8a>
 800c7b4:	6863      	ldr	r3, [r4, #4]
 800c7b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c7ba:	9206      	str	r2, [sp, #24]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	d13b      	bne.n	800c838 <_printf_float+0x164>
 800c7c0:	2306      	movs	r3, #6
 800c7c2:	6063      	str	r3, [r4, #4]
 800c7c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	6022      	str	r2, [r4, #0]
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c7d4:	ab09      	add	r3, sp, #36	@ 0x24
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	6861      	ldr	r1, [r4, #4]
 800c7da:	ec49 8b10 	vmov	d0, r8, r9
 800c7de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f7ff fed6 	bl	800c594 <__cvt>
 800c7e8:	9b06      	ldr	r3, [sp, #24]
 800c7ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7ec:	2b47      	cmp	r3, #71	@ 0x47
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	d129      	bne.n	800c846 <_printf_float+0x172>
 800c7f2:	1cc8      	adds	r0, r1, #3
 800c7f4:	db02      	blt.n	800c7fc <_printf_float+0x128>
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	4299      	cmp	r1, r3
 800c7fa:	dd41      	ble.n	800c880 <_printf_float+0x1ac>
 800c7fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c800:	fa5f fa8a 	uxtb.w	sl, sl
 800c804:	3901      	subs	r1, #1
 800c806:	4652      	mov	r2, sl
 800c808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c80c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c80e:	f7ff ff26 	bl	800c65e <__exponent>
 800c812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c814:	1813      	adds	r3, r2, r0
 800c816:	2a01      	cmp	r2, #1
 800c818:	4681      	mov	r9, r0
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	dc02      	bgt.n	800c824 <_printf_float+0x150>
 800c81e:	6822      	ldr	r2, [r4, #0]
 800c820:	07d2      	lsls	r2, r2, #31
 800c822:	d501      	bpl.n	800c828 <_printf_float+0x154>
 800c824:	3301      	adds	r3, #1
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0a2      	beq.n	800c776 <_printf_float+0xa2>
 800c830:	232d      	movs	r3, #45	@ 0x2d
 800c832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c836:	e79e      	b.n	800c776 <_printf_float+0xa2>
 800c838:	9a06      	ldr	r2, [sp, #24]
 800c83a:	2a47      	cmp	r2, #71	@ 0x47
 800c83c:	d1c2      	bne.n	800c7c4 <_printf_float+0xf0>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1c0      	bne.n	800c7c4 <_printf_float+0xf0>
 800c842:	2301      	movs	r3, #1
 800c844:	e7bd      	b.n	800c7c2 <_printf_float+0xee>
 800c846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c84a:	d9db      	bls.n	800c804 <_printf_float+0x130>
 800c84c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c850:	d118      	bne.n	800c884 <_printf_float+0x1b0>
 800c852:	2900      	cmp	r1, #0
 800c854:	6863      	ldr	r3, [r4, #4]
 800c856:	dd0b      	ble.n	800c870 <_printf_float+0x19c>
 800c858:	6121      	str	r1, [r4, #16]
 800c85a:	b913      	cbnz	r3, 800c862 <_printf_float+0x18e>
 800c85c:	6822      	ldr	r2, [r4, #0]
 800c85e:	07d0      	lsls	r0, r2, #31
 800c860:	d502      	bpl.n	800c868 <_printf_float+0x194>
 800c862:	3301      	adds	r3, #1
 800c864:	440b      	add	r3, r1
 800c866:	6123      	str	r3, [r4, #16]
 800c868:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c86a:	f04f 0900 	mov.w	r9, #0
 800c86e:	e7db      	b.n	800c828 <_printf_float+0x154>
 800c870:	b913      	cbnz	r3, 800c878 <_printf_float+0x1a4>
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	07d2      	lsls	r2, r2, #31
 800c876:	d501      	bpl.n	800c87c <_printf_float+0x1a8>
 800c878:	3302      	adds	r3, #2
 800c87a:	e7f4      	b.n	800c866 <_printf_float+0x192>
 800c87c:	2301      	movs	r3, #1
 800c87e:	e7f2      	b.n	800c866 <_printf_float+0x192>
 800c880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c886:	4299      	cmp	r1, r3
 800c888:	db05      	blt.n	800c896 <_printf_float+0x1c2>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	6121      	str	r1, [r4, #16]
 800c88e:	07d8      	lsls	r0, r3, #31
 800c890:	d5ea      	bpl.n	800c868 <_printf_float+0x194>
 800c892:	1c4b      	adds	r3, r1, #1
 800c894:	e7e7      	b.n	800c866 <_printf_float+0x192>
 800c896:	2900      	cmp	r1, #0
 800c898:	bfd4      	ite	le
 800c89a:	f1c1 0202 	rsble	r2, r1, #2
 800c89e:	2201      	movgt	r2, #1
 800c8a0:	4413      	add	r3, r2
 800c8a2:	e7e0      	b.n	800c866 <_printf_float+0x192>
 800c8a4:	6823      	ldr	r3, [r4, #0]
 800c8a6:	055a      	lsls	r2, r3, #21
 800c8a8:	d407      	bmi.n	800c8ba <_printf_float+0x1e6>
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	47b8      	blx	r7
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d12b      	bne.n	800c910 <_printf_float+0x23c>
 800c8b8:	e767      	b.n	800c78a <_printf_float+0xb6>
 800c8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8be:	f240 80dd 	bls.w	800ca7c <_printf_float+0x3a8>
 800c8c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f7f4 f91d 	bl	8000b08 <__aeabi_dcmpeq>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d033      	beq.n	800c93a <_printf_float+0x266>
 800c8d2:	4a37      	ldr	r2, [pc, #220]	@ (800c9b0 <_printf_float+0x2dc>)
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f43f af54 	beq.w	800c78a <_printf_float+0xb6>
 800c8e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8e6:	4543      	cmp	r3, r8
 800c8e8:	db02      	blt.n	800c8f0 <_printf_float+0x21c>
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	07d8      	lsls	r0, r3, #31
 800c8ee:	d50f      	bpl.n	800c910 <_printf_float+0x23c>
 800c8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f4:	4631      	mov	r1, r6
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	47b8      	blx	r7
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f43f af45 	beq.w	800c78a <_printf_float+0xb6>
 800c900:	f04f 0900 	mov.w	r9, #0
 800c904:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c908:	f104 0a1a 	add.w	sl, r4, #26
 800c90c:	45c8      	cmp	r8, r9
 800c90e:	dc09      	bgt.n	800c924 <_printf_float+0x250>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	079b      	lsls	r3, r3, #30
 800c914:	f100 8103 	bmi.w	800cb1e <_printf_float+0x44a>
 800c918:	68e0      	ldr	r0, [r4, #12]
 800c91a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c91c:	4298      	cmp	r0, r3
 800c91e:	bfb8      	it	lt
 800c920:	4618      	movlt	r0, r3
 800c922:	e734      	b.n	800c78e <_printf_float+0xba>
 800c924:	2301      	movs	r3, #1
 800c926:	4652      	mov	r2, sl
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f af2b 	beq.w	800c78a <_printf_float+0xb6>
 800c934:	f109 0901 	add.w	r9, r9, #1
 800c938:	e7e8      	b.n	800c90c <_printf_float+0x238>
 800c93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	dc39      	bgt.n	800c9b4 <_printf_float+0x2e0>
 800c940:	4a1b      	ldr	r2, [pc, #108]	@ (800c9b0 <_printf_float+0x2dc>)
 800c942:	2301      	movs	r3, #1
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f af1d 	beq.w	800c78a <_printf_float+0xb6>
 800c950:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c954:	ea59 0303 	orrs.w	r3, r9, r3
 800c958:	d102      	bne.n	800c960 <_printf_float+0x28c>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	07d9      	lsls	r1, r3, #31
 800c95e:	d5d7      	bpl.n	800c910 <_printf_float+0x23c>
 800c960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c964:	4631      	mov	r1, r6
 800c966:	4628      	mov	r0, r5
 800c968:	47b8      	blx	r7
 800c96a:	3001      	adds	r0, #1
 800c96c:	f43f af0d 	beq.w	800c78a <_printf_float+0xb6>
 800c970:	f04f 0a00 	mov.w	sl, #0
 800c974:	f104 0b1a 	add.w	fp, r4, #26
 800c978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97a:	425b      	negs	r3, r3
 800c97c:	4553      	cmp	r3, sl
 800c97e:	dc01      	bgt.n	800c984 <_printf_float+0x2b0>
 800c980:	464b      	mov	r3, r9
 800c982:	e793      	b.n	800c8ac <_printf_float+0x1d8>
 800c984:	2301      	movs	r3, #1
 800c986:	465a      	mov	r2, fp
 800c988:	4631      	mov	r1, r6
 800c98a:	4628      	mov	r0, r5
 800c98c:	47b8      	blx	r7
 800c98e:	3001      	adds	r0, #1
 800c990:	f43f aefb 	beq.w	800c78a <_printf_float+0xb6>
 800c994:	f10a 0a01 	add.w	sl, sl, #1
 800c998:	e7ee      	b.n	800c978 <_printf_float+0x2a4>
 800c99a:	bf00      	nop
 800c99c:	7fefffff 	.word	0x7fefffff
 800c9a0:	08011b38 	.word	0x08011b38
 800c9a4:	08011b34 	.word	0x08011b34
 800c9a8:	08011b40 	.word	0x08011b40
 800c9ac:	08011b3c 	.word	0x08011b3c
 800c9b0:	08011b44 	.word	0x08011b44
 800c9b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c9ba:	4553      	cmp	r3, sl
 800c9bc:	bfa8      	it	ge
 800c9be:	4653      	movge	r3, sl
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	4699      	mov	r9, r3
 800c9c4:	dc36      	bgt.n	800ca34 <_printf_float+0x360>
 800c9c6:	f04f 0b00 	mov.w	fp, #0
 800c9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9ce:	f104 021a 	add.w	r2, r4, #26
 800c9d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9d4:	9306      	str	r3, [sp, #24]
 800c9d6:	eba3 0309 	sub.w	r3, r3, r9
 800c9da:	455b      	cmp	r3, fp
 800c9dc:	dc31      	bgt.n	800ca42 <_printf_float+0x36e>
 800c9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e0:	459a      	cmp	sl, r3
 800c9e2:	dc3a      	bgt.n	800ca5a <_printf_float+0x386>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	07da      	lsls	r2, r3, #31
 800c9e8:	d437      	bmi.n	800ca5a <_printf_float+0x386>
 800c9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9ec:	ebaa 0903 	sub.w	r9, sl, r3
 800c9f0:	9b06      	ldr	r3, [sp, #24]
 800c9f2:	ebaa 0303 	sub.w	r3, sl, r3
 800c9f6:	4599      	cmp	r9, r3
 800c9f8:	bfa8      	it	ge
 800c9fa:	4699      	movge	r9, r3
 800c9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ca00:	dc33      	bgt.n	800ca6a <_printf_float+0x396>
 800ca02:	f04f 0800 	mov.w	r8, #0
 800ca06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca0a:	f104 0b1a 	add.w	fp, r4, #26
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	ebaa 0303 	sub.w	r3, sl, r3
 800ca14:	eba3 0309 	sub.w	r3, r3, r9
 800ca18:	4543      	cmp	r3, r8
 800ca1a:	f77f af79 	ble.w	800c910 <_printf_float+0x23c>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	465a      	mov	r2, fp
 800ca22:	4631      	mov	r1, r6
 800ca24:	4628      	mov	r0, r5
 800ca26:	47b8      	blx	r7
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f43f aeae 	beq.w	800c78a <_printf_float+0xb6>
 800ca2e:	f108 0801 	add.w	r8, r8, #1
 800ca32:	e7ec      	b.n	800ca0e <_printf_float+0x33a>
 800ca34:	4642      	mov	r2, r8
 800ca36:	4631      	mov	r1, r6
 800ca38:	4628      	mov	r0, r5
 800ca3a:	47b8      	blx	r7
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d1c2      	bne.n	800c9c6 <_printf_float+0x2f2>
 800ca40:	e6a3      	b.n	800c78a <_printf_float+0xb6>
 800ca42:	2301      	movs	r3, #1
 800ca44:	4631      	mov	r1, r6
 800ca46:	4628      	mov	r0, r5
 800ca48:	9206      	str	r2, [sp, #24]
 800ca4a:	47b8      	blx	r7
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	f43f ae9c 	beq.w	800c78a <_printf_float+0xb6>
 800ca52:	9a06      	ldr	r2, [sp, #24]
 800ca54:	f10b 0b01 	add.w	fp, fp, #1
 800ca58:	e7bb      	b.n	800c9d2 <_printf_float+0x2fe>
 800ca5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b8      	blx	r7
 800ca64:	3001      	adds	r0, #1
 800ca66:	d1c0      	bne.n	800c9ea <_printf_float+0x316>
 800ca68:	e68f      	b.n	800c78a <_printf_float+0xb6>
 800ca6a:	9a06      	ldr	r2, [sp, #24]
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	4442      	add	r2, r8
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	d1c3      	bne.n	800ca02 <_printf_float+0x32e>
 800ca7a:	e686      	b.n	800c78a <_printf_float+0xb6>
 800ca7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca80:	f1ba 0f01 	cmp.w	sl, #1
 800ca84:	dc01      	bgt.n	800ca8a <_printf_float+0x3b6>
 800ca86:	07db      	lsls	r3, r3, #31
 800ca88:	d536      	bpl.n	800caf8 <_printf_float+0x424>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b8      	blx	r7
 800ca94:	3001      	adds	r0, #1
 800ca96:	f43f ae78 	beq.w	800c78a <_printf_float+0xb6>
 800ca9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca9e:	4631      	mov	r1, r6
 800caa0:	4628      	mov	r0, r5
 800caa2:	47b8      	blx	r7
 800caa4:	3001      	adds	r0, #1
 800caa6:	f43f ae70 	beq.w	800c78a <_printf_float+0xb6>
 800caaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cab6:	f7f4 f827 	bl	8000b08 <__aeabi_dcmpeq>
 800caba:	b9c0      	cbnz	r0, 800caee <_printf_float+0x41a>
 800cabc:	4653      	mov	r3, sl
 800cabe:	f108 0201 	add.w	r2, r8, #1
 800cac2:	4631      	mov	r1, r6
 800cac4:	4628      	mov	r0, r5
 800cac6:	47b8      	blx	r7
 800cac8:	3001      	adds	r0, #1
 800caca:	d10c      	bne.n	800cae6 <_printf_float+0x412>
 800cacc:	e65d      	b.n	800c78a <_printf_float+0xb6>
 800cace:	2301      	movs	r3, #1
 800cad0:	465a      	mov	r2, fp
 800cad2:	4631      	mov	r1, r6
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b8      	blx	r7
 800cad8:	3001      	adds	r0, #1
 800cada:	f43f ae56 	beq.w	800c78a <_printf_float+0xb6>
 800cade:	f108 0801 	add.w	r8, r8, #1
 800cae2:	45d0      	cmp	r8, sl
 800cae4:	dbf3      	blt.n	800cace <_printf_float+0x3fa>
 800cae6:	464b      	mov	r3, r9
 800cae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800caec:	e6df      	b.n	800c8ae <_printf_float+0x1da>
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	f104 0b1a 	add.w	fp, r4, #26
 800caf6:	e7f4      	b.n	800cae2 <_printf_float+0x40e>
 800caf8:	2301      	movs	r3, #1
 800cafa:	4642      	mov	r2, r8
 800cafc:	e7e1      	b.n	800cac2 <_printf_float+0x3ee>
 800cafe:	2301      	movs	r3, #1
 800cb00:	464a      	mov	r2, r9
 800cb02:	4631      	mov	r1, r6
 800cb04:	4628      	mov	r0, r5
 800cb06:	47b8      	blx	r7
 800cb08:	3001      	adds	r0, #1
 800cb0a:	f43f ae3e 	beq.w	800c78a <_printf_float+0xb6>
 800cb0e:	f108 0801 	add.w	r8, r8, #1
 800cb12:	68e3      	ldr	r3, [r4, #12]
 800cb14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb16:	1a5b      	subs	r3, r3, r1
 800cb18:	4543      	cmp	r3, r8
 800cb1a:	dcf0      	bgt.n	800cafe <_printf_float+0x42a>
 800cb1c:	e6fc      	b.n	800c918 <_printf_float+0x244>
 800cb1e:	f04f 0800 	mov.w	r8, #0
 800cb22:	f104 0919 	add.w	r9, r4, #25
 800cb26:	e7f4      	b.n	800cb12 <_printf_float+0x43e>

0800cb28 <_printf_common>:
 800cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	4616      	mov	r6, r2
 800cb2e:	4698      	mov	r8, r3
 800cb30:	688a      	ldr	r2, [r1, #8]
 800cb32:	690b      	ldr	r3, [r1, #16]
 800cb34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	bfb8      	it	lt
 800cb3c:	4613      	movlt	r3, r2
 800cb3e:	6033      	str	r3, [r6, #0]
 800cb40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb44:	4607      	mov	r7, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	b10a      	cbz	r2, 800cb4e <_printf_common+0x26>
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	6033      	str	r3, [r6, #0]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	0699      	lsls	r1, r3, #26
 800cb52:	bf42      	ittt	mi
 800cb54:	6833      	ldrmi	r3, [r6, #0]
 800cb56:	3302      	addmi	r3, #2
 800cb58:	6033      	strmi	r3, [r6, #0]
 800cb5a:	6825      	ldr	r5, [r4, #0]
 800cb5c:	f015 0506 	ands.w	r5, r5, #6
 800cb60:	d106      	bne.n	800cb70 <_printf_common+0x48>
 800cb62:	f104 0a19 	add.w	sl, r4, #25
 800cb66:	68e3      	ldr	r3, [r4, #12]
 800cb68:	6832      	ldr	r2, [r6, #0]
 800cb6a:	1a9b      	subs	r3, r3, r2
 800cb6c:	42ab      	cmp	r3, r5
 800cb6e:	dc26      	bgt.n	800cbbe <_printf_common+0x96>
 800cb70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb74:	6822      	ldr	r2, [r4, #0]
 800cb76:	3b00      	subs	r3, #0
 800cb78:	bf18      	it	ne
 800cb7a:	2301      	movne	r3, #1
 800cb7c:	0692      	lsls	r2, r2, #26
 800cb7e:	d42b      	bmi.n	800cbd8 <_printf_common+0xb0>
 800cb80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb84:	4641      	mov	r1, r8
 800cb86:	4638      	mov	r0, r7
 800cb88:	47c8      	blx	r9
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d01e      	beq.n	800cbcc <_printf_common+0xa4>
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	6922      	ldr	r2, [r4, #16]
 800cb92:	f003 0306 	and.w	r3, r3, #6
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	bf02      	ittt	eq
 800cb9a:	68e5      	ldreq	r5, [r4, #12]
 800cb9c:	6833      	ldreq	r3, [r6, #0]
 800cb9e:	1aed      	subeq	r5, r5, r3
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	bf0c      	ite	eq
 800cba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cba8:	2500      	movne	r5, #0
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	bfc4      	itt	gt
 800cbae:	1a9b      	subgt	r3, r3, r2
 800cbb0:	18ed      	addgt	r5, r5, r3
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	341a      	adds	r4, #26
 800cbb6:	42b5      	cmp	r5, r6
 800cbb8:	d11a      	bne.n	800cbf0 <_printf_common+0xc8>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e008      	b.n	800cbd0 <_printf_common+0xa8>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	4641      	mov	r1, r8
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	47c8      	blx	r9
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d103      	bne.n	800cbd4 <_printf_common+0xac>
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	e7c6      	b.n	800cb66 <_printf_common+0x3e>
 800cbd8:	18e1      	adds	r1, r4, r3
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	2030      	movs	r0, #48	@ 0x30
 800cbde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbe2:	4422      	add	r2, r4
 800cbe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbec:	3302      	adds	r3, #2
 800cbee:	e7c7      	b.n	800cb80 <_printf_common+0x58>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4622      	mov	r2, r4
 800cbf4:	4641      	mov	r1, r8
 800cbf6:	4638      	mov	r0, r7
 800cbf8:	47c8      	blx	r9
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d0e6      	beq.n	800cbcc <_printf_common+0xa4>
 800cbfe:	3601      	adds	r6, #1
 800cc00:	e7d9      	b.n	800cbb6 <_printf_common+0x8e>
	...

0800cc04 <_printf_i>:
 800cc04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc08:	7e0f      	ldrb	r7, [r1, #24]
 800cc0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc0c:	2f78      	cmp	r7, #120	@ 0x78
 800cc0e:	4691      	mov	r9, r2
 800cc10:	4680      	mov	r8, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	469a      	mov	sl, r3
 800cc16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc1a:	d807      	bhi.n	800cc2c <_printf_i+0x28>
 800cc1c:	2f62      	cmp	r7, #98	@ 0x62
 800cc1e:	d80a      	bhi.n	800cc36 <_printf_i+0x32>
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	f000 80d1 	beq.w	800cdc8 <_printf_i+0x1c4>
 800cc26:	2f58      	cmp	r7, #88	@ 0x58
 800cc28:	f000 80b8 	beq.w	800cd9c <_printf_i+0x198>
 800cc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc34:	e03a      	b.n	800ccac <_printf_i+0xa8>
 800cc36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc3a:	2b15      	cmp	r3, #21
 800cc3c:	d8f6      	bhi.n	800cc2c <_printf_i+0x28>
 800cc3e:	a101      	add	r1, pc, #4	@ (adr r1, 800cc44 <_printf_i+0x40>)
 800cc40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc44:	0800cc9d 	.word	0x0800cc9d
 800cc48:	0800ccb1 	.word	0x0800ccb1
 800cc4c:	0800cc2d 	.word	0x0800cc2d
 800cc50:	0800cc2d 	.word	0x0800cc2d
 800cc54:	0800cc2d 	.word	0x0800cc2d
 800cc58:	0800cc2d 	.word	0x0800cc2d
 800cc5c:	0800ccb1 	.word	0x0800ccb1
 800cc60:	0800cc2d 	.word	0x0800cc2d
 800cc64:	0800cc2d 	.word	0x0800cc2d
 800cc68:	0800cc2d 	.word	0x0800cc2d
 800cc6c:	0800cc2d 	.word	0x0800cc2d
 800cc70:	0800cdaf 	.word	0x0800cdaf
 800cc74:	0800ccdb 	.word	0x0800ccdb
 800cc78:	0800cd69 	.word	0x0800cd69
 800cc7c:	0800cc2d 	.word	0x0800cc2d
 800cc80:	0800cc2d 	.word	0x0800cc2d
 800cc84:	0800cdd1 	.word	0x0800cdd1
 800cc88:	0800cc2d 	.word	0x0800cc2d
 800cc8c:	0800ccdb 	.word	0x0800ccdb
 800cc90:	0800cc2d 	.word	0x0800cc2d
 800cc94:	0800cc2d 	.word	0x0800cc2d
 800cc98:	0800cd71 	.word	0x0800cd71
 800cc9c:	6833      	ldr	r3, [r6, #0]
 800cc9e:	1d1a      	adds	r2, r3, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6032      	str	r2, [r6, #0]
 800cca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccac:	2301      	movs	r3, #1
 800ccae:	e09c      	b.n	800cdea <_printf_i+0x1e6>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	6820      	ldr	r0, [r4, #0]
 800ccb4:	1d19      	adds	r1, r3, #4
 800ccb6:	6031      	str	r1, [r6, #0]
 800ccb8:	0606      	lsls	r6, r0, #24
 800ccba:	d501      	bpl.n	800ccc0 <_printf_i+0xbc>
 800ccbc:	681d      	ldr	r5, [r3, #0]
 800ccbe:	e003      	b.n	800ccc8 <_printf_i+0xc4>
 800ccc0:	0645      	lsls	r5, r0, #25
 800ccc2:	d5fb      	bpl.n	800ccbc <_printf_i+0xb8>
 800ccc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	da03      	bge.n	800ccd4 <_printf_i+0xd0>
 800cccc:	232d      	movs	r3, #45	@ 0x2d
 800ccce:	426d      	negs	r5, r5
 800ccd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd4:	4858      	ldr	r0, [pc, #352]	@ (800ce38 <_printf_i+0x234>)
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	e011      	b.n	800ccfe <_printf_i+0xfa>
 800ccda:	6821      	ldr	r1, [r4, #0]
 800ccdc:	6833      	ldr	r3, [r6, #0]
 800ccde:	0608      	lsls	r0, r1, #24
 800cce0:	f853 5b04 	ldr.w	r5, [r3], #4
 800cce4:	d402      	bmi.n	800ccec <_printf_i+0xe8>
 800cce6:	0649      	lsls	r1, r1, #25
 800cce8:	bf48      	it	mi
 800ccea:	b2ad      	uxthmi	r5, r5
 800ccec:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccee:	4852      	ldr	r0, [pc, #328]	@ (800ce38 <_printf_i+0x234>)
 800ccf0:	6033      	str	r3, [r6, #0]
 800ccf2:	bf14      	ite	ne
 800ccf4:	230a      	movne	r3, #10
 800ccf6:	2308      	moveq	r3, #8
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccfe:	6866      	ldr	r6, [r4, #4]
 800cd00:	60a6      	str	r6, [r4, #8]
 800cd02:	2e00      	cmp	r6, #0
 800cd04:	db05      	blt.n	800cd12 <_printf_i+0x10e>
 800cd06:	6821      	ldr	r1, [r4, #0]
 800cd08:	432e      	orrs	r6, r5
 800cd0a:	f021 0104 	bic.w	r1, r1, #4
 800cd0e:	6021      	str	r1, [r4, #0]
 800cd10:	d04b      	beq.n	800cdaa <_printf_i+0x1a6>
 800cd12:	4616      	mov	r6, r2
 800cd14:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd18:	fb03 5711 	mls	r7, r3, r1, r5
 800cd1c:	5dc7      	ldrb	r7, [r0, r7]
 800cd1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd22:	462f      	mov	r7, r5
 800cd24:	42bb      	cmp	r3, r7
 800cd26:	460d      	mov	r5, r1
 800cd28:	d9f4      	bls.n	800cd14 <_printf_i+0x110>
 800cd2a:	2b08      	cmp	r3, #8
 800cd2c:	d10b      	bne.n	800cd46 <_printf_i+0x142>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	07df      	lsls	r7, r3, #31
 800cd32:	d508      	bpl.n	800cd46 <_printf_i+0x142>
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	6861      	ldr	r1, [r4, #4]
 800cd38:	4299      	cmp	r1, r3
 800cd3a:	bfde      	ittt	le
 800cd3c:	2330      	movle	r3, #48	@ 0x30
 800cd3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd42:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cd46:	1b92      	subs	r2, r2, r6
 800cd48:	6122      	str	r2, [r4, #16]
 800cd4a:	f8cd a000 	str.w	sl, [sp]
 800cd4e:	464b      	mov	r3, r9
 800cd50:	aa03      	add	r2, sp, #12
 800cd52:	4621      	mov	r1, r4
 800cd54:	4640      	mov	r0, r8
 800cd56:	f7ff fee7 	bl	800cb28 <_printf_common>
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	d14a      	bne.n	800cdf4 <_printf_i+0x1f0>
 800cd5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd62:	b004      	add	sp, #16
 800cd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	f043 0320 	orr.w	r3, r3, #32
 800cd6e:	6023      	str	r3, [r4, #0]
 800cd70:	4832      	ldr	r0, [pc, #200]	@ (800ce3c <_printf_i+0x238>)
 800cd72:	2778      	movs	r7, #120	@ 0x78
 800cd74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	6831      	ldr	r1, [r6, #0]
 800cd7c:	061f      	lsls	r7, r3, #24
 800cd7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd82:	d402      	bmi.n	800cd8a <_printf_i+0x186>
 800cd84:	065f      	lsls	r7, r3, #25
 800cd86:	bf48      	it	mi
 800cd88:	b2ad      	uxthmi	r5, r5
 800cd8a:	6031      	str	r1, [r6, #0]
 800cd8c:	07d9      	lsls	r1, r3, #31
 800cd8e:	bf44      	itt	mi
 800cd90:	f043 0320 	orrmi.w	r3, r3, #32
 800cd94:	6023      	strmi	r3, [r4, #0]
 800cd96:	b11d      	cbz	r5, 800cda0 <_printf_i+0x19c>
 800cd98:	2310      	movs	r3, #16
 800cd9a:	e7ad      	b.n	800ccf8 <_printf_i+0xf4>
 800cd9c:	4826      	ldr	r0, [pc, #152]	@ (800ce38 <_printf_i+0x234>)
 800cd9e:	e7e9      	b.n	800cd74 <_printf_i+0x170>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	f023 0320 	bic.w	r3, r3, #32
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	e7f6      	b.n	800cd98 <_printf_i+0x194>
 800cdaa:	4616      	mov	r6, r2
 800cdac:	e7bd      	b.n	800cd2a <_printf_i+0x126>
 800cdae:	6833      	ldr	r3, [r6, #0]
 800cdb0:	6825      	ldr	r5, [r4, #0]
 800cdb2:	6961      	ldr	r1, [r4, #20]
 800cdb4:	1d18      	adds	r0, r3, #4
 800cdb6:	6030      	str	r0, [r6, #0]
 800cdb8:	062e      	lsls	r6, r5, #24
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	d501      	bpl.n	800cdc2 <_printf_i+0x1be>
 800cdbe:	6019      	str	r1, [r3, #0]
 800cdc0:	e002      	b.n	800cdc8 <_printf_i+0x1c4>
 800cdc2:	0668      	lsls	r0, r5, #25
 800cdc4:	d5fb      	bpl.n	800cdbe <_printf_i+0x1ba>
 800cdc6:	8019      	strh	r1, [r3, #0]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	6123      	str	r3, [r4, #16]
 800cdcc:	4616      	mov	r6, r2
 800cdce:	e7bc      	b.n	800cd4a <_printf_i+0x146>
 800cdd0:	6833      	ldr	r3, [r6, #0]
 800cdd2:	1d1a      	adds	r2, r3, #4
 800cdd4:	6032      	str	r2, [r6, #0]
 800cdd6:	681e      	ldr	r6, [r3, #0]
 800cdd8:	6862      	ldr	r2, [r4, #4]
 800cdda:	2100      	movs	r1, #0
 800cddc:	4630      	mov	r0, r6
 800cdde:	f7f3 fa17 	bl	8000210 <memchr>
 800cde2:	b108      	cbz	r0, 800cde8 <_printf_i+0x1e4>
 800cde4:	1b80      	subs	r0, r0, r6
 800cde6:	6060      	str	r0, [r4, #4]
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	6123      	str	r3, [r4, #16]
 800cdec:	2300      	movs	r3, #0
 800cdee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdf2:	e7aa      	b.n	800cd4a <_printf_i+0x146>
 800cdf4:	6923      	ldr	r3, [r4, #16]
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	4649      	mov	r1, r9
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	47d0      	blx	sl
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d0ad      	beq.n	800cd5e <_printf_i+0x15a>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	079b      	lsls	r3, r3, #30
 800ce06:	d413      	bmi.n	800ce30 <_printf_i+0x22c>
 800ce08:	68e0      	ldr	r0, [r4, #12]
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	4298      	cmp	r0, r3
 800ce0e:	bfb8      	it	lt
 800ce10:	4618      	movlt	r0, r3
 800ce12:	e7a6      	b.n	800cd62 <_printf_i+0x15e>
 800ce14:	2301      	movs	r3, #1
 800ce16:	4632      	mov	r2, r6
 800ce18:	4649      	mov	r1, r9
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	47d0      	blx	sl
 800ce1e:	3001      	adds	r0, #1
 800ce20:	d09d      	beq.n	800cd5e <_printf_i+0x15a>
 800ce22:	3501      	adds	r5, #1
 800ce24:	68e3      	ldr	r3, [r4, #12]
 800ce26:	9903      	ldr	r1, [sp, #12]
 800ce28:	1a5b      	subs	r3, r3, r1
 800ce2a:	42ab      	cmp	r3, r5
 800ce2c:	dcf2      	bgt.n	800ce14 <_printf_i+0x210>
 800ce2e:	e7eb      	b.n	800ce08 <_printf_i+0x204>
 800ce30:	2500      	movs	r5, #0
 800ce32:	f104 0619 	add.w	r6, r4, #25
 800ce36:	e7f5      	b.n	800ce24 <_printf_i+0x220>
 800ce38:	08011b46 	.word	0x08011b46
 800ce3c:	08011b57 	.word	0x08011b57

0800ce40 <_scanf_float>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	b087      	sub	sp, #28
 800ce46:	4691      	mov	r9, r2
 800ce48:	9303      	str	r3, [sp, #12]
 800ce4a:	688b      	ldr	r3, [r1, #8]
 800ce4c:	1e5a      	subs	r2, r3, #1
 800ce4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ce52:	bf81      	itttt	hi
 800ce54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ce58:	eb03 0b05 	addhi.w	fp, r3, r5
 800ce5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ce60:	608b      	strhi	r3, [r1, #8]
 800ce62:	680b      	ldr	r3, [r1, #0]
 800ce64:	460a      	mov	r2, r1
 800ce66:	f04f 0500 	mov.w	r5, #0
 800ce6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ce6e:	f842 3b1c 	str.w	r3, [r2], #28
 800ce72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ce76:	4680      	mov	r8, r0
 800ce78:	460c      	mov	r4, r1
 800ce7a:	bf98      	it	ls
 800ce7c:	f04f 0b00 	movls.w	fp, #0
 800ce80:	9201      	str	r2, [sp, #4]
 800ce82:	4616      	mov	r6, r2
 800ce84:	46aa      	mov	sl, r5
 800ce86:	462f      	mov	r7, r5
 800ce88:	9502      	str	r5, [sp, #8]
 800ce8a:	68a2      	ldr	r2, [r4, #8]
 800ce8c:	b15a      	cbz	r2, 800cea6 <_scanf_float+0x66>
 800ce8e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b4e      	cmp	r3, #78	@ 0x4e
 800ce96:	d863      	bhi.n	800cf60 <_scanf_float+0x120>
 800ce98:	2b40      	cmp	r3, #64	@ 0x40
 800ce9a:	d83b      	bhi.n	800cf14 <_scanf_float+0xd4>
 800ce9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cea0:	b2c8      	uxtb	r0, r1
 800cea2:	280e      	cmp	r0, #14
 800cea4:	d939      	bls.n	800cf1a <_scanf_float+0xda>
 800cea6:	b11f      	cbz	r7, 800ceb0 <_scanf_float+0x70>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceae:	6023      	str	r3, [r4, #0]
 800ceb0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ceb4:	f1ba 0f01 	cmp.w	sl, #1
 800ceb8:	f200 8114 	bhi.w	800d0e4 <_scanf_float+0x2a4>
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	429e      	cmp	r6, r3
 800cec0:	f200 8105 	bhi.w	800d0ce <_scanf_float+0x28e>
 800cec4:	2001      	movs	r0, #1
 800cec6:	b007      	add	sp, #28
 800cec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cecc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ced0:	2a0d      	cmp	r2, #13
 800ced2:	d8e8      	bhi.n	800cea6 <_scanf_float+0x66>
 800ced4:	a101      	add	r1, pc, #4	@ (adr r1, 800cedc <_scanf_float+0x9c>)
 800ced6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ceda:	bf00      	nop
 800cedc:	0800d025 	.word	0x0800d025
 800cee0:	0800cea7 	.word	0x0800cea7
 800cee4:	0800cea7 	.word	0x0800cea7
 800cee8:	0800cea7 	.word	0x0800cea7
 800ceec:	0800d081 	.word	0x0800d081
 800cef0:	0800d05b 	.word	0x0800d05b
 800cef4:	0800cea7 	.word	0x0800cea7
 800cef8:	0800cea7 	.word	0x0800cea7
 800cefc:	0800d033 	.word	0x0800d033
 800cf00:	0800cea7 	.word	0x0800cea7
 800cf04:	0800cea7 	.word	0x0800cea7
 800cf08:	0800cea7 	.word	0x0800cea7
 800cf0c:	0800cea7 	.word	0x0800cea7
 800cf10:	0800cfef 	.word	0x0800cfef
 800cf14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cf18:	e7da      	b.n	800ced0 <_scanf_float+0x90>
 800cf1a:	290e      	cmp	r1, #14
 800cf1c:	d8c3      	bhi.n	800cea6 <_scanf_float+0x66>
 800cf1e:	a001      	add	r0, pc, #4	@ (adr r0, 800cf24 <_scanf_float+0xe4>)
 800cf20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cf24:	0800cfdf 	.word	0x0800cfdf
 800cf28:	0800cea7 	.word	0x0800cea7
 800cf2c:	0800cfdf 	.word	0x0800cfdf
 800cf30:	0800d06f 	.word	0x0800d06f
 800cf34:	0800cea7 	.word	0x0800cea7
 800cf38:	0800cf81 	.word	0x0800cf81
 800cf3c:	0800cfc5 	.word	0x0800cfc5
 800cf40:	0800cfc5 	.word	0x0800cfc5
 800cf44:	0800cfc5 	.word	0x0800cfc5
 800cf48:	0800cfc5 	.word	0x0800cfc5
 800cf4c:	0800cfc5 	.word	0x0800cfc5
 800cf50:	0800cfc5 	.word	0x0800cfc5
 800cf54:	0800cfc5 	.word	0x0800cfc5
 800cf58:	0800cfc5 	.word	0x0800cfc5
 800cf5c:	0800cfc5 	.word	0x0800cfc5
 800cf60:	2b6e      	cmp	r3, #110	@ 0x6e
 800cf62:	d809      	bhi.n	800cf78 <_scanf_float+0x138>
 800cf64:	2b60      	cmp	r3, #96	@ 0x60
 800cf66:	d8b1      	bhi.n	800cecc <_scanf_float+0x8c>
 800cf68:	2b54      	cmp	r3, #84	@ 0x54
 800cf6a:	d07b      	beq.n	800d064 <_scanf_float+0x224>
 800cf6c:	2b59      	cmp	r3, #89	@ 0x59
 800cf6e:	d19a      	bne.n	800cea6 <_scanf_float+0x66>
 800cf70:	2d07      	cmp	r5, #7
 800cf72:	d198      	bne.n	800cea6 <_scanf_float+0x66>
 800cf74:	2508      	movs	r5, #8
 800cf76:	e02f      	b.n	800cfd8 <_scanf_float+0x198>
 800cf78:	2b74      	cmp	r3, #116	@ 0x74
 800cf7a:	d073      	beq.n	800d064 <_scanf_float+0x224>
 800cf7c:	2b79      	cmp	r3, #121	@ 0x79
 800cf7e:	e7f6      	b.n	800cf6e <_scanf_float+0x12e>
 800cf80:	6821      	ldr	r1, [r4, #0]
 800cf82:	05c8      	lsls	r0, r1, #23
 800cf84:	d51e      	bpl.n	800cfc4 <_scanf_float+0x184>
 800cf86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cf8a:	6021      	str	r1, [r4, #0]
 800cf8c:	3701      	adds	r7, #1
 800cf8e:	f1bb 0f00 	cmp.w	fp, #0
 800cf92:	d003      	beq.n	800cf9c <_scanf_float+0x15c>
 800cf94:	3201      	adds	r2, #1
 800cf96:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cf9a:	60a2      	str	r2, [r4, #8]
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	60a3      	str	r3, [r4, #8]
 800cfa2:	6923      	ldr	r3, [r4, #16]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	6123      	str	r3, [r4, #16]
 800cfa8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f8c9 3004 	str.w	r3, [r9, #4]
 800cfb4:	f340 8082 	ble.w	800d0bc <_scanf_float+0x27c>
 800cfb8:	f8d9 3000 	ldr.w	r3, [r9]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	f8c9 3000 	str.w	r3, [r9]
 800cfc2:	e762      	b.n	800ce8a <_scanf_float+0x4a>
 800cfc4:	eb1a 0105 	adds.w	r1, sl, r5
 800cfc8:	f47f af6d 	bne.w	800cea6 <_scanf_float+0x66>
 800cfcc:	6822      	ldr	r2, [r4, #0]
 800cfce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cfd2:	6022      	str	r2, [r4, #0]
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	468a      	mov	sl, r1
 800cfd8:	f806 3b01 	strb.w	r3, [r6], #1
 800cfdc:	e7de      	b.n	800cf9c <_scanf_float+0x15c>
 800cfde:	6822      	ldr	r2, [r4, #0]
 800cfe0:	0610      	lsls	r0, r2, #24
 800cfe2:	f57f af60 	bpl.w	800cea6 <_scanf_float+0x66>
 800cfe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cfea:	6022      	str	r2, [r4, #0]
 800cfec:	e7f4      	b.n	800cfd8 <_scanf_float+0x198>
 800cfee:	f1ba 0f00 	cmp.w	sl, #0
 800cff2:	d10c      	bne.n	800d00e <_scanf_float+0x1ce>
 800cff4:	b977      	cbnz	r7, 800d014 <_scanf_float+0x1d4>
 800cff6:	6822      	ldr	r2, [r4, #0]
 800cff8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cffc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d000:	d108      	bne.n	800d014 <_scanf_float+0x1d4>
 800d002:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d006:	6022      	str	r2, [r4, #0]
 800d008:	f04f 0a01 	mov.w	sl, #1
 800d00c:	e7e4      	b.n	800cfd8 <_scanf_float+0x198>
 800d00e:	f1ba 0f02 	cmp.w	sl, #2
 800d012:	d050      	beq.n	800d0b6 <_scanf_float+0x276>
 800d014:	2d01      	cmp	r5, #1
 800d016:	d002      	beq.n	800d01e <_scanf_float+0x1de>
 800d018:	2d04      	cmp	r5, #4
 800d01a:	f47f af44 	bne.w	800cea6 <_scanf_float+0x66>
 800d01e:	3501      	adds	r5, #1
 800d020:	b2ed      	uxtb	r5, r5
 800d022:	e7d9      	b.n	800cfd8 <_scanf_float+0x198>
 800d024:	f1ba 0f01 	cmp.w	sl, #1
 800d028:	f47f af3d 	bne.w	800cea6 <_scanf_float+0x66>
 800d02c:	f04f 0a02 	mov.w	sl, #2
 800d030:	e7d2      	b.n	800cfd8 <_scanf_float+0x198>
 800d032:	b975      	cbnz	r5, 800d052 <_scanf_float+0x212>
 800d034:	2f00      	cmp	r7, #0
 800d036:	f47f af37 	bne.w	800cea8 <_scanf_float+0x68>
 800d03a:	6822      	ldr	r2, [r4, #0]
 800d03c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d040:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d044:	f040 8103 	bne.w	800d24e <_scanf_float+0x40e>
 800d048:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d04c:	6022      	str	r2, [r4, #0]
 800d04e:	2501      	movs	r5, #1
 800d050:	e7c2      	b.n	800cfd8 <_scanf_float+0x198>
 800d052:	2d03      	cmp	r5, #3
 800d054:	d0e3      	beq.n	800d01e <_scanf_float+0x1de>
 800d056:	2d05      	cmp	r5, #5
 800d058:	e7df      	b.n	800d01a <_scanf_float+0x1da>
 800d05a:	2d02      	cmp	r5, #2
 800d05c:	f47f af23 	bne.w	800cea6 <_scanf_float+0x66>
 800d060:	2503      	movs	r5, #3
 800d062:	e7b9      	b.n	800cfd8 <_scanf_float+0x198>
 800d064:	2d06      	cmp	r5, #6
 800d066:	f47f af1e 	bne.w	800cea6 <_scanf_float+0x66>
 800d06a:	2507      	movs	r5, #7
 800d06c:	e7b4      	b.n	800cfd8 <_scanf_float+0x198>
 800d06e:	6822      	ldr	r2, [r4, #0]
 800d070:	0591      	lsls	r1, r2, #22
 800d072:	f57f af18 	bpl.w	800cea6 <_scanf_float+0x66>
 800d076:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d07a:	6022      	str	r2, [r4, #0]
 800d07c:	9702      	str	r7, [sp, #8]
 800d07e:	e7ab      	b.n	800cfd8 <_scanf_float+0x198>
 800d080:	6822      	ldr	r2, [r4, #0]
 800d082:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d086:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d08a:	d005      	beq.n	800d098 <_scanf_float+0x258>
 800d08c:	0550      	lsls	r0, r2, #21
 800d08e:	f57f af0a 	bpl.w	800cea6 <_scanf_float+0x66>
 800d092:	2f00      	cmp	r7, #0
 800d094:	f000 80db 	beq.w	800d24e <_scanf_float+0x40e>
 800d098:	0591      	lsls	r1, r2, #22
 800d09a:	bf58      	it	pl
 800d09c:	9902      	ldrpl	r1, [sp, #8]
 800d09e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d0a2:	bf58      	it	pl
 800d0a4:	1a79      	subpl	r1, r7, r1
 800d0a6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d0aa:	bf58      	it	pl
 800d0ac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d0b0:	6022      	str	r2, [r4, #0]
 800d0b2:	2700      	movs	r7, #0
 800d0b4:	e790      	b.n	800cfd8 <_scanf_float+0x198>
 800d0b6:	f04f 0a03 	mov.w	sl, #3
 800d0ba:	e78d      	b.n	800cfd8 <_scanf_float+0x198>
 800d0bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	4798      	blx	r3
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f43f aedf 	beq.w	800ce8a <_scanf_float+0x4a>
 800d0cc:	e6eb      	b.n	800cea6 <_scanf_float+0x66>
 800d0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d0d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d0d6:	464a      	mov	r2, r9
 800d0d8:	4640      	mov	r0, r8
 800d0da:	4798      	blx	r3
 800d0dc:	6923      	ldr	r3, [r4, #16]
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	6123      	str	r3, [r4, #16]
 800d0e2:	e6eb      	b.n	800cebc <_scanf_float+0x7c>
 800d0e4:	1e6b      	subs	r3, r5, #1
 800d0e6:	2b06      	cmp	r3, #6
 800d0e8:	d824      	bhi.n	800d134 <_scanf_float+0x2f4>
 800d0ea:	2d02      	cmp	r5, #2
 800d0ec:	d836      	bhi.n	800d15c <_scanf_float+0x31c>
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	429e      	cmp	r6, r3
 800d0f2:	f67f aee7 	bls.w	800cec4 <_scanf_float+0x84>
 800d0f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d0fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d0fe:	464a      	mov	r2, r9
 800d100:	4640      	mov	r0, r8
 800d102:	4798      	blx	r3
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	3b01      	subs	r3, #1
 800d108:	6123      	str	r3, [r4, #16]
 800d10a:	e7f0      	b.n	800d0ee <_scanf_float+0x2ae>
 800d10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d110:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d114:	464a      	mov	r2, r9
 800d116:	4640      	mov	r0, r8
 800d118:	4798      	blx	r3
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	6123      	str	r3, [r4, #16]
 800d120:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d124:	fa5f fa8a 	uxtb.w	sl, sl
 800d128:	f1ba 0f02 	cmp.w	sl, #2
 800d12c:	d1ee      	bne.n	800d10c <_scanf_float+0x2cc>
 800d12e:	3d03      	subs	r5, #3
 800d130:	b2ed      	uxtb	r5, r5
 800d132:	1b76      	subs	r6, r6, r5
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	05da      	lsls	r2, r3, #23
 800d138:	d530      	bpl.n	800d19c <_scanf_float+0x35c>
 800d13a:	055b      	lsls	r3, r3, #21
 800d13c:	d511      	bpl.n	800d162 <_scanf_float+0x322>
 800d13e:	9b01      	ldr	r3, [sp, #4]
 800d140:	429e      	cmp	r6, r3
 800d142:	f67f aebf 	bls.w	800cec4 <_scanf_float+0x84>
 800d146:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d14a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d14e:	464a      	mov	r2, r9
 800d150:	4640      	mov	r0, r8
 800d152:	4798      	blx	r3
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	3b01      	subs	r3, #1
 800d158:	6123      	str	r3, [r4, #16]
 800d15a:	e7f0      	b.n	800d13e <_scanf_float+0x2fe>
 800d15c:	46aa      	mov	sl, r5
 800d15e:	46b3      	mov	fp, r6
 800d160:	e7de      	b.n	800d120 <_scanf_float+0x2e0>
 800d162:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	2965      	cmp	r1, #101	@ 0x65
 800d16a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d16e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	d00c      	beq.n	800d190 <_scanf_float+0x350>
 800d176:	2945      	cmp	r1, #69	@ 0x45
 800d178:	d00a      	beq.n	800d190 <_scanf_float+0x350>
 800d17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d17e:	464a      	mov	r2, r9
 800d180:	4640      	mov	r0, r8
 800d182:	4798      	blx	r3
 800d184:	6923      	ldr	r3, [r4, #16]
 800d186:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	1eb5      	subs	r5, r6, #2
 800d18e:	6123      	str	r3, [r4, #16]
 800d190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d194:	464a      	mov	r2, r9
 800d196:	4640      	mov	r0, r8
 800d198:	4798      	blx	r3
 800d19a:	462e      	mov	r6, r5
 800d19c:	6822      	ldr	r2, [r4, #0]
 800d19e:	f012 0210 	ands.w	r2, r2, #16
 800d1a2:	d001      	beq.n	800d1a8 <_scanf_float+0x368>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	e68e      	b.n	800cec6 <_scanf_float+0x86>
 800d1a8:	7032      	strb	r2, [r6, #0]
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d1b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1b4:	d125      	bne.n	800d202 <_scanf_float+0x3c2>
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	429f      	cmp	r7, r3
 800d1ba:	d00a      	beq.n	800d1d2 <_scanf_float+0x392>
 800d1bc:	1bda      	subs	r2, r3, r7
 800d1be:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d1c2:	429e      	cmp	r6, r3
 800d1c4:	bf28      	it	cs
 800d1c6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d1ca:	4922      	ldr	r1, [pc, #136]	@ (800d254 <_scanf_float+0x414>)
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f000 f907 	bl	800d3e0 <siprintf>
 800d1d2:	9901      	ldr	r1, [sp, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	f002 fb56 	bl	800f888 <_strtod_r>
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	6821      	ldr	r1, [r4, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f011 0f02 	tst.w	r1, #2
 800d1e6:	ec57 6b10 	vmov	r6, r7, d0
 800d1ea:	f103 0204 	add.w	r2, r3, #4
 800d1ee:	d015      	beq.n	800d21c <_scanf_float+0x3dc>
 800d1f0:	9903      	ldr	r1, [sp, #12]
 800d1f2:	600a      	str	r2, [r1, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	e9c3 6700 	strd	r6, r7, [r3]
 800d1fa:	68e3      	ldr	r3, [r4, #12]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	60e3      	str	r3, [r4, #12]
 800d200:	e7d0      	b.n	800d1a4 <_scanf_float+0x364>
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0e4      	beq.n	800d1d2 <_scanf_float+0x392>
 800d208:	9905      	ldr	r1, [sp, #20]
 800d20a:	230a      	movs	r3, #10
 800d20c:	3101      	adds	r1, #1
 800d20e:	4640      	mov	r0, r8
 800d210:	f002 fbba 	bl	800f988 <_strtol_r>
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	9e05      	ldr	r6, [sp, #20]
 800d218:	1ac2      	subs	r2, r0, r3
 800d21a:	e7d0      	b.n	800d1be <_scanf_float+0x37e>
 800d21c:	f011 0f04 	tst.w	r1, #4
 800d220:	9903      	ldr	r1, [sp, #12]
 800d222:	600a      	str	r2, [r1, #0]
 800d224:	d1e6      	bne.n	800d1f4 <_scanf_float+0x3b4>
 800d226:	681d      	ldr	r5, [r3, #0]
 800d228:	4632      	mov	r2, r6
 800d22a:	463b      	mov	r3, r7
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 fc9c 	bl	8000b6c <__aeabi_dcmpun>
 800d234:	b128      	cbz	r0, 800d242 <_scanf_float+0x402>
 800d236:	4808      	ldr	r0, [pc, #32]	@ (800d258 <_scanf_float+0x418>)
 800d238:	f000 f9c8 	bl	800d5cc <nanf>
 800d23c:	ed85 0a00 	vstr	s0, [r5]
 800d240:	e7db      	b.n	800d1fa <_scanf_float+0x3ba>
 800d242:	4630      	mov	r0, r6
 800d244:	4639      	mov	r1, r7
 800d246:	f7f3 fcef 	bl	8000c28 <__aeabi_d2f>
 800d24a:	6028      	str	r0, [r5, #0]
 800d24c:	e7d5      	b.n	800d1fa <_scanf_float+0x3ba>
 800d24e:	2700      	movs	r7, #0
 800d250:	e62e      	b.n	800ceb0 <_scanf_float+0x70>
 800d252:	bf00      	nop
 800d254:	08011b68 	.word	0x08011b68
 800d258:	08011ca9 	.word	0x08011ca9

0800d25c <std>:
 800d25c:	2300      	movs	r3, #0
 800d25e:	b510      	push	{r4, lr}
 800d260:	4604      	mov	r4, r0
 800d262:	e9c0 3300 	strd	r3, r3, [r0]
 800d266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d26a:	6083      	str	r3, [r0, #8]
 800d26c:	8181      	strh	r1, [r0, #12]
 800d26e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d270:	81c2      	strh	r2, [r0, #14]
 800d272:	6183      	str	r3, [r0, #24]
 800d274:	4619      	mov	r1, r3
 800d276:	2208      	movs	r2, #8
 800d278:	305c      	adds	r0, #92	@ 0x5c
 800d27a:	f000 f916 	bl	800d4aa <memset>
 800d27e:	4b0d      	ldr	r3, [pc, #52]	@ (800d2b4 <std+0x58>)
 800d280:	6263      	str	r3, [r4, #36]	@ 0x24
 800d282:	4b0d      	ldr	r3, [pc, #52]	@ (800d2b8 <std+0x5c>)
 800d284:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d286:	4b0d      	ldr	r3, [pc, #52]	@ (800d2bc <std+0x60>)
 800d288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d28a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c0 <std+0x64>)
 800d28c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d28e:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c4 <std+0x68>)
 800d290:	6224      	str	r4, [r4, #32]
 800d292:	429c      	cmp	r4, r3
 800d294:	d006      	beq.n	800d2a4 <std+0x48>
 800d296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d29a:	4294      	cmp	r4, r2
 800d29c:	d002      	beq.n	800d2a4 <std+0x48>
 800d29e:	33d0      	adds	r3, #208	@ 0xd0
 800d2a0:	429c      	cmp	r4, r3
 800d2a2:	d105      	bne.n	800d2b0 <std+0x54>
 800d2a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ac:	f000 b98a 	b.w	800d5c4 <__retarget_lock_init_recursive>
 800d2b0:	bd10      	pop	{r4, pc}
 800d2b2:	bf00      	nop
 800d2b4:	0800d425 	.word	0x0800d425
 800d2b8:	0800d447 	.word	0x0800d447
 800d2bc:	0800d47f 	.word	0x0800d47f
 800d2c0:	0800d4a3 	.word	0x0800d4a3
 800d2c4:	20000b80 	.word	0x20000b80

0800d2c8 <stdio_exit_handler>:
 800d2c8:	4a02      	ldr	r2, [pc, #8]	@ (800d2d4 <stdio_exit_handler+0xc>)
 800d2ca:	4903      	ldr	r1, [pc, #12]	@ (800d2d8 <stdio_exit_handler+0x10>)
 800d2cc:	4803      	ldr	r0, [pc, #12]	@ (800d2dc <stdio_exit_handler+0x14>)
 800d2ce:	f000 b869 	b.w	800d3a4 <_fwalk_sglue>
 800d2d2:	bf00      	nop
 800d2d4:	20000024 	.word	0x20000024
 800d2d8:	0800fd45 	.word	0x0800fd45
 800d2dc:	20000034 	.word	0x20000034

0800d2e0 <cleanup_stdio>:
 800d2e0:	6841      	ldr	r1, [r0, #4]
 800d2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d314 <cleanup_stdio+0x34>)
 800d2e4:	4299      	cmp	r1, r3
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	d001      	beq.n	800d2f0 <cleanup_stdio+0x10>
 800d2ec:	f002 fd2a 	bl	800fd44 <_fflush_r>
 800d2f0:	68a1      	ldr	r1, [r4, #8]
 800d2f2:	4b09      	ldr	r3, [pc, #36]	@ (800d318 <cleanup_stdio+0x38>)
 800d2f4:	4299      	cmp	r1, r3
 800d2f6:	d002      	beq.n	800d2fe <cleanup_stdio+0x1e>
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f002 fd23 	bl	800fd44 <_fflush_r>
 800d2fe:	68e1      	ldr	r1, [r4, #12]
 800d300:	4b06      	ldr	r3, [pc, #24]	@ (800d31c <cleanup_stdio+0x3c>)
 800d302:	4299      	cmp	r1, r3
 800d304:	d004      	beq.n	800d310 <cleanup_stdio+0x30>
 800d306:	4620      	mov	r0, r4
 800d308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d30c:	f002 bd1a 	b.w	800fd44 <_fflush_r>
 800d310:	bd10      	pop	{r4, pc}
 800d312:	bf00      	nop
 800d314:	20000b80 	.word	0x20000b80
 800d318:	20000be8 	.word	0x20000be8
 800d31c:	20000c50 	.word	0x20000c50

0800d320 <global_stdio_init.part.0>:
 800d320:	b510      	push	{r4, lr}
 800d322:	4b0b      	ldr	r3, [pc, #44]	@ (800d350 <global_stdio_init.part.0+0x30>)
 800d324:	4c0b      	ldr	r4, [pc, #44]	@ (800d354 <global_stdio_init.part.0+0x34>)
 800d326:	4a0c      	ldr	r2, [pc, #48]	@ (800d358 <global_stdio_init.part.0+0x38>)
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	4620      	mov	r0, r4
 800d32c:	2200      	movs	r2, #0
 800d32e:	2104      	movs	r1, #4
 800d330:	f7ff ff94 	bl	800d25c <std>
 800d334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d338:	2201      	movs	r2, #1
 800d33a:	2109      	movs	r1, #9
 800d33c:	f7ff ff8e 	bl	800d25c <std>
 800d340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d344:	2202      	movs	r2, #2
 800d346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d34a:	2112      	movs	r1, #18
 800d34c:	f7ff bf86 	b.w	800d25c <std>
 800d350:	20000cb8 	.word	0x20000cb8
 800d354:	20000b80 	.word	0x20000b80
 800d358:	0800d2c9 	.word	0x0800d2c9

0800d35c <__sfp_lock_acquire>:
 800d35c:	4801      	ldr	r0, [pc, #4]	@ (800d364 <__sfp_lock_acquire+0x8>)
 800d35e:	f000 b932 	b.w	800d5c6 <__retarget_lock_acquire_recursive>
 800d362:	bf00      	nop
 800d364:	20000cc1 	.word	0x20000cc1

0800d368 <__sfp_lock_release>:
 800d368:	4801      	ldr	r0, [pc, #4]	@ (800d370 <__sfp_lock_release+0x8>)
 800d36a:	f000 b92d 	b.w	800d5c8 <__retarget_lock_release_recursive>
 800d36e:	bf00      	nop
 800d370:	20000cc1 	.word	0x20000cc1

0800d374 <__sinit>:
 800d374:	b510      	push	{r4, lr}
 800d376:	4604      	mov	r4, r0
 800d378:	f7ff fff0 	bl	800d35c <__sfp_lock_acquire>
 800d37c:	6a23      	ldr	r3, [r4, #32]
 800d37e:	b11b      	cbz	r3, 800d388 <__sinit+0x14>
 800d380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d384:	f7ff bff0 	b.w	800d368 <__sfp_lock_release>
 800d388:	4b04      	ldr	r3, [pc, #16]	@ (800d39c <__sinit+0x28>)
 800d38a:	6223      	str	r3, [r4, #32]
 800d38c:	4b04      	ldr	r3, [pc, #16]	@ (800d3a0 <__sinit+0x2c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1f5      	bne.n	800d380 <__sinit+0xc>
 800d394:	f7ff ffc4 	bl	800d320 <global_stdio_init.part.0>
 800d398:	e7f2      	b.n	800d380 <__sinit+0xc>
 800d39a:	bf00      	nop
 800d39c:	0800d2e1 	.word	0x0800d2e1
 800d3a0:	20000cb8 	.word	0x20000cb8

0800d3a4 <_fwalk_sglue>:
 800d3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	4688      	mov	r8, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d3b8:	d505      	bpl.n	800d3c6 <_fwalk_sglue+0x22>
 800d3ba:	6824      	ldr	r4, [r4, #0]
 800d3bc:	2c00      	cmp	r4, #0
 800d3be:	d1f7      	bne.n	800d3b0 <_fwalk_sglue+0xc>
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3c6:	89ab      	ldrh	r3, [r5, #12]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d907      	bls.n	800d3dc <_fwalk_sglue+0x38>
 800d3cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	d003      	beq.n	800d3dc <_fwalk_sglue+0x38>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	47c0      	blx	r8
 800d3da:	4306      	orrs	r6, r0
 800d3dc:	3568      	adds	r5, #104	@ 0x68
 800d3de:	e7e9      	b.n	800d3b4 <_fwalk_sglue+0x10>

0800d3e0 <siprintf>:
 800d3e0:	b40e      	push	{r1, r2, r3}
 800d3e2:	b510      	push	{r4, lr}
 800d3e4:	b09d      	sub	sp, #116	@ 0x74
 800d3e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d3e8:	9002      	str	r0, [sp, #8]
 800d3ea:	9006      	str	r0, [sp, #24]
 800d3ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d3f0:	480a      	ldr	r0, [pc, #40]	@ (800d41c <siprintf+0x3c>)
 800d3f2:	9107      	str	r1, [sp, #28]
 800d3f4:	9104      	str	r1, [sp, #16]
 800d3f6:	490a      	ldr	r1, [pc, #40]	@ (800d420 <siprintf+0x40>)
 800d3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3fc:	9105      	str	r1, [sp, #20]
 800d3fe:	2400      	movs	r4, #0
 800d400:	a902      	add	r1, sp, #8
 800d402:	6800      	ldr	r0, [r0, #0]
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d408:	f002 fb1c 	bl	800fa44 <_svfiprintf_r>
 800d40c:	9b02      	ldr	r3, [sp, #8]
 800d40e:	701c      	strb	r4, [r3, #0]
 800d410:	b01d      	add	sp, #116	@ 0x74
 800d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d416:	b003      	add	sp, #12
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	20000030 	.word	0x20000030
 800d420:	ffff0208 	.word	0xffff0208

0800d424 <__sread>:
 800d424:	b510      	push	{r4, lr}
 800d426:	460c      	mov	r4, r1
 800d428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42c:	f000 f86c 	bl	800d508 <_read_r>
 800d430:	2800      	cmp	r0, #0
 800d432:	bfab      	itete	ge
 800d434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d436:	89a3      	ldrhlt	r3, [r4, #12]
 800d438:	181b      	addge	r3, r3, r0
 800d43a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d43e:	bfac      	ite	ge
 800d440:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d442:	81a3      	strhlt	r3, [r4, #12]
 800d444:	bd10      	pop	{r4, pc}

0800d446 <__swrite>:
 800d446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44a:	461f      	mov	r7, r3
 800d44c:	898b      	ldrh	r3, [r1, #12]
 800d44e:	05db      	lsls	r3, r3, #23
 800d450:	4605      	mov	r5, r0
 800d452:	460c      	mov	r4, r1
 800d454:	4616      	mov	r6, r2
 800d456:	d505      	bpl.n	800d464 <__swrite+0x1e>
 800d458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45c:	2302      	movs	r3, #2
 800d45e:	2200      	movs	r2, #0
 800d460:	f000 f840 	bl	800d4e4 <_lseek_r>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d46a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	4632      	mov	r2, r6
 800d472:	463b      	mov	r3, r7
 800d474:	4628      	mov	r0, r5
 800d476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d47a:	f000 b867 	b.w	800d54c <_write_r>

0800d47e <__sseek>:
 800d47e:	b510      	push	{r4, lr}
 800d480:	460c      	mov	r4, r1
 800d482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d486:	f000 f82d 	bl	800d4e4 <_lseek_r>
 800d48a:	1c43      	adds	r3, r0, #1
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	bf15      	itete	ne
 800d490:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d49a:	81a3      	strheq	r3, [r4, #12]
 800d49c:	bf18      	it	ne
 800d49e:	81a3      	strhne	r3, [r4, #12]
 800d4a0:	bd10      	pop	{r4, pc}

0800d4a2 <__sclose>:
 800d4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a6:	f000 b80d 	b.w	800d4c4 <_close_r>

0800d4aa <memset>:
 800d4aa:	4402      	add	r2, r0
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d100      	bne.n	800d4b4 <memset+0xa>
 800d4b2:	4770      	bx	lr
 800d4b4:	f803 1b01 	strb.w	r1, [r3], #1
 800d4b8:	e7f9      	b.n	800d4ae <memset+0x4>
	...

0800d4bc <_localeconv_r>:
 800d4bc:	4800      	ldr	r0, [pc, #0]	@ (800d4c0 <_localeconv_r+0x4>)
 800d4be:	4770      	bx	lr
 800d4c0:	20000170 	.word	0x20000170

0800d4c4 <_close_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d06      	ldr	r5, [pc, #24]	@ (800d4e0 <_close_r+0x1c>)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	602b      	str	r3, [r5, #0]
 800d4d0:	f7f4 feb0 	bl	8002234 <_close>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	d102      	bne.n	800d4de <_close_r+0x1a>
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	b103      	cbz	r3, 800d4de <_close_r+0x1a>
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	bd38      	pop	{r3, r4, r5, pc}
 800d4e0:	20000cbc 	.word	0x20000cbc

0800d4e4 <_lseek_r>:
 800d4e4:	b538      	push	{r3, r4, r5, lr}
 800d4e6:	4d07      	ldr	r5, [pc, #28]	@ (800d504 <_lseek_r+0x20>)
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	4608      	mov	r0, r1
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	602a      	str	r2, [r5, #0]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	f7f4 fec5 	bl	8002282 <_lseek>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d102      	bne.n	800d502 <_lseek_r+0x1e>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b103      	cbz	r3, 800d502 <_lseek_r+0x1e>
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	bd38      	pop	{r3, r4, r5, pc}
 800d504:	20000cbc 	.word	0x20000cbc

0800d508 <_read_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d07      	ldr	r5, [pc, #28]	@ (800d528 <_read_r+0x20>)
 800d50c:	4604      	mov	r4, r0
 800d50e:	4608      	mov	r0, r1
 800d510:	4611      	mov	r1, r2
 800d512:	2200      	movs	r2, #0
 800d514:	602a      	str	r2, [r5, #0]
 800d516:	461a      	mov	r2, r3
 800d518:	f7f4 fe53 	bl	80021c2 <_read>
 800d51c:	1c43      	adds	r3, r0, #1
 800d51e:	d102      	bne.n	800d526 <_read_r+0x1e>
 800d520:	682b      	ldr	r3, [r5, #0]
 800d522:	b103      	cbz	r3, 800d526 <_read_r+0x1e>
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	20000cbc 	.word	0x20000cbc

0800d52c <_sbrk_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4d06      	ldr	r5, [pc, #24]	@ (800d548 <_sbrk_r+0x1c>)
 800d530:	2300      	movs	r3, #0
 800d532:	4604      	mov	r4, r0
 800d534:	4608      	mov	r0, r1
 800d536:	602b      	str	r3, [r5, #0]
 800d538:	f7f4 feb0 	bl	800229c <_sbrk>
 800d53c:	1c43      	adds	r3, r0, #1
 800d53e:	d102      	bne.n	800d546 <_sbrk_r+0x1a>
 800d540:	682b      	ldr	r3, [r5, #0]
 800d542:	b103      	cbz	r3, 800d546 <_sbrk_r+0x1a>
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	20000cbc 	.word	0x20000cbc

0800d54c <_write_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	@ (800d56c <_write_r+0x20>)
 800d550:	4604      	mov	r4, r0
 800d552:	4608      	mov	r0, r1
 800d554:	4611      	mov	r1, r2
 800d556:	2200      	movs	r2, #0
 800d558:	602a      	str	r2, [r5, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	f7f4 fe4e 	bl	80021fc <_write>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_write_r+0x1e>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	b103      	cbz	r3, 800d56a <_write_r+0x1e>
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	20000cbc 	.word	0x20000cbc

0800d570 <__errno>:
 800d570:	4b01      	ldr	r3, [pc, #4]	@ (800d578 <__errno+0x8>)
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20000030 	.word	0x20000030

0800d57c <__libc_init_array>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	4d0d      	ldr	r5, [pc, #52]	@ (800d5b4 <__libc_init_array+0x38>)
 800d580:	4c0d      	ldr	r4, [pc, #52]	@ (800d5b8 <__libc_init_array+0x3c>)
 800d582:	1b64      	subs	r4, r4, r5
 800d584:	10a4      	asrs	r4, r4, #2
 800d586:	2600      	movs	r6, #0
 800d588:	42a6      	cmp	r6, r4
 800d58a:	d109      	bne.n	800d5a0 <__libc_init_array+0x24>
 800d58c:	4d0b      	ldr	r5, [pc, #44]	@ (800d5bc <__libc_init_array+0x40>)
 800d58e:	4c0c      	ldr	r4, [pc, #48]	@ (800d5c0 <__libc_init_array+0x44>)
 800d590:	f004 fa04 	bl	801199c <_init>
 800d594:	1b64      	subs	r4, r4, r5
 800d596:	10a4      	asrs	r4, r4, #2
 800d598:	2600      	movs	r6, #0
 800d59a:	42a6      	cmp	r6, r4
 800d59c:	d105      	bne.n	800d5aa <__libc_init_array+0x2e>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5a4:	4798      	blx	r3
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7ee      	b.n	800d588 <__libc_init_array+0xc>
 800d5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ae:	4798      	blx	r3
 800d5b0:	3601      	adds	r6, #1
 800d5b2:	e7f2      	b.n	800d59a <__libc_init_array+0x1e>
 800d5b4:	08011fa8 	.word	0x08011fa8
 800d5b8:	08011fa8 	.word	0x08011fa8
 800d5bc:	08011fa8 	.word	0x08011fa8
 800d5c0:	08011fac 	.word	0x08011fac

0800d5c4 <__retarget_lock_init_recursive>:
 800d5c4:	4770      	bx	lr

0800d5c6 <__retarget_lock_acquire_recursive>:
 800d5c6:	4770      	bx	lr

0800d5c8 <__retarget_lock_release_recursive>:
 800d5c8:	4770      	bx	lr
	...

0800d5cc <nanf>:
 800d5cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d5d4 <nanf+0x8>
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	7fc00000 	.word	0x7fc00000

0800d5d8 <quorem>:
 800d5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5dc:	6903      	ldr	r3, [r0, #16]
 800d5de:	690c      	ldr	r4, [r1, #16]
 800d5e0:	42a3      	cmp	r3, r4
 800d5e2:	4607      	mov	r7, r0
 800d5e4:	db7e      	blt.n	800d6e4 <quorem+0x10c>
 800d5e6:	3c01      	subs	r4, #1
 800d5e8:	f101 0814 	add.w	r8, r1, #20
 800d5ec:	00a3      	lsls	r3, r4, #2
 800d5ee:	f100 0514 	add.w	r5, r0, #20
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d5fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d602:	3301      	adds	r3, #1
 800d604:	429a      	cmp	r2, r3
 800d606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d60a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d60e:	d32e      	bcc.n	800d66e <quorem+0x96>
 800d610:	f04f 0a00 	mov.w	sl, #0
 800d614:	46c4      	mov	ip, r8
 800d616:	46ae      	mov	lr, r5
 800d618:	46d3      	mov	fp, sl
 800d61a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d61e:	b298      	uxth	r0, r3
 800d620:	fb06 a000 	mla	r0, r6, r0, sl
 800d624:	0c02      	lsrs	r2, r0, #16
 800d626:	0c1b      	lsrs	r3, r3, #16
 800d628:	fb06 2303 	mla	r3, r6, r3, r2
 800d62c:	f8de 2000 	ldr.w	r2, [lr]
 800d630:	b280      	uxth	r0, r0
 800d632:	b292      	uxth	r2, r2
 800d634:	1a12      	subs	r2, r2, r0
 800d636:	445a      	add	r2, fp
 800d638:	f8de 0000 	ldr.w	r0, [lr]
 800d63c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d640:	b29b      	uxth	r3, r3
 800d642:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d646:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d64a:	b292      	uxth	r2, r2
 800d64c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d650:	45e1      	cmp	r9, ip
 800d652:	f84e 2b04 	str.w	r2, [lr], #4
 800d656:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d65a:	d2de      	bcs.n	800d61a <quorem+0x42>
 800d65c:	9b00      	ldr	r3, [sp, #0]
 800d65e:	58eb      	ldr	r3, [r5, r3]
 800d660:	b92b      	cbnz	r3, 800d66e <quorem+0x96>
 800d662:	9b01      	ldr	r3, [sp, #4]
 800d664:	3b04      	subs	r3, #4
 800d666:	429d      	cmp	r5, r3
 800d668:	461a      	mov	r2, r3
 800d66a:	d32f      	bcc.n	800d6cc <quorem+0xf4>
 800d66c:	613c      	str	r4, [r7, #16]
 800d66e:	4638      	mov	r0, r7
 800d670:	f001 f918 	bl	800e8a4 <__mcmp>
 800d674:	2800      	cmp	r0, #0
 800d676:	db25      	blt.n	800d6c4 <quorem+0xec>
 800d678:	4629      	mov	r1, r5
 800d67a:	2000      	movs	r0, #0
 800d67c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d680:	f8d1 c000 	ldr.w	ip, [r1]
 800d684:	fa1f fe82 	uxth.w	lr, r2
 800d688:	fa1f f38c 	uxth.w	r3, ip
 800d68c:	eba3 030e 	sub.w	r3, r3, lr
 800d690:	4403      	add	r3, r0
 800d692:	0c12      	lsrs	r2, r2, #16
 800d694:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d698:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6a2:	45c1      	cmp	r9, r8
 800d6a4:	f841 3b04 	str.w	r3, [r1], #4
 800d6a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6ac:	d2e6      	bcs.n	800d67c <quorem+0xa4>
 800d6ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6b6:	b922      	cbnz	r2, 800d6c2 <quorem+0xea>
 800d6b8:	3b04      	subs	r3, #4
 800d6ba:	429d      	cmp	r5, r3
 800d6bc:	461a      	mov	r2, r3
 800d6be:	d30b      	bcc.n	800d6d8 <quorem+0x100>
 800d6c0:	613c      	str	r4, [r7, #16]
 800d6c2:	3601      	adds	r6, #1
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	b003      	add	sp, #12
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	6812      	ldr	r2, [r2, #0]
 800d6ce:	3b04      	subs	r3, #4
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	d1cb      	bne.n	800d66c <quorem+0x94>
 800d6d4:	3c01      	subs	r4, #1
 800d6d6:	e7c6      	b.n	800d666 <quorem+0x8e>
 800d6d8:	6812      	ldr	r2, [r2, #0]
 800d6da:	3b04      	subs	r3, #4
 800d6dc:	2a00      	cmp	r2, #0
 800d6de:	d1ef      	bne.n	800d6c0 <quorem+0xe8>
 800d6e0:	3c01      	subs	r4, #1
 800d6e2:	e7ea      	b.n	800d6ba <quorem+0xe2>
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	e7ee      	b.n	800d6c6 <quorem+0xee>

0800d6e8 <_dtoa_r>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	69c7      	ldr	r7, [r0, #28]
 800d6ee:	b097      	sub	sp, #92	@ 0x5c
 800d6f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d6f4:	ec55 4b10 	vmov	r4, r5, d0
 800d6f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d6fa:	9107      	str	r1, [sp, #28]
 800d6fc:	4681      	mov	r9, r0
 800d6fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800d700:	9311      	str	r3, [sp, #68]	@ 0x44
 800d702:	b97f      	cbnz	r7, 800d724 <_dtoa_r+0x3c>
 800d704:	2010      	movs	r0, #16
 800d706:	f000 fe09 	bl	800e31c <malloc>
 800d70a:	4602      	mov	r2, r0
 800d70c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d710:	b920      	cbnz	r0, 800d71c <_dtoa_r+0x34>
 800d712:	4ba9      	ldr	r3, [pc, #676]	@ (800d9b8 <_dtoa_r+0x2d0>)
 800d714:	21ef      	movs	r1, #239	@ 0xef
 800d716:	48a9      	ldr	r0, [pc, #676]	@ (800d9bc <_dtoa_r+0x2d4>)
 800d718:	f002 fb7e 	bl	800fe18 <__assert_func>
 800d71c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d720:	6007      	str	r7, [r0, #0]
 800d722:	60c7      	str	r7, [r0, #12]
 800d724:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	b159      	cbz	r1, 800d744 <_dtoa_r+0x5c>
 800d72c:	685a      	ldr	r2, [r3, #4]
 800d72e:	604a      	str	r2, [r1, #4]
 800d730:	2301      	movs	r3, #1
 800d732:	4093      	lsls	r3, r2
 800d734:	608b      	str	r3, [r1, #8]
 800d736:	4648      	mov	r0, r9
 800d738:	f000 fe38 	bl	800e3ac <_Bfree>
 800d73c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	1e2b      	subs	r3, r5, #0
 800d746:	bfb9      	ittee	lt
 800d748:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d74c:	9305      	strlt	r3, [sp, #20]
 800d74e:	2300      	movge	r3, #0
 800d750:	6033      	strge	r3, [r6, #0]
 800d752:	9f05      	ldr	r7, [sp, #20]
 800d754:	4b9a      	ldr	r3, [pc, #616]	@ (800d9c0 <_dtoa_r+0x2d8>)
 800d756:	bfbc      	itt	lt
 800d758:	2201      	movlt	r2, #1
 800d75a:	6032      	strlt	r2, [r6, #0]
 800d75c:	43bb      	bics	r3, r7
 800d75e:	d112      	bne.n	800d786 <_dtoa_r+0x9e>
 800d760:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d762:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d76c:	4323      	orrs	r3, r4
 800d76e:	f000 855a 	beq.w	800e226 <_dtoa_r+0xb3e>
 800d772:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d774:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d9d4 <_dtoa_r+0x2ec>
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 855c 	beq.w	800e236 <_dtoa_r+0xb4e>
 800d77e:	f10a 0303 	add.w	r3, sl, #3
 800d782:	f000 bd56 	b.w	800e232 <_dtoa_r+0xb4a>
 800d786:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d78a:	2200      	movs	r2, #0
 800d78c:	ec51 0b17 	vmov	r0, r1, d7
 800d790:	2300      	movs	r3, #0
 800d792:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d796:	f7f3 f9b7 	bl	8000b08 <__aeabi_dcmpeq>
 800d79a:	4680      	mov	r8, r0
 800d79c:	b158      	cbz	r0, 800d7b6 <_dtoa_r+0xce>
 800d79e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7a6:	b113      	cbz	r3, 800d7ae <_dtoa_r+0xc6>
 800d7a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d7aa:	4b86      	ldr	r3, [pc, #536]	@ (800d9c4 <_dtoa_r+0x2dc>)
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d9d8 <_dtoa_r+0x2f0>
 800d7b2:	f000 bd40 	b.w	800e236 <_dtoa_r+0xb4e>
 800d7b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d7ba:	aa14      	add	r2, sp, #80	@ 0x50
 800d7bc:	a915      	add	r1, sp, #84	@ 0x54
 800d7be:	4648      	mov	r0, r9
 800d7c0:	f001 f990 	bl	800eae4 <__d2b>
 800d7c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d7c8:	9002      	str	r0, [sp, #8]
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	d078      	beq.n	800d8c0 <_dtoa_r+0x1d8>
 800d7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d7dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d7e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d7e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	4b76      	ldr	r3, [pc, #472]	@ (800d9c8 <_dtoa_r+0x2e0>)
 800d7ee:	f7f2 fd6b 	bl	80002c8 <__aeabi_dsub>
 800d7f2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d9a0 <_dtoa_r+0x2b8>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 ff1e 	bl	8000638 <__aeabi_dmul>
 800d7fc:	a36a      	add	r3, pc, #424	@ (adr r3, 800d9a8 <_dtoa_r+0x2c0>)
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	f7f2 fd63 	bl	80002cc <__adddf3>
 800d806:	4604      	mov	r4, r0
 800d808:	4630      	mov	r0, r6
 800d80a:	460d      	mov	r5, r1
 800d80c:	f7f2 feaa 	bl	8000564 <__aeabi_i2d>
 800d810:	a367      	add	r3, pc, #412	@ (adr r3, 800d9b0 <_dtoa_r+0x2c8>)
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f7f2 ff0f 	bl	8000638 <__aeabi_dmul>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	f7f2 fd53 	bl	80002cc <__adddf3>
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	f7f3 f9b5 	bl	8000b98 <__aeabi_d2iz>
 800d82e:	2200      	movs	r2, #0
 800d830:	4607      	mov	r7, r0
 800d832:	2300      	movs	r3, #0
 800d834:	4620      	mov	r0, r4
 800d836:	4629      	mov	r1, r5
 800d838:	f7f3 f970 	bl	8000b1c <__aeabi_dcmplt>
 800d83c:	b140      	cbz	r0, 800d850 <_dtoa_r+0x168>
 800d83e:	4638      	mov	r0, r7
 800d840:	f7f2 fe90 	bl	8000564 <__aeabi_i2d>
 800d844:	4622      	mov	r2, r4
 800d846:	462b      	mov	r3, r5
 800d848:	f7f3 f95e 	bl	8000b08 <__aeabi_dcmpeq>
 800d84c:	b900      	cbnz	r0, 800d850 <_dtoa_r+0x168>
 800d84e:	3f01      	subs	r7, #1
 800d850:	2f16      	cmp	r7, #22
 800d852:	d852      	bhi.n	800d8fa <_dtoa_r+0x212>
 800d854:	4b5d      	ldr	r3, [pc, #372]	@ (800d9cc <_dtoa_r+0x2e4>)
 800d856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d862:	f7f3 f95b 	bl	8000b1c <__aeabi_dcmplt>
 800d866:	2800      	cmp	r0, #0
 800d868:	d049      	beq.n	800d8fe <_dtoa_r+0x216>
 800d86a:	3f01      	subs	r7, #1
 800d86c:	2300      	movs	r3, #0
 800d86e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d870:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d872:	1b9b      	subs	r3, r3, r6
 800d874:	1e5a      	subs	r2, r3, #1
 800d876:	bf45      	ittet	mi
 800d878:	f1c3 0301 	rsbmi	r3, r3, #1
 800d87c:	9300      	strmi	r3, [sp, #0]
 800d87e:	2300      	movpl	r3, #0
 800d880:	2300      	movmi	r3, #0
 800d882:	9206      	str	r2, [sp, #24]
 800d884:	bf54      	ite	pl
 800d886:	9300      	strpl	r3, [sp, #0]
 800d888:	9306      	strmi	r3, [sp, #24]
 800d88a:	2f00      	cmp	r7, #0
 800d88c:	db39      	blt.n	800d902 <_dtoa_r+0x21a>
 800d88e:	9b06      	ldr	r3, [sp, #24]
 800d890:	970d      	str	r7, [sp, #52]	@ 0x34
 800d892:	443b      	add	r3, r7
 800d894:	9306      	str	r3, [sp, #24]
 800d896:	2300      	movs	r3, #0
 800d898:	9308      	str	r3, [sp, #32]
 800d89a:	9b07      	ldr	r3, [sp, #28]
 800d89c:	2b09      	cmp	r3, #9
 800d89e:	d863      	bhi.n	800d968 <_dtoa_r+0x280>
 800d8a0:	2b05      	cmp	r3, #5
 800d8a2:	bfc4      	itt	gt
 800d8a4:	3b04      	subgt	r3, #4
 800d8a6:	9307      	strgt	r3, [sp, #28]
 800d8a8:	9b07      	ldr	r3, [sp, #28]
 800d8aa:	f1a3 0302 	sub.w	r3, r3, #2
 800d8ae:	bfcc      	ite	gt
 800d8b0:	2400      	movgt	r4, #0
 800d8b2:	2401      	movle	r4, #1
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	d863      	bhi.n	800d980 <_dtoa_r+0x298>
 800d8b8:	e8df f003 	tbb	[pc, r3]
 800d8bc:	2b375452 	.word	0x2b375452
 800d8c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d8c4:	441e      	add	r6, r3
 800d8c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d8ca:	2b20      	cmp	r3, #32
 800d8cc:	bfc1      	itttt	gt
 800d8ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d8d2:	409f      	lslgt	r7, r3
 800d8d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d8d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d8dc:	bfd6      	itet	le
 800d8de:	f1c3 0320 	rsble	r3, r3, #32
 800d8e2:	ea47 0003 	orrgt.w	r0, r7, r3
 800d8e6:	fa04 f003 	lslle.w	r0, r4, r3
 800d8ea:	f7f2 fe2b 	bl	8000544 <__aeabi_ui2d>
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d8f4:	3e01      	subs	r6, #1
 800d8f6:	9212      	str	r2, [sp, #72]	@ 0x48
 800d8f8:	e776      	b.n	800d7e8 <_dtoa_r+0x100>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e7b7      	b.n	800d86e <_dtoa_r+0x186>
 800d8fe:	9010      	str	r0, [sp, #64]	@ 0x40
 800d900:	e7b6      	b.n	800d870 <_dtoa_r+0x188>
 800d902:	9b00      	ldr	r3, [sp, #0]
 800d904:	1bdb      	subs	r3, r3, r7
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	427b      	negs	r3, r7
 800d90a:	9308      	str	r3, [sp, #32]
 800d90c:	2300      	movs	r3, #0
 800d90e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d910:	e7c3      	b.n	800d89a <_dtoa_r+0x1b2>
 800d912:	2301      	movs	r3, #1
 800d914:	9309      	str	r3, [sp, #36]	@ 0x24
 800d916:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d918:	eb07 0b03 	add.w	fp, r7, r3
 800d91c:	f10b 0301 	add.w	r3, fp, #1
 800d920:	2b01      	cmp	r3, #1
 800d922:	9303      	str	r3, [sp, #12]
 800d924:	bfb8      	it	lt
 800d926:	2301      	movlt	r3, #1
 800d928:	e006      	b.n	800d938 <_dtoa_r+0x250>
 800d92a:	2301      	movs	r3, #1
 800d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d930:	2b00      	cmp	r3, #0
 800d932:	dd28      	ble.n	800d986 <_dtoa_r+0x29e>
 800d934:	469b      	mov	fp, r3
 800d936:	9303      	str	r3, [sp, #12]
 800d938:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d93c:	2100      	movs	r1, #0
 800d93e:	2204      	movs	r2, #4
 800d940:	f102 0514 	add.w	r5, r2, #20
 800d944:	429d      	cmp	r5, r3
 800d946:	d926      	bls.n	800d996 <_dtoa_r+0x2ae>
 800d948:	6041      	str	r1, [r0, #4]
 800d94a:	4648      	mov	r0, r9
 800d94c:	f000 fcee 	bl	800e32c <_Balloc>
 800d950:	4682      	mov	sl, r0
 800d952:	2800      	cmp	r0, #0
 800d954:	d142      	bne.n	800d9dc <_dtoa_r+0x2f4>
 800d956:	4b1e      	ldr	r3, [pc, #120]	@ (800d9d0 <_dtoa_r+0x2e8>)
 800d958:	4602      	mov	r2, r0
 800d95a:	f240 11af 	movw	r1, #431	@ 0x1af
 800d95e:	e6da      	b.n	800d716 <_dtoa_r+0x2e>
 800d960:	2300      	movs	r3, #0
 800d962:	e7e3      	b.n	800d92c <_dtoa_r+0x244>
 800d964:	2300      	movs	r3, #0
 800d966:	e7d5      	b.n	800d914 <_dtoa_r+0x22c>
 800d968:	2401      	movs	r4, #1
 800d96a:	2300      	movs	r3, #0
 800d96c:	9307      	str	r3, [sp, #28]
 800d96e:	9409      	str	r4, [sp, #36]	@ 0x24
 800d970:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d974:	2200      	movs	r2, #0
 800d976:	f8cd b00c 	str.w	fp, [sp, #12]
 800d97a:	2312      	movs	r3, #18
 800d97c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d97e:	e7db      	b.n	800d938 <_dtoa_r+0x250>
 800d980:	2301      	movs	r3, #1
 800d982:	9309      	str	r3, [sp, #36]	@ 0x24
 800d984:	e7f4      	b.n	800d970 <_dtoa_r+0x288>
 800d986:	f04f 0b01 	mov.w	fp, #1
 800d98a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d98e:	465b      	mov	r3, fp
 800d990:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d994:	e7d0      	b.n	800d938 <_dtoa_r+0x250>
 800d996:	3101      	adds	r1, #1
 800d998:	0052      	lsls	r2, r2, #1
 800d99a:	e7d1      	b.n	800d940 <_dtoa_r+0x258>
 800d99c:	f3af 8000 	nop.w
 800d9a0:	636f4361 	.word	0x636f4361
 800d9a4:	3fd287a7 	.word	0x3fd287a7
 800d9a8:	8b60c8b3 	.word	0x8b60c8b3
 800d9ac:	3fc68a28 	.word	0x3fc68a28
 800d9b0:	509f79fb 	.word	0x509f79fb
 800d9b4:	3fd34413 	.word	0x3fd34413
 800d9b8:	08011b7a 	.word	0x08011b7a
 800d9bc:	08011b91 	.word	0x08011b91
 800d9c0:	7ff00000 	.word	0x7ff00000
 800d9c4:	08011b45 	.word	0x08011b45
 800d9c8:	3ff80000 	.word	0x3ff80000
 800d9cc:	08011d40 	.word	0x08011d40
 800d9d0:	08011be9 	.word	0x08011be9
 800d9d4:	08011b76 	.word	0x08011b76
 800d9d8:	08011b44 	.word	0x08011b44
 800d9dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d9e0:	6018      	str	r0, [r3, #0]
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	2b0e      	cmp	r3, #14
 800d9e6:	f200 80a1 	bhi.w	800db2c <_dtoa_r+0x444>
 800d9ea:	2c00      	cmp	r4, #0
 800d9ec:	f000 809e 	beq.w	800db2c <_dtoa_r+0x444>
 800d9f0:	2f00      	cmp	r7, #0
 800d9f2:	dd33      	ble.n	800da5c <_dtoa_r+0x374>
 800d9f4:	4b9c      	ldr	r3, [pc, #624]	@ (800dc68 <_dtoa_r+0x580>)
 800d9f6:	f007 020f 	and.w	r2, r7, #15
 800d9fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9fe:	ed93 7b00 	vldr	d7, [r3]
 800da02:	05f8      	lsls	r0, r7, #23
 800da04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800da08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da0c:	d516      	bpl.n	800da3c <_dtoa_r+0x354>
 800da0e:	4b97      	ldr	r3, [pc, #604]	@ (800dc6c <_dtoa_r+0x584>)
 800da10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da18:	f7f2 ff38 	bl	800088c <__aeabi_ddiv>
 800da1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da20:	f004 040f 	and.w	r4, r4, #15
 800da24:	2603      	movs	r6, #3
 800da26:	4d91      	ldr	r5, [pc, #580]	@ (800dc6c <_dtoa_r+0x584>)
 800da28:	b954      	cbnz	r4, 800da40 <_dtoa_r+0x358>
 800da2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da32:	f7f2 ff2b 	bl	800088c <__aeabi_ddiv>
 800da36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da3a:	e028      	b.n	800da8e <_dtoa_r+0x3a6>
 800da3c:	2602      	movs	r6, #2
 800da3e:	e7f2      	b.n	800da26 <_dtoa_r+0x33e>
 800da40:	07e1      	lsls	r1, r4, #31
 800da42:	d508      	bpl.n	800da56 <_dtoa_r+0x36e>
 800da44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da4c:	f7f2 fdf4 	bl	8000638 <__aeabi_dmul>
 800da50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da54:	3601      	adds	r6, #1
 800da56:	1064      	asrs	r4, r4, #1
 800da58:	3508      	adds	r5, #8
 800da5a:	e7e5      	b.n	800da28 <_dtoa_r+0x340>
 800da5c:	f000 80af 	beq.w	800dbbe <_dtoa_r+0x4d6>
 800da60:	427c      	negs	r4, r7
 800da62:	4b81      	ldr	r3, [pc, #516]	@ (800dc68 <_dtoa_r+0x580>)
 800da64:	4d81      	ldr	r5, [pc, #516]	@ (800dc6c <_dtoa_r+0x584>)
 800da66:	f004 020f 	and.w	r2, r4, #15
 800da6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da76:	f7f2 fddf 	bl	8000638 <__aeabi_dmul>
 800da7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da7e:	1124      	asrs	r4, r4, #4
 800da80:	2300      	movs	r3, #0
 800da82:	2602      	movs	r6, #2
 800da84:	2c00      	cmp	r4, #0
 800da86:	f040 808f 	bne.w	800dba8 <_dtoa_r+0x4c0>
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1d3      	bne.n	800da36 <_dtoa_r+0x34e>
 800da8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 8094 	beq.w	800dbc2 <_dtoa_r+0x4da>
 800da9a:	4b75      	ldr	r3, [pc, #468]	@ (800dc70 <_dtoa_r+0x588>)
 800da9c:	2200      	movs	r2, #0
 800da9e:	4620      	mov	r0, r4
 800daa0:	4629      	mov	r1, r5
 800daa2:	f7f3 f83b 	bl	8000b1c <__aeabi_dcmplt>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f000 808b 	beq.w	800dbc2 <_dtoa_r+0x4da>
 800daac:	9b03      	ldr	r3, [sp, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 8087 	beq.w	800dbc2 <_dtoa_r+0x4da>
 800dab4:	f1bb 0f00 	cmp.w	fp, #0
 800dab8:	dd34      	ble.n	800db24 <_dtoa_r+0x43c>
 800daba:	4620      	mov	r0, r4
 800dabc:	4b6d      	ldr	r3, [pc, #436]	@ (800dc74 <_dtoa_r+0x58c>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7f2 fdb9 	bl	8000638 <__aeabi_dmul>
 800dac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800daca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800dace:	3601      	adds	r6, #1
 800dad0:	465c      	mov	r4, fp
 800dad2:	4630      	mov	r0, r6
 800dad4:	f7f2 fd46 	bl	8000564 <__aeabi_i2d>
 800dad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dadc:	f7f2 fdac 	bl	8000638 <__aeabi_dmul>
 800dae0:	4b65      	ldr	r3, [pc, #404]	@ (800dc78 <_dtoa_r+0x590>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	f7f2 fbf2 	bl	80002cc <__adddf3>
 800dae8:	4605      	mov	r5, r0
 800daea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800daee:	2c00      	cmp	r4, #0
 800daf0:	d16a      	bne.n	800dbc8 <_dtoa_r+0x4e0>
 800daf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800daf6:	4b61      	ldr	r3, [pc, #388]	@ (800dc7c <_dtoa_r+0x594>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	f7f2 fbe5 	bl	80002c8 <__aeabi_dsub>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db06:	462a      	mov	r2, r5
 800db08:	4633      	mov	r3, r6
 800db0a:	f7f3 f825 	bl	8000b58 <__aeabi_dcmpgt>
 800db0e:	2800      	cmp	r0, #0
 800db10:	f040 8298 	bne.w	800e044 <_dtoa_r+0x95c>
 800db14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db18:	462a      	mov	r2, r5
 800db1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db1e:	f7f2 fffd 	bl	8000b1c <__aeabi_dcmplt>
 800db22:	bb38      	cbnz	r0, 800db74 <_dtoa_r+0x48c>
 800db24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800db28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800db2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f2c0 8157 	blt.w	800dde2 <_dtoa_r+0x6fa>
 800db34:	2f0e      	cmp	r7, #14
 800db36:	f300 8154 	bgt.w	800dde2 <_dtoa_r+0x6fa>
 800db3a:	4b4b      	ldr	r3, [pc, #300]	@ (800dc68 <_dtoa_r+0x580>)
 800db3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db40:	ed93 7b00 	vldr	d7, [r3]
 800db44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db46:	2b00      	cmp	r3, #0
 800db48:	ed8d 7b00 	vstr	d7, [sp]
 800db4c:	f280 80e5 	bge.w	800dd1a <_dtoa_r+0x632>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	f300 80e1 	bgt.w	800dd1a <_dtoa_r+0x632>
 800db58:	d10c      	bne.n	800db74 <_dtoa_r+0x48c>
 800db5a:	4b48      	ldr	r3, [pc, #288]	@ (800dc7c <_dtoa_r+0x594>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	ec51 0b17 	vmov	r0, r1, d7
 800db62:	f7f2 fd69 	bl	8000638 <__aeabi_dmul>
 800db66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db6a:	f7f2 ffeb 	bl	8000b44 <__aeabi_dcmpge>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f000 8266 	beq.w	800e040 <_dtoa_r+0x958>
 800db74:	2400      	movs	r4, #0
 800db76:	4625      	mov	r5, r4
 800db78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db7a:	4656      	mov	r6, sl
 800db7c:	ea6f 0803 	mvn.w	r8, r3
 800db80:	2700      	movs	r7, #0
 800db82:	4621      	mov	r1, r4
 800db84:	4648      	mov	r0, r9
 800db86:	f000 fc11 	bl	800e3ac <_Bfree>
 800db8a:	2d00      	cmp	r5, #0
 800db8c:	f000 80bd 	beq.w	800dd0a <_dtoa_r+0x622>
 800db90:	b12f      	cbz	r7, 800db9e <_dtoa_r+0x4b6>
 800db92:	42af      	cmp	r7, r5
 800db94:	d003      	beq.n	800db9e <_dtoa_r+0x4b6>
 800db96:	4639      	mov	r1, r7
 800db98:	4648      	mov	r0, r9
 800db9a:	f000 fc07 	bl	800e3ac <_Bfree>
 800db9e:	4629      	mov	r1, r5
 800dba0:	4648      	mov	r0, r9
 800dba2:	f000 fc03 	bl	800e3ac <_Bfree>
 800dba6:	e0b0      	b.n	800dd0a <_dtoa_r+0x622>
 800dba8:	07e2      	lsls	r2, r4, #31
 800dbaa:	d505      	bpl.n	800dbb8 <_dtoa_r+0x4d0>
 800dbac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbb0:	f7f2 fd42 	bl	8000638 <__aeabi_dmul>
 800dbb4:	3601      	adds	r6, #1
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	1064      	asrs	r4, r4, #1
 800dbba:	3508      	adds	r5, #8
 800dbbc:	e762      	b.n	800da84 <_dtoa_r+0x39c>
 800dbbe:	2602      	movs	r6, #2
 800dbc0:	e765      	b.n	800da8e <_dtoa_r+0x3a6>
 800dbc2:	9c03      	ldr	r4, [sp, #12]
 800dbc4:	46b8      	mov	r8, r7
 800dbc6:	e784      	b.n	800dad2 <_dtoa_r+0x3ea>
 800dbc8:	4b27      	ldr	r3, [pc, #156]	@ (800dc68 <_dtoa_r+0x580>)
 800dbca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dbd4:	4454      	add	r4, sl
 800dbd6:	2900      	cmp	r1, #0
 800dbd8:	d054      	beq.n	800dc84 <_dtoa_r+0x59c>
 800dbda:	4929      	ldr	r1, [pc, #164]	@ (800dc80 <_dtoa_r+0x598>)
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f7f2 fe55 	bl	800088c <__aeabi_ddiv>
 800dbe2:	4633      	mov	r3, r6
 800dbe4:	462a      	mov	r2, r5
 800dbe6:	f7f2 fb6f 	bl	80002c8 <__aeabi_dsub>
 800dbea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dbee:	4656      	mov	r6, sl
 800dbf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbf4:	f7f2 ffd0 	bl	8000b98 <__aeabi_d2iz>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	f7f2 fcb3 	bl	8000564 <__aeabi_i2d>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	460b      	mov	r3, r1
 800dc02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc06:	f7f2 fb5f 	bl	80002c8 <__aeabi_dsub>
 800dc0a:	3530      	adds	r5, #48	@ 0x30
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dc14:	f806 5b01 	strb.w	r5, [r6], #1
 800dc18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc1c:	f7f2 ff7e 	bl	8000b1c <__aeabi_dcmplt>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d172      	bne.n	800dd0a <_dtoa_r+0x622>
 800dc24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc28:	4911      	ldr	r1, [pc, #68]	@ (800dc70 <_dtoa_r+0x588>)
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	f7f2 fb4c 	bl	80002c8 <__aeabi_dsub>
 800dc30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dc34:	f7f2 ff72 	bl	8000b1c <__aeabi_dcmplt>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	f040 80b4 	bne.w	800dda6 <_dtoa_r+0x6be>
 800dc3e:	42a6      	cmp	r6, r4
 800dc40:	f43f af70 	beq.w	800db24 <_dtoa_r+0x43c>
 800dc44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dc48:	4b0a      	ldr	r3, [pc, #40]	@ (800dc74 <_dtoa_r+0x58c>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f7f2 fcf4 	bl	8000638 <__aeabi_dmul>
 800dc50:	4b08      	ldr	r3, [pc, #32]	@ (800dc74 <_dtoa_r+0x58c>)
 800dc52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc56:	2200      	movs	r2, #0
 800dc58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc5c:	f7f2 fcec 	bl	8000638 <__aeabi_dmul>
 800dc60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc64:	e7c4      	b.n	800dbf0 <_dtoa_r+0x508>
 800dc66:	bf00      	nop
 800dc68:	08011d40 	.word	0x08011d40
 800dc6c:	08011d18 	.word	0x08011d18
 800dc70:	3ff00000 	.word	0x3ff00000
 800dc74:	40240000 	.word	0x40240000
 800dc78:	401c0000 	.word	0x401c0000
 800dc7c:	40140000 	.word	0x40140000
 800dc80:	3fe00000 	.word	0x3fe00000
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7f2 fcd6 	bl	8000638 <__aeabi_dmul>
 800dc8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc90:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dc92:	4656      	mov	r6, sl
 800dc94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc98:	f7f2 ff7e 	bl	8000b98 <__aeabi_d2iz>
 800dc9c:	4605      	mov	r5, r0
 800dc9e:	f7f2 fc61 	bl	8000564 <__aeabi_i2d>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcaa:	f7f2 fb0d 	bl	80002c8 <__aeabi_dsub>
 800dcae:	3530      	adds	r5, #48	@ 0x30
 800dcb0:	f806 5b01 	strb.w	r5, [r6], #1
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	42a6      	cmp	r6, r4
 800dcba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcbe:	f04f 0200 	mov.w	r2, #0
 800dcc2:	d124      	bne.n	800dd0e <_dtoa_r+0x626>
 800dcc4:	4baf      	ldr	r3, [pc, #700]	@ (800df84 <_dtoa_r+0x89c>)
 800dcc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dcca:	f7f2 faff 	bl	80002cc <__adddf3>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcd6:	f7f2 ff3f 	bl	8000b58 <__aeabi_dcmpgt>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d163      	bne.n	800dda6 <_dtoa_r+0x6be>
 800dcde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dce2:	49a8      	ldr	r1, [pc, #672]	@ (800df84 <_dtoa_r+0x89c>)
 800dce4:	2000      	movs	r0, #0
 800dce6:	f7f2 faef 	bl	80002c8 <__aeabi_dsub>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcf2:	f7f2 ff13 	bl	8000b1c <__aeabi_dcmplt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f43f af14 	beq.w	800db24 <_dtoa_r+0x43c>
 800dcfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dcfe:	1e73      	subs	r3, r6, #1
 800dd00:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd06:	2b30      	cmp	r3, #48	@ 0x30
 800dd08:	d0f8      	beq.n	800dcfc <_dtoa_r+0x614>
 800dd0a:	4647      	mov	r7, r8
 800dd0c:	e03b      	b.n	800dd86 <_dtoa_r+0x69e>
 800dd0e:	4b9e      	ldr	r3, [pc, #632]	@ (800df88 <_dtoa_r+0x8a0>)
 800dd10:	f7f2 fc92 	bl	8000638 <__aeabi_dmul>
 800dd14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd18:	e7bc      	b.n	800dc94 <_dtoa_r+0x5ac>
 800dd1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dd1e:	4656      	mov	r6, sl
 800dd20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f2 fdb0 	bl	800088c <__aeabi_ddiv>
 800dd2c:	f7f2 ff34 	bl	8000b98 <__aeabi_d2iz>
 800dd30:	4680      	mov	r8, r0
 800dd32:	f7f2 fc17 	bl	8000564 <__aeabi_i2d>
 800dd36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd3a:	f7f2 fc7d 	bl	8000638 <__aeabi_dmul>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4620      	mov	r0, r4
 800dd44:	4629      	mov	r1, r5
 800dd46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dd4a:	f7f2 fabd 	bl	80002c8 <__aeabi_dsub>
 800dd4e:	f806 4b01 	strb.w	r4, [r6], #1
 800dd52:	9d03      	ldr	r5, [sp, #12]
 800dd54:	eba6 040a 	sub.w	r4, r6, sl
 800dd58:	42a5      	cmp	r5, r4
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	d133      	bne.n	800ddc8 <_dtoa_r+0x6e0>
 800dd60:	f7f2 fab4 	bl	80002cc <__adddf3>
 800dd64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	f7f2 fef4 	bl	8000b58 <__aeabi_dcmpgt>
 800dd70:	b9c0      	cbnz	r0, 800dda4 <_dtoa_r+0x6bc>
 800dd72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7f2 fec5 	bl	8000b08 <__aeabi_dcmpeq>
 800dd7e:	b110      	cbz	r0, 800dd86 <_dtoa_r+0x69e>
 800dd80:	f018 0f01 	tst.w	r8, #1
 800dd84:	d10e      	bne.n	800dda4 <_dtoa_r+0x6bc>
 800dd86:	9902      	ldr	r1, [sp, #8]
 800dd88:	4648      	mov	r0, r9
 800dd8a:	f000 fb0f 	bl	800e3ac <_Bfree>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	7033      	strb	r3, [r6, #0]
 800dd92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd94:	3701      	adds	r7, #1
 800dd96:	601f      	str	r7, [r3, #0]
 800dd98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 824b 	beq.w	800e236 <_dtoa_r+0xb4e>
 800dda0:	601e      	str	r6, [r3, #0]
 800dda2:	e248      	b.n	800e236 <_dtoa_r+0xb4e>
 800dda4:	46b8      	mov	r8, r7
 800dda6:	4633      	mov	r3, r6
 800dda8:	461e      	mov	r6, r3
 800ddaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddae:	2a39      	cmp	r2, #57	@ 0x39
 800ddb0:	d106      	bne.n	800ddc0 <_dtoa_r+0x6d8>
 800ddb2:	459a      	cmp	sl, r3
 800ddb4:	d1f8      	bne.n	800dda8 <_dtoa_r+0x6c0>
 800ddb6:	2230      	movs	r2, #48	@ 0x30
 800ddb8:	f108 0801 	add.w	r8, r8, #1
 800ddbc:	f88a 2000 	strb.w	r2, [sl]
 800ddc0:	781a      	ldrb	r2, [r3, #0]
 800ddc2:	3201      	adds	r2, #1
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	e7a0      	b.n	800dd0a <_dtoa_r+0x622>
 800ddc8:	4b6f      	ldr	r3, [pc, #444]	@ (800df88 <_dtoa_r+0x8a0>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f7f2 fc34 	bl	8000638 <__aeabi_dmul>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	460d      	mov	r5, r1
 800ddd8:	f7f2 fe96 	bl	8000b08 <__aeabi_dcmpeq>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d09f      	beq.n	800dd20 <_dtoa_r+0x638>
 800dde0:	e7d1      	b.n	800dd86 <_dtoa_r+0x69e>
 800dde2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dde4:	2a00      	cmp	r2, #0
 800dde6:	f000 80ea 	beq.w	800dfbe <_dtoa_r+0x8d6>
 800ddea:	9a07      	ldr	r2, [sp, #28]
 800ddec:	2a01      	cmp	r2, #1
 800ddee:	f300 80cd 	bgt.w	800df8c <_dtoa_r+0x8a4>
 800ddf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ddf4:	2a00      	cmp	r2, #0
 800ddf6:	f000 80c1 	beq.w	800df7c <_dtoa_r+0x894>
 800ddfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ddfe:	9c08      	ldr	r4, [sp, #32]
 800de00:	9e00      	ldr	r6, [sp, #0]
 800de02:	9a00      	ldr	r2, [sp, #0]
 800de04:	441a      	add	r2, r3
 800de06:	9200      	str	r2, [sp, #0]
 800de08:	9a06      	ldr	r2, [sp, #24]
 800de0a:	2101      	movs	r1, #1
 800de0c:	441a      	add	r2, r3
 800de0e:	4648      	mov	r0, r9
 800de10:	9206      	str	r2, [sp, #24]
 800de12:	f000 fbc9 	bl	800e5a8 <__i2b>
 800de16:	4605      	mov	r5, r0
 800de18:	b166      	cbz	r6, 800de34 <_dtoa_r+0x74c>
 800de1a:	9b06      	ldr	r3, [sp, #24]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	dd09      	ble.n	800de34 <_dtoa_r+0x74c>
 800de20:	42b3      	cmp	r3, r6
 800de22:	9a00      	ldr	r2, [sp, #0]
 800de24:	bfa8      	it	ge
 800de26:	4633      	movge	r3, r6
 800de28:	1ad2      	subs	r2, r2, r3
 800de2a:	9200      	str	r2, [sp, #0]
 800de2c:	9a06      	ldr	r2, [sp, #24]
 800de2e:	1af6      	subs	r6, r6, r3
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	9306      	str	r3, [sp, #24]
 800de34:	9b08      	ldr	r3, [sp, #32]
 800de36:	b30b      	cbz	r3, 800de7c <_dtoa_r+0x794>
 800de38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80c6 	beq.w	800dfcc <_dtoa_r+0x8e4>
 800de40:	2c00      	cmp	r4, #0
 800de42:	f000 80c0 	beq.w	800dfc6 <_dtoa_r+0x8de>
 800de46:	4629      	mov	r1, r5
 800de48:	4622      	mov	r2, r4
 800de4a:	4648      	mov	r0, r9
 800de4c:	f000 fc64 	bl	800e718 <__pow5mult>
 800de50:	9a02      	ldr	r2, [sp, #8]
 800de52:	4601      	mov	r1, r0
 800de54:	4605      	mov	r5, r0
 800de56:	4648      	mov	r0, r9
 800de58:	f000 fbbc 	bl	800e5d4 <__multiply>
 800de5c:	9902      	ldr	r1, [sp, #8]
 800de5e:	4680      	mov	r8, r0
 800de60:	4648      	mov	r0, r9
 800de62:	f000 faa3 	bl	800e3ac <_Bfree>
 800de66:	9b08      	ldr	r3, [sp, #32]
 800de68:	1b1b      	subs	r3, r3, r4
 800de6a:	9308      	str	r3, [sp, #32]
 800de6c:	f000 80b1 	beq.w	800dfd2 <_dtoa_r+0x8ea>
 800de70:	9a08      	ldr	r2, [sp, #32]
 800de72:	4641      	mov	r1, r8
 800de74:	4648      	mov	r0, r9
 800de76:	f000 fc4f 	bl	800e718 <__pow5mult>
 800de7a:	9002      	str	r0, [sp, #8]
 800de7c:	2101      	movs	r1, #1
 800de7e:	4648      	mov	r0, r9
 800de80:	f000 fb92 	bl	800e5a8 <__i2b>
 800de84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de86:	4604      	mov	r4, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 81d8 	beq.w	800e23e <_dtoa_r+0xb56>
 800de8e:	461a      	mov	r2, r3
 800de90:	4601      	mov	r1, r0
 800de92:	4648      	mov	r0, r9
 800de94:	f000 fc40 	bl	800e718 <__pow5mult>
 800de98:	9b07      	ldr	r3, [sp, #28]
 800de9a:	2b01      	cmp	r3, #1
 800de9c:	4604      	mov	r4, r0
 800de9e:	f300 809f 	bgt.w	800dfe0 <_dtoa_r+0x8f8>
 800dea2:	9b04      	ldr	r3, [sp, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f040 8097 	bne.w	800dfd8 <_dtoa_r+0x8f0>
 800deaa:	9b05      	ldr	r3, [sp, #20]
 800deac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f040 8093 	bne.w	800dfdc <_dtoa_r+0x8f4>
 800deb6:	9b05      	ldr	r3, [sp, #20]
 800deb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800debc:	0d1b      	lsrs	r3, r3, #20
 800debe:	051b      	lsls	r3, r3, #20
 800dec0:	b133      	cbz	r3, 800ded0 <_dtoa_r+0x7e8>
 800dec2:	9b00      	ldr	r3, [sp, #0]
 800dec4:	3301      	adds	r3, #1
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	9b06      	ldr	r3, [sp, #24]
 800deca:	3301      	adds	r3, #1
 800decc:	9306      	str	r3, [sp, #24]
 800dece:	2301      	movs	r3, #1
 800ded0:	9308      	str	r3, [sp, #32]
 800ded2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 81b8 	beq.w	800e24a <_dtoa_r+0xb62>
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dee0:	6918      	ldr	r0, [r3, #16]
 800dee2:	f000 fb15 	bl	800e510 <__hi0bits>
 800dee6:	f1c0 0020 	rsb	r0, r0, #32
 800deea:	9b06      	ldr	r3, [sp, #24]
 800deec:	4418      	add	r0, r3
 800deee:	f010 001f 	ands.w	r0, r0, #31
 800def2:	f000 8082 	beq.w	800dffa <_dtoa_r+0x912>
 800def6:	f1c0 0320 	rsb	r3, r0, #32
 800defa:	2b04      	cmp	r3, #4
 800defc:	dd73      	ble.n	800dfe6 <_dtoa_r+0x8fe>
 800defe:	9b00      	ldr	r3, [sp, #0]
 800df00:	f1c0 001c 	rsb	r0, r0, #28
 800df04:	4403      	add	r3, r0
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	9b06      	ldr	r3, [sp, #24]
 800df0a:	4403      	add	r3, r0
 800df0c:	4406      	add	r6, r0
 800df0e:	9306      	str	r3, [sp, #24]
 800df10:	9b00      	ldr	r3, [sp, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	dd05      	ble.n	800df22 <_dtoa_r+0x83a>
 800df16:	9902      	ldr	r1, [sp, #8]
 800df18:	461a      	mov	r2, r3
 800df1a:	4648      	mov	r0, r9
 800df1c:	f000 fc56 	bl	800e7cc <__lshift>
 800df20:	9002      	str	r0, [sp, #8]
 800df22:	9b06      	ldr	r3, [sp, #24]
 800df24:	2b00      	cmp	r3, #0
 800df26:	dd05      	ble.n	800df34 <_dtoa_r+0x84c>
 800df28:	4621      	mov	r1, r4
 800df2a:	461a      	mov	r2, r3
 800df2c:	4648      	mov	r0, r9
 800df2e:	f000 fc4d 	bl	800e7cc <__lshift>
 800df32:	4604      	mov	r4, r0
 800df34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df36:	2b00      	cmp	r3, #0
 800df38:	d061      	beq.n	800dffe <_dtoa_r+0x916>
 800df3a:	9802      	ldr	r0, [sp, #8]
 800df3c:	4621      	mov	r1, r4
 800df3e:	f000 fcb1 	bl	800e8a4 <__mcmp>
 800df42:	2800      	cmp	r0, #0
 800df44:	da5b      	bge.n	800dffe <_dtoa_r+0x916>
 800df46:	2300      	movs	r3, #0
 800df48:	9902      	ldr	r1, [sp, #8]
 800df4a:	220a      	movs	r2, #10
 800df4c:	4648      	mov	r0, r9
 800df4e:	f000 fa4f 	bl	800e3f0 <__multadd>
 800df52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df54:	9002      	str	r0, [sp, #8]
 800df56:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 8177 	beq.w	800e24e <_dtoa_r+0xb66>
 800df60:	4629      	mov	r1, r5
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4648      	mov	r0, r9
 800df68:	f000 fa42 	bl	800e3f0 <__multadd>
 800df6c:	f1bb 0f00 	cmp.w	fp, #0
 800df70:	4605      	mov	r5, r0
 800df72:	dc6f      	bgt.n	800e054 <_dtoa_r+0x96c>
 800df74:	9b07      	ldr	r3, [sp, #28]
 800df76:	2b02      	cmp	r3, #2
 800df78:	dc49      	bgt.n	800e00e <_dtoa_r+0x926>
 800df7a:	e06b      	b.n	800e054 <_dtoa_r+0x96c>
 800df7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800df82:	e73c      	b.n	800ddfe <_dtoa_r+0x716>
 800df84:	3fe00000 	.word	0x3fe00000
 800df88:	40240000 	.word	0x40240000
 800df8c:	9b03      	ldr	r3, [sp, #12]
 800df8e:	1e5c      	subs	r4, r3, #1
 800df90:	9b08      	ldr	r3, [sp, #32]
 800df92:	42a3      	cmp	r3, r4
 800df94:	db09      	blt.n	800dfaa <_dtoa_r+0x8c2>
 800df96:	1b1c      	subs	r4, r3, r4
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	f6bf af30 	bge.w	800de00 <_dtoa_r+0x718>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	9a03      	ldr	r2, [sp, #12]
 800dfa4:	1a9e      	subs	r6, r3, r2
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e72b      	b.n	800de02 <_dtoa_r+0x71a>
 800dfaa:	9b08      	ldr	r3, [sp, #32]
 800dfac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dfae:	9408      	str	r4, [sp, #32]
 800dfb0:	1ae3      	subs	r3, r4, r3
 800dfb2:	441a      	add	r2, r3
 800dfb4:	9e00      	ldr	r6, [sp, #0]
 800dfb6:	9b03      	ldr	r3, [sp, #12]
 800dfb8:	920d      	str	r2, [sp, #52]	@ 0x34
 800dfba:	2400      	movs	r4, #0
 800dfbc:	e721      	b.n	800de02 <_dtoa_r+0x71a>
 800dfbe:	9c08      	ldr	r4, [sp, #32]
 800dfc0:	9e00      	ldr	r6, [sp, #0]
 800dfc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dfc4:	e728      	b.n	800de18 <_dtoa_r+0x730>
 800dfc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dfca:	e751      	b.n	800de70 <_dtoa_r+0x788>
 800dfcc:	9a08      	ldr	r2, [sp, #32]
 800dfce:	9902      	ldr	r1, [sp, #8]
 800dfd0:	e750      	b.n	800de74 <_dtoa_r+0x78c>
 800dfd2:	f8cd 8008 	str.w	r8, [sp, #8]
 800dfd6:	e751      	b.n	800de7c <_dtoa_r+0x794>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e779      	b.n	800ded0 <_dtoa_r+0x7e8>
 800dfdc:	9b04      	ldr	r3, [sp, #16]
 800dfde:	e777      	b.n	800ded0 <_dtoa_r+0x7e8>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9308      	str	r3, [sp, #32]
 800dfe4:	e779      	b.n	800deda <_dtoa_r+0x7f2>
 800dfe6:	d093      	beq.n	800df10 <_dtoa_r+0x828>
 800dfe8:	9a00      	ldr	r2, [sp, #0]
 800dfea:	331c      	adds	r3, #28
 800dfec:	441a      	add	r2, r3
 800dfee:	9200      	str	r2, [sp, #0]
 800dff0:	9a06      	ldr	r2, [sp, #24]
 800dff2:	441a      	add	r2, r3
 800dff4:	441e      	add	r6, r3
 800dff6:	9206      	str	r2, [sp, #24]
 800dff8:	e78a      	b.n	800df10 <_dtoa_r+0x828>
 800dffa:	4603      	mov	r3, r0
 800dffc:	e7f4      	b.n	800dfe8 <_dtoa_r+0x900>
 800dffe:	9b03      	ldr	r3, [sp, #12]
 800e000:	2b00      	cmp	r3, #0
 800e002:	46b8      	mov	r8, r7
 800e004:	dc20      	bgt.n	800e048 <_dtoa_r+0x960>
 800e006:	469b      	mov	fp, r3
 800e008:	9b07      	ldr	r3, [sp, #28]
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	dd1e      	ble.n	800e04c <_dtoa_r+0x964>
 800e00e:	f1bb 0f00 	cmp.w	fp, #0
 800e012:	f47f adb1 	bne.w	800db78 <_dtoa_r+0x490>
 800e016:	4621      	mov	r1, r4
 800e018:	465b      	mov	r3, fp
 800e01a:	2205      	movs	r2, #5
 800e01c:	4648      	mov	r0, r9
 800e01e:	f000 f9e7 	bl	800e3f0 <__multadd>
 800e022:	4601      	mov	r1, r0
 800e024:	4604      	mov	r4, r0
 800e026:	9802      	ldr	r0, [sp, #8]
 800e028:	f000 fc3c 	bl	800e8a4 <__mcmp>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	f77f ada3 	ble.w	800db78 <_dtoa_r+0x490>
 800e032:	4656      	mov	r6, sl
 800e034:	2331      	movs	r3, #49	@ 0x31
 800e036:	f806 3b01 	strb.w	r3, [r6], #1
 800e03a:	f108 0801 	add.w	r8, r8, #1
 800e03e:	e59f      	b.n	800db80 <_dtoa_r+0x498>
 800e040:	9c03      	ldr	r4, [sp, #12]
 800e042:	46b8      	mov	r8, r7
 800e044:	4625      	mov	r5, r4
 800e046:	e7f4      	b.n	800e032 <_dtoa_r+0x94a>
 800e048:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f000 8101 	beq.w	800e256 <_dtoa_r+0xb6e>
 800e054:	2e00      	cmp	r6, #0
 800e056:	dd05      	ble.n	800e064 <_dtoa_r+0x97c>
 800e058:	4629      	mov	r1, r5
 800e05a:	4632      	mov	r2, r6
 800e05c:	4648      	mov	r0, r9
 800e05e:	f000 fbb5 	bl	800e7cc <__lshift>
 800e062:	4605      	mov	r5, r0
 800e064:	9b08      	ldr	r3, [sp, #32]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d05c      	beq.n	800e124 <_dtoa_r+0xa3c>
 800e06a:	6869      	ldr	r1, [r5, #4]
 800e06c:	4648      	mov	r0, r9
 800e06e:	f000 f95d 	bl	800e32c <_Balloc>
 800e072:	4606      	mov	r6, r0
 800e074:	b928      	cbnz	r0, 800e082 <_dtoa_r+0x99a>
 800e076:	4b82      	ldr	r3, [pc, #520]	@ (800e280 <_dtoa_r+0xb98>)
 800e078:	4602      	mov	r2, r0
 800e07a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e07e:	f7ff bb4a 	b.w	800d716 <_dtoa_r+0x2e>
 800e082:	692a      	ldr	r2, [r5, #16]
 800e084:	3202      	adds	r2, #2
 800e086:	0092      	lsls	r2, r2, #2
 800e088:	f105 010c 	add.w	r1, r5, #12
 800e08c:	300c      	adds	r0, #12
 800e08e:	f001 fead 	bl	800fdec <memcpy>
 800e092:	2201      	movs	r2, #1
 800e094:	4631      	mov	r1, r6
 800e096:	4648      	mov	r0, r9
 800e098:	f000 fb98 	bl	800e7cc <__lshift>
 800e09c:	f10a 0301 	add.w	r3, sl, #1
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	eb0a 030b 	add.w	r3, sl, fp
 800e0a6:	9308      	str	r3, [sp, #32]
 800e0a8:	9b04      	ldr	r3, [sp, #16]
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	462f      	mov	r7, r5
 800e0b0:	9306      	str	r3, [sp, #24]
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	9802      	ldr	r0, [sp, #8]
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e0be:	f7ff fa8b 	bl	800d5d8 <quorem>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	3330      	adds	r3, #48	@ 0x30
 800e0c6:	9003      	str	r0, [sp, #12]
 800e0c8:	4639      	mov	r1, r7
 800e0ca:	9802      	ldr	r0, [sp, #8]
 800e0cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ce:	f000 fbe9 	bl	800e8a4 <__mcmp>
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	9004      	str	r0, [sp, #16]
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4648      	mov	r0, r9
 800e0da:	f000 fbff 	bl	800e8dc <__mdiff>
 800e0de:	68c2      	ldr	r2, [r0, #12]
 800e0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	bb02      	cbnz	r2, 800e128 <_dtoa_r+0xa40>
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	9802      	ldr	r0, [sp, #8]
 800e0ea:	f000 fbdb 	bl	800e8a4 <__mcmp>
 800e0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	4648      	mov	r0, r9
 800e0f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0fa:	f000 f957 	bl	800e3ac <_Bfree>
 800e0fe:	9b07      	ldr	r3, [sp, #28]
 800e100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e102:	9e00      	ldr	r6, [sp, #0]
 800e104:	ea42 0103 	orr.w	r1, r2, r3
 800e108:	9b06      	ldr	r3, [sp, #24]
 800e10a:	4319      	orrs	r1, r3
 800e10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e10e:	d10d      	bne.n	800e12c <_dtoa_r+0xa44>
 800e110:	2b39      	cmp	r3, #57	@ 0x39
 800e112:	d027      	beq.n	800e164 <_dtoa_r+0xa7c>
 800e114:	9a04      	ldr	r2, [sp, #16]
 800e116:	2a00      	cmp	r2, #0
 800e118:	dd01      	ble.n	800e11e <_dtoa_r+0xa36>
 800e11a:	9b03      	ldr	r3, [sp, #12]
 800e11c:	3331      	adds	r3, #49	@ 0x31
 800e11e:	f88b 3000 	strb.w	r3, [fp]
 800e122:	e52e      	b.n	800db82 <_dtoa_r+0x49a>
 800e124:	4628      	mov	r0, r5
 800e126:	e7b9      	b.n	800e09c <_dtoa_r+0x9b4>
 800e128:	2201      	movs	r2, #1
 800e12a:	e7e2      	b.n	800e0f2 <_dtoa_r+0xa0a>
 800e12c:	9904      	ldr	r1, [sp, #16]
 800e12e:	2900      	cmp	r1, #0
 800e130:	db04      	blt.n	800e13c <_dtoa_r+0xa54>
 800e132:	9807      	ldr	r0, [sp, #28]
 800e134:	4301      	orrs	r1, r0
 800e136:	9806      	ldr	r0, [sp, #24]
 800e138:	4301      	orrs	r1, r0
 800e13a:	d120      	bne.n	800e17e <_dtoa_r+0xa96>
 800e13c:	2a00      	cmp	r2, #0
 800e13e:	ddee      	ble.n	800e11e <_dtoa_r+0xa36>
 800e140:	9902      	ldr	r1, [sp, #8]
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	2201      	movs	r2, #1
 800e146:	4648      	mov	r0, r9
 800e148:	f000 fb40 	bl	800e7cc <__lshift>
 800e14c:	4621      	mov	r1, r4
 800e14e:	9002      	str	r0, [sp, #8]
 800e150:	f000 fba8 	bl	800e8a4 <__mcmp>
 800e154:	2800      	cmp	r0, #0
 800e156:	9b00      	ldr	r3, [sp, #0]
 800e158:	dc02      	bgt.n	800e160 <_dtoa_r+0xa78>
 800e15a:	d1e0      	bne.n	800e11e <_dtoa_r+0xa36>
 800e15c:	07da      	lsls	r2, r3, #31
 800e15e:	d5de      	bpl.n	800e11e <_dtoa_r+0xa36>
 800e160:	2b39      	cmp	r3, #57	@ 0x39
 800e162:	d1da      	bne.n	800e11a <_dtoa_r+0xa32>
 800e164:	2339      	movs	r3, #57	@ 0x39
 800e166:	f88b 3000 	strb.w	r3, [fp]
 800e16a:	4633      	mov	r3, r6
 800e16c:	461e      	mov	r6, r3
 800e16e:	3b01      	subs	r3, #1
 800e170:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e174:	2a39      	cmp	r2, #57	@ 0x39
 800e176:	d04e      	beq.n	800e216 <_dtoa_r+0xb2e>
 800e178:	3201      	adds	r2, #1
 800e17a:	701a      	strb	r2, [r3, #0]
 800e17c:	e501      	b.n	800db82 <_dtoa_r+0x49a>
 800e17e:	2a00      	cmp	r2, #0
 800e180:	dd03      	ble.n	800e18a <_dtoa_r+0xaa2>
 800e182:	2b39      	cmp	r3, #57	@ 0x39
 800e184:	d0ee      	beq.n	800e164 <_dtoa_r+0xa7c>
 800e186:	3301      	adds	r3, #1
 800e188:	e7c9      	b.n	800e11e <_dtoa_r+0xa36>
 800e18a:	9a00      	ldr	r2, [sp, #0]
 800e18c:	9908      	ldr	r1, [sp, #32]
 800e18e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e192:	428a      	cmp	r2, r1
 800e194:	d028      	beq.n	800e1e8 <_dtoa_r+0xb00>
 800e196:	9902      	ldr	r1, [sp, #8]
 800e198:	2300      	movs	r3, #0
 800e19a:	220a      	movs	r2, #10
 800e19c:	4648      	mov	r0, r9
 800e19e:	f000 f927 	bl	800e3f0 <__multadd>
 800e1a2:	42af      	cmp	r7, r5
 800e1a4:	9002      	str	r0, [sp, #8]
 800e1a6:	f04f 0300 	mov.w	r3, #0
 800e1aa:	f04f 020a 	mov.w	r2, #10
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	4648      	mov	r0, r9
 800e1b2:	d107      	bne.n	800e1c4 <_dtoa_r+0xadc>
 800e1b4:	f000 f91c 	bl	800e3f0 <__multadd>
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	9b00      	ldr	r3, [sp, #0]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	e777      	b.n	800e0b4 <_dtoa_r+0x9cc>
 800e1c4:	f000 f914 	bl	800e3f0 <__multadd>
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	220a      	movs	r2, #10
 800e1d0:	4648      	mov	r0, r9
 800e1d2:	f000 f90d 	bl	800e3f0 <__multadd>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	e7f0      	b.n	800e1bc <_dtoa_r+0xad4>
 800e1da:	f1bb 0f00 	cmp.w	fp, #0
 800e1de:	bfcc      	ite	gt
 800e1e0:	465e      	movgt	r6, fp
 800e1e2:	2601      	movle	r6, #1
 800e1e4:	4456      	add	r6, sl
 800e1e6:	2700      	movs	r7, #0
 800e1e8:	9902      	ldr	r1, [sp, #8]
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	4648      	mov	r0, r9
 800e1f0:	f000 faec 	bl	800e7cc <__lshift>
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	9002      	str	r0, [sp, #8]
 800e1f8:	f000 fb54 	bl	800e8a4 <__mcmp>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	dcb4      	bgt.n	800e16a <_dtoa_r+0xa82>
 800e200:	d102      	bne.n	800e208 <_dtoa_r+0xb20>
 800e202:	9b00      	ldr	r3, [sp, #0]
 800e204:	07db      	lsls	r3, r3, #31
 800e206:	d4b0      	bmi.n	800e16a <_dtoa_r+0xa82>
 800e208:	4633      	mov	r3, r6
 800e20a:	461e      	mov	r6, r3
 800e20c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e210:	2a30      	cmp	r2, #48	@ 0x30
 800e212:	d0fa      	beq.n	800e20a <_dtoa_r+0xb22>
 800e214:	e4b5      	b.n	800db82 <_dtoa_r+0x49a>
 800e216:	459a      	cmp	sl, r3
 800e218:	d1a8      	bne.n	800e16c <_dtoa_r+0xa84>
 800e21a:	2331      	movs	r3, #49	@ 0x31
 800e21c:	f108 0801 	add.w	r8, r8, #1
 800e220:	f88a 3000 	strb.w	r3, [sl]
 800e224:	e4ad      	b.n	800db82 <_dtoa_r+0x49a>
 800e226:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e228:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e284 <_dtoa_r+0xb9c>
 800e22c:	b11b      	cbz	r3, 800e236 <_dtoa_r+0xb4e>
 800e22e:	f10a 0308 	add.w	r3, sl, #8
 800e232:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e234:	6013      	str	r3, [r2, #0]
 800e236:	4650      	mov	r0, sl
 800e238:	b017      	add	sp, #92	@ 0x5c
 800e23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23e:	9b07      	ldr	r3, [sp, #28]
 800e240:	2b01      	cmp	r3, #1
 800e242:	f77f ae2e 	ble.w	800dea2 <_dtoa_r+0x7ba>
 800e246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e248:	9308      	str	r3, [sp, #32]
 800e24a:	2001      	movs	r0, #1
 800e24c:	e64d      	b.n	800deea <_dtoa_r+0x802>
 800e24e:	f1bb 0f00 	cmp.w	fp, #0
 800e252:	f77f aed9 	ble.w	800e008 <_dtoa_r+0x920>
 800e256:	4656      	mov	r6, sl
 800e258:	9802      	ldr	r0, [sp, #8]
 800e25a:	4621      	mov	r1, r4
 800e25c:	f7ff f9bc 	bl	800d5d8 <quorem>
 800e260:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e264:	f806 3b01 	strb.w	r3, [r6], #1
 800e268:	eba6 020a 	sub.w	r2, r6, sl
 800e26c:	4593      	cmp	fp, r2
 800e26e:	ddb4      	ble.n	800e1da <_dtoa_r+0xaf2>
 800e270:	9902      	ldr	r1, [sp, #8]
 800e272:	2300      	movs	r3, #0
 800e274:	220a      	movs	r2, #10
 800e276:	4648      	mov	r0, r9
 800e278:	f000 f8ba 	bl	800e3f0 <__multadd>
 800e27c:	9002      	str	r0, [sp, #8]
 800e27e:	e7eb      	b.n	800e258 <_dtoa_r+0xb70>
 800e280:	08011be9 	.word	0x08011be9
 800e284:	08011b6d 	.word	0x08011b6d

0800e288 <_free_r>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	4605      	mov	r5, r0
 800e28c:	2900      	cmp	r1, #0
 800e28e:	d041      	beq.n	800e314 <_free_r+0x8c>
 800e290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e294:	1f0c      	subs	r4, r1, #4
 800e296:	2b00      	cmp	r3, #0
 800e298:	bfb8      	it	lt
 800e29a:	18e4      	addlt	r4, r4, r3
 800e29c:	f7fe f96e 	bl	800c57c <__malloc_lock>
 800e2a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e318 <_free_r+0x90>)
 800e2a2:	6813      	ldr	r3, [r2, #0]
 800e2a4:	b933      	cbnz	r3, 800e2b4 <_free_r+0x2c>
 800e2a6:	6063      	str	r3, [r4, #4]
 800e2a8:	6014      	str	r4, [r2, #0]
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2b0:	f7fe b96a 	b.w	800c588 <__malloc_unlock>
 800e2b4:	42a3      	cmp	r3, r4
 800e2b6:	d908      	bls.n	800e2ca <_free_r+0x42>
 800e2b8:	6820      	ldr	r0, [r4, #0]
 800e2ba:	1821      	adds	r1, r4, r0
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf01      	itttt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	1809      	addeq	r1, r1, r0
 800e2c6:	6021      	streq	r1, [r4, #0]
 800e2c8:	e7ed      	b.n	800e2a6 <_free_r+0x1e>
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	b10b      	cbz	r3, 800e2d4 <_free_r+0x4c>
 800e2d0:	42a3      	cmp	r3, r4
 800e2d2:	d9fa      	bls.n	800e2ca <_free_r+0x42>
 800e2d4:	6811      	ldr	r1, [r2, #0]
 800e2d6:	1850      	adds	r0, r2, r1
 800e2d8:	42a0      	cmp	r0, r4
 800e2da:	d10b      	bne.n	800e2f4 <_free_r+0x6c>
 800e2dc:	6820      	ldr	r0, [r4, #0]
 800e2de:	4401      	add	r1, r0
 800e2e0:	1850      	adds	r0, r2, r1
 800e2e2:	4283      	cmp	r3, r0
 800e2e4:	6011      	str	r1, [r2, #0]
 800e2e6:	d1e0      	bne.n	800e2aa <_free_r+0x22>
 800e2e8:	6818      	ldr	r0, [r3, #0]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	6053      	str	r3, [r2, #4]
 800e2ee:	4408      	add	r0, r1
 800e2f0:	6010      	str	r0, [r2, #0]
 800e2f2:	e7da      	b.n	800e2aa <_free_r+0x22>
 800e2f4:	d902      	bls.n	800e2fc <_free_r+0x74>
 800e2f6:	230c      	movs	r3, #12
 800e2f8:	602b      	str	r3, [r5, #0]
 800e2fa:	e7d6      	b.n	800e2aa <_free_r+0x22>
 800e2fc:	6820      	ldr	r0, [r4, #0]
 800e2fe:	1821      	adds	r1, r4, r0
 800e300:	428b      	cmp	r3, r1
 800e302:	bf04      	itt	eq
 800e304:	6819      	ldreq	r1, [r3, #0]
 800e306:	685b      	ldreq	r3, [r3, #4]
 800e308:	6063      	str	r3, [r4, #4]
 800e30a:	bf04      	itt	eq
 800e30c:	1809      	addeq	r1, r1, r0
 800e30e:	6021      	streq	r1, [r4, #0]
 800e310:	6054      	str	r4, [r2, #4]
 800e312:	e7ca      	b.n	800e2aa <_free_r+0x22>
 800e314:	bd38      	pop	{r3, r4, r5, pc}
 800e316:	bf00      	nop
 800e318:	20000b7c 	.word	0x20000b7c

0800e31c <malloc>:
 800e31c:	4b02      	ldr	r3, [pc, #8]	@ (800e328 <malloc+0xc>)
 800e31e:	4601      	mov	r1, r0
 800e320:	6818      	ldr	r0, [r3, #0]
 800e322:	f7fe b8ab 	b.w	800c47c <_malloc_r>
 800e326:	bf00      	nop
 800e328:	20000030 	.word	0x20000030

0800e32c <_Balloc>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	69c6      	ldr	r6, [r0, #28]
 800e330:	4604      	mov	r4, r0
 800e332:	460d      	mov	r5, r1
 800e334:	b976      	cbnz	r6, 800e354 <_Balloc+0x28>
 800e336:	2010      	movs	r0, #16
 800e338:	f7ff fff0 	bl	800e31c <malloc>
 800e33c:	4602      	mov	r2, r0
 800e33e:	61e0      	str	r0, [r4, #28]
 800e340:	b920      	cbnz	r0, 800e34c <_Balloc+0x20>
 800e342:	4b18      	ldr	r3, [pc, #96]	@ (800e3a4 <_Balloc+0x78>)
 800e344:	4818      	ldr	r0, [pc, #96]	@ (800e3a8 <_Balloc+0x7c>)
 800e346:	216b      	movs	r1, #107	@ 0x6b
 800e348:	f001 fd66 	bl	800fe18 <__assert_func>
 800e34c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e350:	6006      	str	r6, [r0, #0]
 800e352:	60c6      	str	r6, [r0, #12]
 800e354:	69e6      	ldr	r6, [r4, #28]
 800e356:	68f3      	ldr	r3, [r6, #12]
 800e358:	b183      	cbz	r3, 800e37c <_Balloc+0x50>
 800e35a:	69e3      	ldr	r3, [r4, #28]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e362:	b9b8      	cbnz	r0, 800e394 <_Balloc+0x68>
 800e364:	2101      	movs	r1, #1
 800e366:	fa01 f605 	lsl.w	r6, r1, r5
 800e36a:	1d72      	adds	r2, r6, #5
 800e36c:	0092      	lsls	r2, r2, #2
 800e36e:	4620      	mov	r0, r4
 800e370:	f7fe f84e 	bl	800c410 <_calloc_r>
 800e374:	b160      	cbz	r0, 800e390 <_Balloc+0x64>
 800e376:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e37a:	e00e      	b.n	800e39a <_Balloc+0x6e>
 800e37c:	2221      	movs	r2, #33	@ 0x21
 800e37e:	2104      	movs	r1, #4
 800e380:	4620      	mov	r0, r4
 800e382:	f7fe f845 	bl	800c410 <_calloc_r>
 800e386:	69e3      	ldr	r3, [r4, #28]
 800e388:	60f0      	str	r0, [r6, #12]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d1e4      	bne.n	800e35a <_Balloc+0x2e>
 800e390:	2000      	movs	r0, #0
 800e392:	bd70      	pop	{r4, r5, r6, pc}
 800e394:	6802      	ldr	r2, [r0, #0]
 800e396:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e39a:	2300      	movs	r3, #0
 800e39c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3a0:	e7f7      	b.n	800e392 <_Balloc+0x66>
 800e3a2:	bf00      	nop
 800e3a4:	08011b7a 	.word	0x08011b7a
 800e3a8:	08011bfa 	.word	0x08011bfa

0800e3ac <_Bfree>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	69c6      	ldr	r6, [r0, #28]
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	b976      	cbnz	r6, 800e3d4 <_Bfree+0x28>
 800e3b6:	2010      	movs	r0, #16
 800e3b8:	f7ff ffb0 	bl	800e31c <malloc>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	61e8      	str	r0, [r5, #28]
 800e3c0:	b920      	cbnz	r0, 800e3cc <_Bfree+0x20>
 800e3c2:	4b09      	ldr	r3, [pc, #36]	@ (800e3e8 <_Bfree+0x3c>)
 800e3c4:	4809      	ldr	r0, [pc, #36]	@ (800e3ec <_Bfree+0x40>)
 800e3c6:	218f      	movs	r1, #143	@ 0x8f
 800e3c8:	f001 fd26 	bl	800fe18 <__assert_func>
 800e3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3d0:	6006      	str	r6, [r0, #0]
 800e3d2:	60c6      	str	r6, [r0, #12]
 800e3d4:	b13c      	cbz	r4, 800e3e6 <_Bfree+0x3a>
 800e3d6:	69eb      	ldr	r3, [r5, #28]
 800e3d8:	6862      	ldr	r2, [r4, #4]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3e0:	6021      	str	r1, [r4, #0]
 800e3e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	08011b7a 	.word	0x08011b7a
 800e3ec:	08011bfa 	.word	0x08011bfa

0800e3f0 <__multadd>:
 800e3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f4:	690d      	ldr	r5, [r1, #16]
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	461e      	mov	r6, r3
 800e3fc:	f101 0c14 	add.w	ip, r1, #20
 800e400:	2000      	movs	r0, #0
 800e402:	f8dc 3000 	ldr.w	r3, [ip]
 800e406:	b299      	uxth	r1, r3
 800e408:	fb02 6101 	mla	r1, r2, r1, r6
 800e40c:	0c1e      	lsrs	r6, r3, #16
 800e40e:	0c0b      	lsrs	r3, r1, #16
 800e410:	fb02 3306 	mla	r3, r2, r6, r3
 800e414:	b289      	uxth	r1, r1
 800e416:	3001      	adds	r0, #1
 800e418:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e41c:	4285      	cmp	r5, r0
 800e41e:	f84c 1b04 	str.w	r1, [ip], #4
 800e422:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e426:	dcec      	bgt.n	800e402 <__multadd+0x12>
 800e428:	b30e      	cbz	r6, 800e46e <__multadd+0x7e>
 800e42a:	68a3      	ldr	r3, [r4, #8]
 800e42c:	42ab      	cmp	r3, r5
 800e42e:	dc19      	bgt.n	800e464 <__multadd+0x74>
 800e430:	6861      	ldr	r1, [r4, #4]
 800e432:	4638      	mov	r0, r7
 800e434:	3101      	adds	r1, #1
 800e436:	f7ff ff79 	bl	800e32c <_Balloc>
 800e43a:	4680      	mov	r8, r0
 800e43c:	b928      	cbnz	r0, 800e44a <__multadd+0x5a>
 800e43e:	4602      	mov	r2, r0
 800e440:	4b0c      	ldr	r3, [pc, #48]	@ (800e474 <__multadd+0x84>)
 800e442:	480d      	ldr	r0, [pc, #52]	@ (800e478 <__multadd+0x88>)
 800e444:	21ba      	movs	r1, #186	@ 0xba
 800e446:	f001 fce7 	bl	800fe18 <__assert_func>
 800e44a:	6922      	ldr	r2, [r4, #16]
 800e44c:	3202      	adds	r2, #2
 800e44e:	f104 010c 	add.w	r1, r4, #12
 800e452:	0092      	lsls	r2, r2, #2
 800e454:	300c      	adds	r0, #12
 800e456:	f001 fcc9 	bl	800fdec <memcpy>
 800e45a:	4621      	mov	r1, r4
 800e45c:	4638      	mov	r0, r7
 800e45e:	f7ff ffa5 	bl	800e3ac <_Bfree>
 800e462:	4644      	mov	r4, r8
 800e464:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e468:	3501      	adds	r5, #1
 800e46a:	615e      	str	r6, [r3, #20]
 800e46c:	6125      	str	r5, [r4, #16]
 800e46e:	4620      	mov	r0, r4
 800e470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e474:	08011be9 	.word	0x08011be9
 800e478:	08011bfa 	.word	0x08011bfa

0800e47c <__s2b>:
 800e47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e480:	460c      	mov	r4, r1
 800e482:	4615      	mov	r5, r2
 800e484:	461f      	mov	r7, r3
 800e486:	2209      	movs	r2, #9
 800e488:	3308      	adds	r3, #8
 800e48a:	4606      	mov	r6, r0
 800e48c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e490:	2100      	movs	r1, #0
 800e492:	2201      	movs	r2, #1
 800e494:	429a      	cmp	r2, r3
 800e496:	db09      	blt.n	800e4ac <__s2b+0x30>
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff ff47 	bl	800e32c <_Balloc>
 800e49e:	b940      	cbnz	r0, 800e4b2 <__s2b+0x36>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	4b19      	ldr	r3, [pc, #100]	@ (800e508 <__s2b+0x8c>)
 800e4a4:	4819      	ldr	r0, [pc, #100]	@ (800e50c <__s2b+0x90>)
 800e4a6:	21d3      	movs	r1, #211	@ 0xd3
 800e4a8:	f001 fcb6 	bl	800fe18 <__assert_func>
 800e4ac:	0052      	lsls	r2, r2, #1
 800e4ae:	3101      	adds	r1, #1
 800e4b0:	e7f0      	b.n	800e494 <__s2b+0x18>
 800e4b2:	9b08      	ldr	r3, [sp, #32]
 800e4b4:	6143      	str	r3, [r0, #20]
 800e4b6:	2d09      	cmp	r5, #9
 800e4b8:	f04f 0301 	mov.w	r3, #1
 800e4bc:	6103      	str	r3, [r0, #16]
 800e4be:	dd16      	ble.n	800e4ee <__s2b+0x72>
 800e4c0:	f104 0909 	add.w	r9, r4, #9
 800e4c4:	46c8      	mov	r8, r9
 800e4c6:	442c      	add	r4, r5
 800e4c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e4cc:	4601      	mov	r1, r0
 800e4ce:	3b30      	subs	r3, #48	@ 0x30
 800e4d0:	220a      	movs	r2, #10
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ff8c 	bl	800e3f0 <__multadd>
 800e4d8:	45a0      	cmp	r8, r4
 800e4da:	d1f5      	bne.n	800e4c8 <__s2b+0x4c>
 800e4dc:	f1a5 0408 	sub.w	r4, r5, #8
 800e4e0:	444c      	add	r4, r9
 800e4e2:	1b2d      	subs	r5, r5, r4
 800e4e4:	1963      	adds	r3, r4, r5
 800e4e6:	42bb      	cmp	r3, r7
 800e4e8:	db04      	blt.n	800e4f4 <__s2b+0x78>
 800e4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ee:	340a      	adds	r4, #10
 800e4f0:	2509      	movs	r5, #9
 800e4f2:	e7f6      	b.n	800e4e2 <__s2b+0x66>
 800e4f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e4f8:	4601      	mov	r1, r0
 800e4fa:	3b30      	subs	r3, #48	@ 0x30
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	4630      	mov	r0, r6
 800e500:	f7ff ff76 	bl	800e3f0 <__multadd>
 800e504:	e7ee      	b.n	800e4e4 <__s2b+0x68>
 800e506:	bf00      	nop
 800e508:	08011be9 	.word	0x08011be9
 800e50c:	08011bfa 	.word	0x08011bfa

0800e510 <__hi0bits>:
 800e510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e514:	4603      	mov	r3, r0
 800e516:	bf36      	itet	cc
 800e518:	0403      	lslcc	r3, r0, #16
 800e51a:	2000      	movcs	r0, #0
 800e51c:	2010      	movcc	r0, #16
 800e51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e522:	bf3c      	itt	cc
 800e524:	021b      	lslcc	r3, r3, #8
 800e526:	3008      	addcc	r0, #8
 800e528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e52c:	bf3c      	itt	cc
 800e52e:	011b      	lslcc	r3, r3, #4
 800e530:	3004      	addcc	r0, #4
 800e532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e536:	bf3c      	itt	cc
 800e538:	009b      	lslcc	r3, r3, #2
 800e53a:	3002      	addcc	r0, #2
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	db05      	blt.n	800e54c <__hi0bits+0x3c>
 800e540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e544:	f100 0001 	add.w	r0, r0, #1
 800e548:	bf08      	it	eq
 800e54a:	2020      	moveq	r0, #32
 800e54c:	4770      	bx	lr

0800e54e <__lo0bits>:
 800e54e:	6803      	ldr	r3, [r0, #0]
 800e550:	4602      	mov	r2, r0
 800e552:	f013 0007 	ands.w	r0, r3, #7
 800e556:	d00b      	beq.n	800e570 <__lo0bits+0x22>
 800e558:	07d9      	lsls	r1, r3, #31
 800e55a:	d421      	bmi.n	800e5a0 <__lo0bits+0x52>
 800e55c:	0798      	lsls	r0, r3, #30
 800e55e:	bf49      	itett	mi
 800e560:	085b      	lsrmi	r3, r3, #1
 800e562:	089b      	lsrpl	r3, r3, #2
 800e564:	2001      	movmi	r0, #1
 800e566:	6013      	strmi	r3, [r2, #0]
 800e568:	bf5c      	itt	pl
 800e56a:	6013      	strpl	r3, [r2, #0]
 800e56c:	2002      	movpl	r0, #2
 800e56e:	4770      	bx	lr
 800e570:	b299      	uxth	r1, r3
 800e572:	b909      	cbnz	r1, 800e578 <__lo0bits+0x2a>
 800e574:	0c1b      	lsrs	r3, r3, #16
 800e576:	2010      	movs	r0, #16
 800e578:	b2d9      	uxtb	r1, r3
 800e57a:	b909      	cbnz	r1, 800e580 <__lo0bits+0x32>
 800e57c:	3008      	adds	r0, #8
 800e57e:	0a1b      	lsrs	r3, r3, #8
 800e580:	0719      	lsls	r1, r3, #28
 800e582:	bf04      	itt	eq
 800e584:	091b      	lsreq	r3, r3, #4
 800e586:	3004      	addeq	r0, #4
 800e588:	0799      	lsls	r1, r3, #30
 800e58a:	bf04      	itt	eq
 800e58c:	089b      	lsreq	r3, r3, #2
 800e58e:	3002      	addeq	r0, #2
 800e590:	07d9      	lsls	r1, r3, #31
 800e592:	d403      	bmi.n	800e59c <__lo0bits+0x4e>
 800e594:	085b      	lsrs	r3, r3, #1
 800e596:	f100 0001 	add.w	r0, r0, #1
 800e59a:	d003      	beq.n	800e5a4 <__lo0bits+0x56>
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	4770      	bx	lr
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	4770      	bx	lr
 800e5a4:	2020      	movs	r0, #32
 800e5a6:	4770      	bx	lr

0800e5a8 <__i2b>:
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	f7ff febd 	bl	800e32c <_Balloc>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	b928      	cbnz	r0, 800e5c2 <__i2b+0x1a>
 800e5b6:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <__i2b+0x24>)
 800e5b8:	4805      	ldr	r0, [pc, #20]	@ (800e5d0 <__i2b+0x28>)
 800e5ba:	f240 1145 	movw	r1, #325	@ 0x145
 800e5be:	f001 fc2b 	bl	800fe18 <__assert_func>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	6144      	str	r4, [r0, #20]
 800e5c6:	6103      	str	r3, [r0, #16]
 800e5c8:	bd10      	pop	{r4, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08011be9 	.word	0x08011be9
 800e5d0:	08011bfa 	.word	0x08011bfa

0800e5d4 <__multiply>:
 800e5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d8:	4617      	mov	r7, r2
 800e5da:	690a      	ldr	r2, [r1, #16]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	bfa8      	it	ge
 800e5e2:	463b      	movge	r3, r7
 800e5e4:	4689      	mov	r9, r1
 800e5e6:	bfa4      	itt	ge
 800e5e8:	460f      	movge	r7, r1
 800e5ea:	4699      	movge	r9, r3
 800e5ec:	693d      	ldr	r5, [r7, #16]
 800e5ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	eb05 060a 	add.w	r6, r5, sl
 800e5fa:	42b3      	cmp	r3, r6
 800e5fc:	b085      	sub	sp, #20
 800e5fe:	bfb8      	it	lt
 800e600:	3101      	addlt	r1, #1
 800e602:	f7ff fe93 	bl	800e32c <_Balloc>
 800e606:	b930      	cbnz	r0, 800e616 <__multiply+0x42>
 800e608:	4602      	mov	r2, r0
 800e60a:	4b41      	ldr	r3, [pc, #260]	@ (800e710 <__multiply+0x13c>)
 800e60c:	4841      	ldr	r0, [pc, #260]	@ (800e714 <__multiply+0x140>)
 800e60e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e612:	f001 fc01 	bl	800fe18 <__assert_func>
 800e616:	f100 0414 	add.w	r4, r0, #20
 800e61a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e61e:	4623      	mov	r3, r4
 800e620:	2200      	movs	r2, #0
 800e622:	4573      	cmp	r3, lr
 800e624:	d320      	bcc.n	800e668 <__multiply+0x94>
 800e626:	f107 0814 	add.w	r8, r7, #20
 800e62a:	f109 0114 	add.w	r1, r9, #20
 800e62e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e632:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e636:	9302      	str	r3, [sp, #8]
 800e638:	1beb      	subs	r3, r5, r7
 800e63a:	3b15      	subs	r3, #21
 800e63c:	f023 0303 	bic.w	r3, r3, #3
 800e640:	3304      	adds	r3, #4
 800e642:	3715      	adds	r7, #21
 800e644:	42bd      	cmp	r5, r7
 800e646:	bf38      	it	cc
 800e648:	2304      	movcc	r3, #4
 800e64a:	9301      	str	r3, [sp, #4]
 800e64c:	9b02      	ldr	r3, [sp, #8]
 800e64e:	9103      	str	r1, [sp, #12]
 800e650:	428b      	cmp	r3, r1
 800e652:	d80c      	bhi.n	800e66e <__multiply+0x9a>
 800e654:	2e00      	cmp	r6, #0
 800e656:	dd03      	ble.n	800e660 <__multiply+0x8c>
 800e658:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d055      	beq.n	800e70c <__multiply+0x138>
 800e660:	6106      	str	r6, [r0, #16]
 800e662:	b005      	add	sp, #20
 800e664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e668:	f843 2b04 	str.w	r2, [r3], #4
 800e66c:	e7d9      	b.n	800e622 <__multiply+0x4e>
 800e66e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e672:	f1ba 0f00 	cmp.w	sl, #0
 800e676:	d01f      	beq.n	800e6b8 <__multiply+0xe4>
 800e678:	46c4      	mov	ip, r8
 800e67a:	46a1      	mov	r9, r4
 800e67c:	2700      	movs	r7, #0
 800e67e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e682:	f8d9 3000 	ldr.w	r3, [r9]
 800e686:	fa1f fb82 	uxth.w	fp, r2
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e690:	443b      	add	r3, r7
 800e692:	f8d9 7000 	ldr.w	r7, [r9]
 800e696:	0c12      	lsrs	r2, r2, #16
 800e698:	0c3f      	lsrs	r7, r7, #16
 800e69a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e69e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6a8:	4565      	cmp	r5, ip
 800e6aa:	f849 3b04 	str.w	r3, [r9], #4
 800e6ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e6b2:	d8e4      	bhi.n	800e67e <__multiply+0xaa>
 800e6b4:	9b01      	ldr	r3, [sp, #4]
 800e6b6:	50e7      	str	r7, [r4, r3]
 800e6b8:	9b03      	ldr	r3, [sp, #12]
 800e6ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e6be:	3104      	adds	r1, #4
 800e6c0:	f1b9 0f00 	cmp.w	r9, #0
 800e6c4:	d020      	beq.n	800e708 <__multiply+0x134>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	4647      	mov	r7, r8
 800e6ca:	46a4      	mov	ip, r4
 800e6cc:	f04f 0a00 	mov.w	sl, #0
 800e6d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e6d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e6d8:	fb09 220b 	mla	r2, r9, fp, r2
 800e6dc:	4452      	add	r2, sl
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6e4:	f84c 3b04 	str.w	r3, [ip], #4
 800e6e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e6ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e6f4:	fb09 330a 	mla	r3, r9, sl, r3
 800e6f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e6fc:	42bd      	cmp	r5, r7
 800e6fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e702:	d8e5      	bhi.n	800e6d0 <__multiply+0xfc>
 800e704:	9a01      	ldr	r2, [sp, #4]
 800e706:	50a3      	str	r3, [r4, r2]
 800e708:	3404      	adds	r4, #4
 800e70a:	e79f      	b.n	800e64c <__multiply+0x78>
 800e70c:	3e01      	subs	r6, #1
 800e70e:	e7a1      	b.n	800e654 <__multiply+0x80>
 800e710:	08011be9 	.word	0x08011be9
 800e714:	08011bfa 	.word	0x08011bfa

0800e718 <__pow5mult>:
 800e718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e71c:	4615      	mov	r5, r2
 800e71e:	f012 0203 	ands.w	r2, r2, #3
 800e722:	4607      	mov	r7, r0
 800e724:	460e      	mov	r6, r1
 800e726:	d007      	beq.n	800e738 <__pow5mult+0x20>
 800e728:	4c25      	ldr	r4, [pc, #148]	@ (800e7c0 <__pow5mult+0xa8>)
 800e72a:	3a01      	subs	r2, #1
 800e72c:	2300      	movs	r3, #0
 800e72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e732:	f7ff fe5d 	bl	800e3f0 <__multadd>
 800e736:	4606      	mov	r6, r0
 800e738:	10ad      	asrs	r5, r5, #2
 800e73a:	d03d      	beq.n	800e7b8 <__pow5mult+0xa0>
 800e73c:	69fc      	ldr	r4, [r7, #28]
 800e73e:	b97c      	cbnz	r4, 800e760 <__pow5mult+0x48>
 800e740:	2010      	movs	r0, #16
 800e742:	f7ff fdeb 	bl	800e31c <malloc>
 800e746:	4602      	mov	r2, r0
 800e748:	61f8      	str	r0, [r7, #28]
 800e74a:	b928      	cbnz	r0, 800e758 <__pow5mult+0x40>
 800e74c:	4b1d      	ldr	r3, [pc, #116]	@ (800e7c4 <__pow5mult+0xac>)
 800e74e:	481e      	ldr	r0, [pc, #120]	@ (800e7c8 <__pow5mult+0xb0>)
 800e750:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e754:	f001 fb60 	bl	800fe18 <__assert_func>
 800e758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e75c:	6004      	str	r4, [r0, #0]
 800e75e:	60c4      	str	r4, [r0, #12]
 800e760:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e768:	b94c      	cbnz	r4, 800e77e <__pow5mult+0x66>
 800e76a:	f240 2171 	movw	r1, #625	@ 0x271
 800e76e:	4638      	mov	r0, r7
 800e770:	f7ff ff1a 	bl	800e5a8 <__i2b>
 800e774:	2300      	movs	r3, #0
 800e776:	f8c8 0008 	str.w	r0, [r8, #8]
 800e77a:	4604      	mov	r4, r0
 800e77c:	6003      	str	r3, [r0, #0]
 800e77e:	f04f 0900 	mov.w	r9, #0
 800e782:	07eb      	lsls	r3, r5, #31
 800e784:	d50a      	bpl.n	800e79c <__pow5mult+0x84>
 800e786:	4631      	mov	r1, r6
 800e788:	4622      	mov	r2, r4
 800e78a:	4638      	mov	r0, r7
 800e78c:	f7ff ff22 	bl	800e5d4 <__multiply>
 800e790:	4631      	mov	r1, r6
 800e792:	4680      	mov	r8, r0
 800e794:	4638      	mov	r0, r7
 800e796:	f7ff fe09 	bl	800e3ac <_Bfree>
 800e79a:	4646      	mov	r6, r8
 800e79c:	106d      	asrs	r5, r5, #1
 800e79e:	d00b      	beq.n	800e7b8 <__pow5mult+0xa0>
 800e7a0:	6820      	ldr	r0, [r4, #0]
 800e7a2:	b938      	cbnz	r0, 800e7b4 <__pow5mult+0x9c>
 800e7a4:	4622      	mov	r2, r4
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	4638      	mov	r0, r7
 800e7aa:	f7ff ff13 	bl	800e5d4 <__multiply>
 800e7ae:	6020      	str	r0, [r4, #0]
 800e7b0:	f8c0 9000 	str.w	r9, [r0]
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	e7e4      	b.n	800e782 <__pow5mult+0x6a>
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7be:	bf00      	nop
 800e7c0:	08011d0c 	.word	0x08011d0c
 800e7c4:	08011b7a 	.word	0x08011b7a
 800e7c8:	08011bfa 	.word	0x08011bfa

0800e7cc <__lshift>:
 800e7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d0:	460c      	mov	r4, r1
 800e7d2:	6849      	ldr	r1, [r1, #4]
 800e7d4:	6923      	ldr	r3, [r4, #16]
 800e7d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	4607      	mov	r7, r0
 800e7de:	4691      	mov	r9, r2
 800e7e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7e4:	f108 0601 	add.w	r6, r8, #1
 800e7e8:	42b3      	cmp	r3, r6
 800e7ea:	db0b      	blt.n	800e804 <__lshift+0x38>
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	f7ff fd9d 	bl	800e32c <_Balloc>
 800e7f2:	4605      	mov	r5, r0
 800e7f4:	b948      	cbnz	r0, 800e80a <__lshift+0x3e>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	4b28      	ldr	r3, [pc, #160]	@ (800e89c <__lshift+0xd0>)
 800e7fa:	4829      	ldr	r0, [pc, #164]	@ (800e8a0 <__lshift+0xd4>)
 800e7fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e800:	f001 fb0a 	bl	800fe18 <__assert_func>
 800e804:	3101      	adds	r1, #1
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	e7ee      	b.n	800e7e8 <__lshift+0x1c>
 800e80a:	2300      	movs	r3, #0
 800e80c:	f100 0114 	add.w	r1, r0, #20
 800e810:	f100 0210 	add.w	r2, r0, #16
 800e814:	4618      	mov	r0, r3
 800e816:	4553      	cmp	r3, sl
 800e818:	db33      	blt.n	800e882 <__lshift+0xb6>
 800e81a:	6920      	ldr	r0, [r4, #16]
 800e81c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e820:	f104 0314 	add.w	r3, r4, #20
 800e824:	f019 091f 	ands.w	r9, r9, #31
 800e828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e82c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e830:	d02b      	beq.n	800e88a <__lshift+0xbe>
 800e832:	f1c9 0e20 	rsb	lr, r9, #32
 800e836:	468a      	mov	sl, r1
 800e838:	2200      	movs	r2, #0
 800e83a:	6818      	ldr	r0, [r3, #0]
 800e83c:	fa00 f009 	lsl.w	r0, r0, r9
 800e840:	4310      	orrs	r0, r2
 800e842:	f84a 0b04 	str.w	r0, [sl], #4
 800e846:	f853 2b04 	ldr.w	r2, [r3], #4
 800e84a:	459c      	cmp	ip, r3
 800e84c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e850:	d8f3      	bhi.n	800e83a <__lshift+0x6e>
 800e852:	ebac 0304 	sub.w	r3, ip, r4
 800e856:	3b15      	subs	r3, #21
 800e858:	f023 0303 	bic.w	r3, r3, #3
 800e85c:	3304      	adds	r3, #4
 800e85e:	f104 0015 	add.w	r0, r4, #21
 800e862:	4560      	cmp	r0, ip
 800e864:	bf88      	it	hi
 800e866:	2304      	movhi	r3, #4
 800e868:	50ca      	str	r2, [r1, r3]
 800e86a:	b10a      	cbz	r2, 800e870 <__lshift+0xa4>
 800e86c:	f108 0602 	add.w	r6, r8, #2
 800e870:	3e01      	subs	r6, #1
 800e872:	4638      	mov	r0, r7
 800e874:	612e      	str	r6, [r5, #16]
 800e876:	4621      	mov	r1, r4
 800e878:	f7ff fd98 	bl	800e3ac <_Bfree>
 800e87c:	4628      	mov	r0, r5
 800e87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e882:	f842 0f04 	str.w	r0, [r2, #4]!
 800e886:	3301      	adds	r3, #1
 800e888:	e7c5      	b.n	800e816 <__lshift+0x4a>
 800e88a:	3904      	subs	r1, #4
 800e88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e890:	f841 2f04 	str.w	r2, [r1, #4]!
 800e894:	459c      	cmp	ip, r3
 800e896:	d8f9      	bhi.n	800e88c <__lshift+0xc0>
 800e898:	e7ea      	b.n	800e870 <__lshift+0xa4>
 800e89a:	bf00      	nop
 800e89c:	08011be9 	.word	0x08011be9
 800e8a0:	08011bfa 	.word	0x08011bfa

0800e8a4 <__mcmp>:
 800e8a4:	690a      	ldr	r2, [r1, #16]
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	6900      	ldr	r0, [r0, #16]
 800e8aa:	1a80      	subs	r0, r0, r2
 800e8ac:	b530      	push	{r4, r5, lr}
 800e8ae:	d10e      	bne.n	800e8ce <__mcmp+0x2a>
 800e8b0:	3314      	adds	r3, #20
 800e8b2:	3114      	adds	r1, #20
 800e8b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e8b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e8bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8c4:	4295      	cmp	r5, r2
 800e8c6:	d003      	beq.n	800e8d0 <__mcmp+0x2c>
 800e8c8:	d205      	bcs.n	800e8d6 <__mcmp+0x32>
 800e8ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8ce:	bd30      	pop	{r4, r5, pc}
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	d3f3      	bcc.n	800e8bc <__mcmp+0x18>
 800e8d4:	e7fb      	b.n	800e8ce <__mcmp+0x2a>
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	e7f9      	b.n	800e8ce <__mcmp+0x2a>
	...

0800e8dc <__mdiff>:
 800e8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	4689      	mov	r9, r1
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	4648      	mov	r0, r9
 800e8e8:	4614      	mov	r4, r2
 800e8ea:	f7ff ffdb 	bl	800e8a4 <__mcmp>
 800e8ee:	1e05      	subs	r5, r0, #0
 800e8f0:	d112      	bne.n	800e918 <__mdiff+0x3c>
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff fd19 	bl	800e32c <_Balloc>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	b928      	cbnz	r0, 800e90a <__mdiff+0x2e>
 800e8fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e9fc <__mdiff+0x120>)
 800e900:	f240 2137 	movw	r1, #567	@ 0x237
 800e904:	483e      	ldr	r0, [pc, #248]	@ (800ea00 <__mdiff+0x124>)
 800e906:	f001 fa87 	bl	800fe18 <__assert_func>
 800e90a:	2301      	movs	r3, #1
 800e90c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e910:	4610      	mov	r0, r2
 800e912:	b003      	add	sp, #12
 800e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e918:	bfbc      	itt	lt
 800e91a:	464b      	movlt	r3, r9
 800e91c:	46a1      	movlt	r9, r4
 800e91e:	4630      	mov	r0, r6
 800e920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e924:	bfba      	itte	lt
 800e926:	461c      	movlt	r4, r3
 800e928:	2501      	movlt	r5, #1
 800e92a:	2500      	movge	r5, #0
 800e92c:	f7ff fcfe 	bl	800e32c <_Balloc>
 800e930:	4602      	mov	r2, r0
 800e932:	b918      	cbnz	r0, 800e93c <__mdiff+0x60>
 800e934:	4b31      	ldr	r3, [pc, #196]	@ (800e9fc <__mdiff+0x120>)
 800e936:	f240 2145 	movw	r1, #581	@ 0x245
 800e93a:	e7e3      	b.n	800e904 <__mdiff+0x28>
 800e93c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e940:	6926      	ldr	r6, [r4, #16]
 800e942:	60c5      	str	r5, [r0, #12]
 800e944:	f109 0310 	add.w	r3, r9, #16
 800e948:	f109 0514 	add.w	r5, r9, #20
 800e94c:	f104 0e14 	add.w	lr, r4, #20
 800e950:	f100 0b14 	add.w	fp, r0, #20
 800e954:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e958:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	46d9      	mov	r9, fp
 800e960:	f04f 0c00 	mov.w	ip, #0
 800e964:	9b01      	ldr	r3, [sp, #4]
 800e966:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e96a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	fa1f f38a 	uxth.w	r3, sl
 800e974:	4619      	mov	r1, r3
 800e976:	b283      	uxth	r3, r0
 800e978:	1acb      	subs	r3, r1, r3
 800e97a:	0c00      	lsrs	r0, r0, #16
 800e97c:	4463      	add	r3, ip
 800e97e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e982:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e986:	b29b      	uxth	r3, r3
 800e988:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e98c:	4576      	cmp	r6, lr
 800e98e:	f849 3b04 	str.w	r3, [r9], #4
 800e992:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e996:	d8e5      	bhi.n	800e964 <__mdiff+0x88>
 800e998:	1b33      	subs	r3, r6, r4
 800e99a:	3b15      	subs	r3, #21
 800e99c:	f023 0303 	bic.w	r3, r3, #3
 800e9a0:	3415      	adds	r4, #21
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	42a6      	cmp	r6, r4
 800e9a6:	bf38      	it	cc
 800e9a8:	2304      	movcc	r3, #4
 800e9aa:	441d      	add	r5, r3
 800e9ac:	445b      	add	r3, fp
 800e9ae:	461e      	mov	r6, r3
 800e9b0:	462c      	mov	r4, r5
 800e9b2:	4544      	cmp	r4, r8
 800e9b4:	d30e      	bcc.n	800e9d4 <__mdiff+0xf8>
 800e9b6:	f108 0103 	add.w	r1, r8, #3
 800e9ba:	1b49      	subs	r1, r1, r5
 800e9bc:	f021 0103 	bic.w	r1, r1, #3
 800e9c0:	3d03      	subs	r5, #3
 800e9c2:	45a8      	cmp	r8, r5
 800e9c4:	bf38      	it	cc
 800e9c6:	2100      	movcc	r1, #0
 800e9c8:	440b      	add	r3, r1
 800e9ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9ce:	b191      	cbz	r1, 800e9f6 <__mdiff+0x11a>
 800e9d0:	6117      	str	r7, [r2, #16]
 800e9d2:	e79d      	b.n	800e910 <__mdiff+0x34>
 800e9d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e9d8:	46e6      	mov	lr, ip
 800e9da:	0c08      	lsrs	r0, r1, #16
 800e9dc:	fa1c fc81 	uxtah	ip, ip, r1
 800e9e0:	4471      	add	r1, lr
 800e9e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e9e6:	b289      	uxth	r1, r1
 800e9e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e9ec:	f846 1b04 	str.w	r1, [r6], #4
 800e9f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e9f4:	e7dd      	b.n	800e9b2 <__mdiff+0xd6>
 800e9f6:	3f01      	subs	r7, #1
 800e9f8:	e7e7      	b.n	800e9ca <__mdiff+0xee>
 800e9fa:	bf00      	nop
 800e9fc:	08011be9 	.word	0x08011be9
 800ea00:	08011bfa 	.word	0x08011bfa

0800ea04 <__ulp>:
 800ea04:	b082      	sub	sp, #8
 800ea06:	ed8d 0b00 	vstr	d0, [sp]
 800ea0a:	9a01      	ldr	r2, [sp, #4]
 800ea0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ea4c <__ulp+0x48>)
 800ea0e:	4013      	ands	r3, r2
 800ea10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	dc08      	bgt.n	800ea2a <__ulp+0x26>
 800ea18:	425b      	negs	r3, r3
 800ea1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ea1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ea22:	da04      	bge.n	800ea2e <__ulp+0x2a>
 800ea24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ea28:	4113      	asrs	r3, r2
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	e008      	b.n	800ea40 <__ulp+0x3c>
 800ea2e:	f1a2 0314 	sub.w	r3, r2, #20
 800ea32:	2b1e      	cmp	r3, #30
 800ea34:	bfda      	itte	le
 800ea36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ea3a:	40da      	lsrle	r2, r3
 800ea3c:	2201      	movgt	r2, #1
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4619      	mov	r1, r3
 800ea42:	4610      	mov	r0, r2
 800ea44:	ec41 0b10 	vmov	d0, r0, r1
 800ea48:	b002      	add	sp, #8
 800ea4a:	4770      	bx	lr
 800ea4c:	7ff00000 	.word	0x7ff00000

0800ea50 <__b2d>:
 800ea50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea54:	6906      	ldr	r6, [r0, #16]
 800ea56:	f100 0814 	add.w	r8, r0, #20
 800ea5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ea5e:	1f37      	subs	r7, r6, #4
 800ea60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea64:	4610      	mov	r0, r2
 800ea66:	f7ff fd53 	bl	800e510 <__hi0bits>
 800ea6a:	f1c0 0320 	rsb	r3, r0, #32
 800ea6e:	280a      	cmp	r0, #10
 800ea70:	600b      	str	r3, [r1, #0]
 800ea72:	491b      	ldr	r1, [pc, #108]	@ (800eae0 <__b2d+0x90>)
 800ea74:	dc15      	bgt.n	800eaa2 <__b2d+0x52>
 800ea76:	f1c0 0c0b 	rsb	ip, r0, #11
 800ea7a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ea7e:	45b8      	cmp	r8, r7
 800ea80:	ea43 0501 	orr.w	r5, r3, r1
 800ea84:	bf34      	ite	cc
 800ea86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea8a:	2300      	movcs	r3, #0
 800ea8c:	3015      	adds	r0, #21
 800ea8e:	fa02 f000 	lsl.w	r0, r2, r0
 800ea92:	fa23 f30c 	lsr.w	r3, r3, ip
 800ea96:	4303      	orrs	r3, r0
 800ea98:	461c      	mov	r4, r3
 800ea9a:	ec45 4b10 	vmov	d0, r4, r5
 800ea9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa2:	45b8      	cmp	r8, r7
 800eaa4:	bf3a      	itte	cc
 800eaa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eaaa:	f1a6 0708 	subcc.w	r7, r6, #8
 800eaae:	2300      	movcs	r3, #0
 800eab0:	380b      	subs	r0, #11
 800eab2:	d012      	beq.n	800eada <__b2d+0x8a>
 800eab4:	f1c0 0120 	rsb	r1, r0, #32
 800eab8:	fa23 f401 	lsr.w	r4, r3, r1
 800eabc:	4082      	lsls	r2, r0
 800eabe:	4322      	orrs	r2, r4
 800eac0:	4547      	cmp	r7, r8
 800eac2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800eac6:	bf8c      	ite	hi
 800eac8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eacc:	2200      	movls	r2, #0
 800eace:	4083      	lsls	r3, r0
 800ead0:	40ca      	lsrs	r2, r1
 800ead2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ead6:	4313      	orrs	r3, r2
 800ead8:	e7de      	b.n	800ea98 <__b2d+0x48>
 800eada:	ea42 0501 	orr.w	r5, r2, r1
 800eade:	e7db      	b.n	800ea98 <__b2d+0x48>
 800eae0:	3ff00000 	.word	0x3ff00000

0800eae4 <__d2b>:
 800eae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eae8:	460f      	mov	r7, r1
 800eaea:	2101      	movs	r1, #1
 800eaec:	ec59 8b10 	vmov	r8, r9, d0
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	f7ff fc1b 	bl	800e32c <_Balloc>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	b930      	cbnz	r0, 800eb08 <__d2b+0x24>
 800eafa:	4602      	mov	r2, r0
 800eafc:	4b23      	ldr	r3, [pc, #140]	@ (800eb8c <__d2b+0xa8>)
 800eafe:	4824      	ldr	r0, [pc, #144]	@ (800eb90 <__d2b+0xac>)
 800eb00:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb04:	f001 f988 	bl	800fe18 <__assert_func>
 800eb08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb10:	b10d      	cbz	r5, 800eb16 <__d2b+0x32>
 800eb12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb16:	9301      	str	r3, [sp, #4]
 800eb18:	f1b8 0300 	subs.w	r3, r8, #0
 800eb1c:	d023      	beq.n	800eb66 <__d2b+0x82>
 800eb1e:	4668      	mov	r0, sp
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	f7ff fd14 	bl	800e54e <__lo0bits>
 800eb26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb2a:	b1d0      	cbz	r0, 800eb62 <__d2b+0x7e>
 800eb2c:	f1c0 0320 	rsb	r3, r0, #32
 800eb30:	fa02 f303 	lsl.w	r3, r2, r3
 800eb34:	430b      	orrs	r3, r1
 800eb36:	40c2      	lsrs	r2, r0
 800eb38:	6163      	str	r3, [r4, #20]
 800eb3a:	9201      	str	r2, [sp, #4]
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	61a3      	str	r3, [r4, #24]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bf0c      	ite	eq
 800eb44:	2201      	moveq	r2, #1
 800eb46:	2202      	movne	r2, #2
 800eb48:	6122      	str	r2, [r4, #16]
 800eb4a:	b1a5      	cbz	r5, 800eb76 <__d2b+0x92>
 800eb4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eb50:	4405      	add	r5, r0
 800eb52:	603d      	str	r5, [r7, #0]
 800eb54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eb58:	6030      	str	r0, [r6, #0]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	b003      	add	sp, #12
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb62:	6161      	str	r1, [r4, #20]
 800eb64:	e7ea      	b.n	800eb3c <__d2b+0x58>
 800eb66:	a801      	add	r0, sp, #4
 800eb68:	f7ff fcf1 	bl	800e54e <__lo0bits>
 800eb6c:	9b01      	ldr	r3, [sp, #4]
 800eb6e:	6163      	str	r3, [r4, #20]
 800eb70:	3020      	adds	r0, #32
 800eb72:	2201      	movs	r2, #1
 800eb74:	e7e8      	b.n	800eb48 <__d2b+0x64>
 800eb76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb7e:	6038      	str	r0, [r7, #0]
 800eb80:	6918      	ldr	r0, [r3, #16]
 800eb82:	f7ff fcc5 	bl	800e510 <__hi0bits>
 800eb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb8a:	e7e5      	b.n	800eb58 <__d2b+0x74>
 800eb8c:	08011be9 	.word	0x08011be9
 800eb90:	08011bfa 	.word	0x08011bfa

0800eb94 <__ratio>:
 800eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	e9cd 1000 	strd	r1, r0, [sp]
 800eb9e:	a902      	add	r1, sp, #8
 800eba0:	f7ff ff56 	bl	800ea50 <__b2d>
 800eba4:	9800      	ldr	r0, [sp, #0]
 800eba6:	a903      	add	r1, sp, #12
 800eba8:	ec55 4b10 	vmov	r4, r5, d0
 800ebac:	f7ff ff50 	bl	800ea50 <__b2d>
 800ebb0:	9b01      	ldr	r3, [sp, #4]
 800ebb2:	6919      	ldr	r1, [r3, #16]
 800ebb4:	9b00      	ldr	r3, [sp, #0]
 800ebb6:	691b      	ldr	r3, [r3, #16]
 800ebb8:	1ac9      	subs	r1, r1, r3
 800ebba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	ec5b ab10 	vmov	sl, fp, d0
 800ebc4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bfce      	itee	gt
 800ebcc:	462a      	movgt	r2, r5
 800ebce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ebd2:	465a      	movle	r2, fp
 800ebd4:	462f      	mov	r7, r5
 800ebd6:	46d9      	mov	r9, fp
 800ebd8:	bfcc      	ite	gt
 800ebda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ebde:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	4652      	mov	r2, sl
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	4639      	mov	r1, r7
 800ebea:	f7f1 fe4f 	bl	800088c <__aeabi_ddiv>
 800ebee:	ec41 0b10 	vmov	d0, r0, r1
 800ebf2:	b005      	add	sp, #20
 800ebf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebf8 <__copybits>:
 800ebf8:	3901      	subs	r1, #1
 800ebfa:	b570      	push	{r4, r5, r6, lr}
 800ebfc:	1149      	asrs	r1, r1, #5
 800ebfe:	6914      	ldr	r4, [r2, #16]
 800ec00:	3101      	adds	r1, #1
 800ec02:	f102 0314 	add.w	r3, r2, #20
 800ec06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec0e:	1f05      	subs	r5, r0, #4
 800ec10:	42a3      	cmp	r3, r4
 800ec12:	d30c      	bcc.n	800ec2e <__copybits+0x36>
 800ec14:	1aa3      	subs	r3, r4, r2
 800ec16:	3b11      	subs	r3, #17
 800ec18:	f023 0303 	bic.w	r3, r3, #3
 800ec1c:	3211      	adds	r2, #17
 800ec1e:	42a2      	cmp	r2, r4
 800ec20:	bf88      	it	hi
 800ec22:	2300      	movhi	r3, #0
 800ec24:	4418      	add	r0, r3
 800ec26:	2300      	movs	r3, #0
 800ec28:	4288      	cmp	r0, r1
 800ec2a:	d305      	bcc.n	800ec38 <__copybits+0x40>
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
 800ec2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ec32:	f845 6f04 	str.w	r6, [r5, #4]!
 800ec36:	e7eb      	b.n	800ec10 <__copybits+0x18>
 800ec38:	f840 3b04 	str.w	r3, [r0], #4
 800ec3c:	e7f4      	b.n	800ec28 <__copybits+0x30>

0800ec3e <__any_on>:
 800ec3e:	f100 0214 	add.w	r2, r0, #20
 800ec42:	6900      	ldr	r0, [r0, #16]
 800ec44:	114b      	asrs	r3, r1, #5
 800ec46:	4298      	cmp	r0, r3
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	db11      	blt.n	800ec70 <__any_on+0x32>
 800ec4c:	dd0a      	ble.n	800ec64 <__any_on+0x26>
 800ec4e:	f011 011f 	ands.w	r1, r1, #31
 800ec52:	d007      	beq.n	800ec64 <__any_on+0x26>
 800ec54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec58:	fa24 f001 	lsr.w	r0, r4, r1
 800ec5c:	fa00 f101 	lsl.w	r1, r0, r1
 800ec60:	428c      	cmp	r4, r1
 800ec62:	d10b      	bne.n	800ec7c <__any_on+0x3e>
 800ec64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d803      	bhi.n	800ec74 <__any_on+0x36>
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	bd10      	pop	{r4, pc}
 800ec70:	4603      	mov	r3, r0
 800ec72:	e7f7      	b.n	800ec64 <__any_on+0x26>
 800ec74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec78:	2900      	cmp	r1, #0
 800ec7a:	d0f5      	beq.n	800ec68 <__any_on+0x2a>
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	e7f6      	b.n	800ec6e <__any_on+0x30>

0800ec80 <sulp>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	4604      	mov	r4, r0
 800ec84:	460d      	mov	r5, r1
 800ec86:	ec45 4b10 	vmov	d0, r4, r5
 800ec8a:	4616      	mov	r6, r2
 800ec8c:	f7ff feba 	bl	800ea04 <__ulp>
 800ec90:	ec51 0b10 	vmov	r0, r1, d0
 800ec94:	b17e      	cbz	r6, 800ecb6 <sulp+0x36>
 800ec96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	dd09      	ble.n	800ecb6 <sulp+0x36>
 800eca2:	051b      	lsls	r3, r3, #20
 800eca4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eca8:	2400      	movs	r4, #0
 800ecaa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ecae:	4622      	mov	r2, r4
 800ecb0:	462b      	mov	r3, r5
 800ecb2:	f7f1 fcc1 	bl	8000638 <__aeabi_dmul>
 800ecb6:	ec41 0b10 	vmov	d0, r0, r1
 800ecba:	bd70      	pop	{r4, r5, r6, pc}
 800ecbc:	0000      	movs	r0, r0
	...

0800ecc0 <_strtod_l>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	b09f      	sub	sp, #124	@ 0x7c
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ecca:	2200      	movs	r2, #0
 800eccc:	921a      	str	r2, [sp, #104]	@ 0x68
 800ecce:	9005      	str	r0, [sp, #20]
 800ecd0:	f04f 0a00 	mov.w	sl, #0
 800ecd4:	f04f 0b00 	mov.w	fp, #0
 800ecd8:	460a      	mov	r2, r1
 800ecda:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecdc:	7811      	ldrb	r1, [r2, #0]
 800ecde:	292b      	cmp	r1, #43	@ 0x2b
 800ece0:	d04a      	beq.n	800ed78 <_strtod_l+0xb8>
 800ece2:	d838      	bhi.n	800ed56 <_strtod_l+0x96>
 800ece4:	290d      	cmp	r1, #13
 800ece6:	d832      	bhi.n	800ed4e <_strtod_l+0x8e>
 800ece8:	2908      	cmp	r1, #8
 800ecea:	d832      	bhi.n	800ed52 <_strtod_l+0x92>
 800ecec:	2900      	cmp	r1, #0
 800ecee:	d03b      	beq.n	800ed68 <_strtod_l+0xa8>
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ecf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ecf6:	782a      	ldrb	r2, [r5, #0]
 800ecf8:	2a30      	cmp	r2, #48	@ 0x30
 800ecfa:	f040 80b2 	bne.w	800ee62 <_strtod_l+0x1a2>
 800ecfe:	786a      	ldrb	r2, [r5, #1]
 800ed00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ed04:	2a58      	cmp	r2, #88	@ 0x58
 800ed06:	d16e      	bne.n	800ede6 <_strtod_l+0x126>
 800ed08:	9302      	str	r3, [sp, #8]
 800ed0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	4a8f      	ldr	r2, [pc, #572]	@ (800ef50 <_strtod_l+0x290>)
 800ed14:	9805      	ldr	r0, [sp, #20]
 800ed16:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ed18:	a919      	add	r1, sp, #100	@ 0x64
 800ed1a:	f001 f903 	bl	800ff24 <__gethex>
 800ed1e:	f010 060f 	ands.w	r6, r0, #15
 800ed22:	4604      	mov	r4, r0
 800ed24:	d005      	beq.n	800ed32 <_strtod_l+0x72>
 800ed26:	2e06      	cmp	r6, #6
 800ed28:	d128      	bne.n	800ed7c <_strtod_l+0xbc>
 800ed2a:	3501      	adds	r5, #1
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ed30:	930e      	str	r3, [sp, #56]	@ 0x38
 800ed32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f040 858e 	bne.w	800f856 <_strtod_l+0xb96>
 800ed3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed3c:	b1cb      	cbz	r3, 800ed72 <_strtod_l+0xb2>
 800ed3e:	4652      	mov	r2, sl
 800ed40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ed44:	ec43 2b10 	vmov	d0, r2, r3
 800ed48:	b01f      	add	sp, #124	@ 0x7c
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	2920      	cmp	r1, #32
 800ed50:	d1ce      	bne.n	800ecf0 <_strtod_l+0x30>
 800ed52:	3201      	adds	r2, #1
 800ed54:	e7c1      	b.n	800ecda <_strtod_l+0x1a>
 800ed56:	292d      	cmp	r1, #45	@ 0x2d
 800ed58:	d1ca      	bne.n	800ecf0 <_strtod_l+0x30>
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ed5e:	1c51      	adds	r1, r2, #1
 800ed60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed62:	7852      	ldrb	r2, [r2, #1]
 800ed64:	2a00      	cmp	r2, #0
 800ed66:	d1c5      	bne.n	800ecf4 <_strtod_l+0x34>
 800ed68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed6a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f040 8570 	bne.w	800f852 <_strtod_l+0xb92>
 800ed72:	4652      	mov	r2, sl
 800ed74:	465b      	mov	r3, fp
 800ed76:	e7e5      	b.n	800ed44 <_strtod_l+0x84>
 800ed78:	2100      	movs	r1, #0
 800ed7a:	e7ef      	b.n	800ed5c <_strtod_l+0x9c>
 800ed7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed7e:	b13a      	cbz	r2, 800ed90 <_strtod_l+0xd0>
 800ed80:	2135      	movs	r1, #53	@ 0x35
 800ed82:	a81c      	add	r0, sp, #112	@ 0x70
 800ed84:	f7ff ff38 	bl	800ebf8 <__copybits>
 800ed88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed8a:	9805      	ldr	r0, [sp, #20]
 800ed8c:	f7ff fb0e 	bl	800e3ac <_Bfree>
 800ed90:	3e01      	subs	r6, #1
 800ed92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ed94:	2e04      	cmp	r6, #4
 800ed96:	d806      	bhi.n	800eda6 <_strtod_l+0xe6>
 800ed98:	e8df f006 	tbb	[pc, r6]
 800ed9c:	201d0314 	.word	0x201d0314
 800eda0:	14          	.byte	0x14
 800eda1:	00          	.byte	0x00
 800eda2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eda6:	05e1      	lsls	r1, r4, #23
 800eda8:	bf48      	it	mi
 800edaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800edae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edb2:	0d1b      	lsrs	r3, r3, #20
 800edb4:	051b      	lsls	r3, r3, #20
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1bb      	bne.n	800ed32 <_strtod_l+0x72>
 800edba:	f7fe fbd9 	bl	800d570 <__errno>
 800edbe:	2322      	movs	r3, #34	@ 0x22
 800edc0:	6003      	str	r3, [r0, #0]
 800edc2:	e7b6      	b.n	800ed32 <_strtod_l+0x72>
 800edc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800edc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800edcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800edd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800edd4:	e7e7      	b.n	800eda6 <_strtod_l+0xe6>
 800edd6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ef58 <_strtod_l+0x298>
 800edda:	e7e4      	b.n	800eda6 <_strtod_l+0xe6>
 800eddc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ede0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ede4:	e7df      	b.n	800eda6 <_strtod_l+0xe6>
 800ede6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	9219      	str	r2, [sp, #100]	@ 0x64
 800edec:	785b      	ldrb	r3, [r3, #1]
 800edee:	2b30      	cmp	r3, #48	@ 0x30
 800edf0:	d0f9      	beq.n	800ede6 <_strtod_l+0x126>
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d09d      	beq.n	800ed32 <_strtod_l+0x72>
 800edf6:	2301      	movs	r3, #1
 800edf8:	2700      	movs	r7, #0
 800edfa:	9308      	str	r3, [sp, #32]
 800edfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edfe:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee00:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ee02:	46b9      	mov	r9, r7
 800ee04:	220a      	movs	r2, #10
 800ee06:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ee08:	7805      	ldrb	r5, [r0, #0]
 800ee0a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ee0e:	b2d9      	uxtb	r1, r3
 800ee10:	2909      	cmp	r1, #9
 800ee12:	d928      	bls.n	800ee66 <_strtod_l+0x1a6>
 800ee14:	494f      	ldr	r1, [pc, #316]	@ (800ef54 <_strtod_l+0x294>)
 800ee16:	2201      	movs	r2, #1
 800ee18:	f000 ffd6 	bl	800fdc8 <strncmp>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d032      	beq.n	800ee86 <_strtod_l+0x1c6>
 800ee20:	2000      	movs	r0, #0
 800ee22:	462a      	mov	r2, r5
 800ee24:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee26:	464d      	mov	r5, r9
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2a65      	cmp	r2, #101	@ 0x65
 800ee2c:	d001      	beq.n	800ee32 <_strtod_l+0x172>
 800ee2e:	2a45      	cmp	r2, #69	@ 0x45
 800ee30:	d114      	bne.n	800ee5c <_strtod_l+0x19c>
 800ee32:	b91d      	cbnz	r5, 800ee3c <_strtod_l+0x17c>
 800ee34:	9a08      	ldr	r2, [sp, #32]
 800ee36:	4302      	orrs	r2, r0
 800ee38:	d096      	beq.n	800ed68 <_strtod_l+0xa8>
 800ee3a:	2500      	movs	r5, #0
 800ee3c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ee3e:	1c62      	adds	r2, r4, #1
 800ee40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee42:	7862      	ldrb	r2, [r4, #1]
 800ee44:	2a2b      	cmp	r2, #43	@ 0x2b
 800ee46:	d07a      	beq.n	800ef3e <_strtod_l+0x27e>
 800ee48:	2a2d      	cmp	r2, #45	@ 0x2d
 800ee4a:	d07e      	beq.n	800ef4a <_strtod_l+0x28a>
 800ee4c:	f04f 0c00 	mov.w	ip, #0
 800ee50:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ee54:	2909      	cmp	r1, #9
 800ee56:	f240 8085 	bls.w	800ef64 <_strtod_l+0x2a4>
 800ee5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ee5c:	f04f 0800 	mov.w	r8, #0
 800ee60:	e0a5      	b.n	800efae <_strtod_l+0x2ee>
 800ee62:	2300      	movs	r3, #0
 800ee64:	e7c8      	b.n	800edf8 <_strtod_l+0x138>
 800ee66:	f1b9 0f08 	cmp.w	r9, #8
 800ee6a:	bfd8      	it	le
 800ee6c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ee6e:	f100 0001 	add.w	r0, r0, #1
 800ee72:	bfda      	itte	le
 800ee74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ee7a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ee7e:	f109 0901 	add.w	r9, r9, #1
 800ee82:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee84:	e7bf      	b.n	800ee06 <_strtod_l+0x146>
 800ee86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee88:	1c5a      	adds	r2, r3, #1
 800ee8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee8c:	785a      	ldrb	r2, [r3, #1]
 800ee8e:	f1b9 0f00 	cmp.w	r9, #0
 800ee92:	d03b      	beq.n	800ef0c <_strtod_l+0x24c>
 800ee94:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee96:	464d      	mov	r5, r9
 800ee98:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ee9c:	2b09      	cmp	r3, #9
 800ee9e:	d912      	bls.n	800eec6 <_strtod_l+0x206>
 800eea0:	2301      	movs	r3, #1
 800eea2:	e7c2      	b.n	800ee2a <_strtod_l+0x16a>
 800eea4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	9219      	str	r2, [sp, #100]	@ 0x64
 800eeaa:	785a      	ldrb	r2, [r3, #1]
 800eeac:	3001      	adds	r0, #1
 800eeae:	2a30      	cmp	r2, #48	@ 0x30
 800eeb0:	d0f8      	beq.n	800eea4 <_strtod_l+0x1e4>
 800eeb2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eeb6:	2b08      	cmp	r3, #8
 800eeb8:	f200 84d2 	bhi.w	800f860 <_strtod_l+0xba0>
 800eebc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eebe:	900a      	str	r0, [sp, #40]	@ 0x28
 800eec0:	2000      	movs	r0, #0
 800eec2:	930c      	str	r3, [sp, #48]	@ 0x30
 800eec4:	4605      	mov	r5, r0
 800eec6:	3a30      	subs	r2, #48	@ 0x30
 800eec8:	f100 0301 	add.w	r3, r0, #1
 800eecc:	d018      	beq.n	800ef00 <_strtod_l+0x240>
 800eece:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eed0:	4419      	add	r1, r3
 800eed2:	910a      	str	r1, [sp, #40]	@ 0x28
 800eed4:	462e      	mov	r6, r5
 800eed6:	f04f 0e0a 	mov.w	lr, #10
 800eeda:	1c71      	adds	r1, r6, #1
 800eedc:	eba1 0c05 	sub.w	ip, r1, r5
 800eee0:	4563      	cmp	r3, ip
 800eee2:	dc15      	bgt.n	800ef10 <_strtod_l+0x250>
 800eee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eee8:	182b      	adds	r3, r5, r0
 800eeea:	2b08      	cmp	r3, #8
 800eeec:	f105 0501 	add.w	r5, r5, #1
 800eef0:	4405      	add	r5, r0
 800eef2:	dc1a      	bgt.n	800ef2a <_strtod_l+0x26a>
 800eef4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eef6:	230a      	movs	r3, #10
 800eef8:	fb03 2301 	mla	r3, r3, r1, r2
 800eefc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eefe:	2300      	movs	r3, #0
 800ef00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef02:	1c51      	adds	r1, r2, #1
 800ef04:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef06:	7852      	ldrb	r2, [r2, #1]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	e7c5      	b.n	800ee98 <_strtod_l+0x1d8>
 800ef0c:	4648      	mov	r0, r9
 800ef0e:	e7ce      	b.n	800eeae <_strtod_l+0x1ee>
 800ef10:	2e08      	cmp	r6, #8
 800ef12:	dc05      	bgt.n	800ef20 <_strtod_l+0x260>
 800ef14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ef16:	fb0e f606 	mul.w	r6, lr, r6
 800ef1a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ef1c:	460e      	mov	r6, r1
 800ef1e:	e7dc      	b.n	800eeda <_strtod_l+0x21a>
 800ef20:	2910      	cmp	r1, #16
 800ef22:	bfd8      	it	le
 800ef24:	fb0e f707 	mulle.w	r7, lr, r7
 800ef28:	e7f8      	b.n	800ef1c <_strtod_l+0x25c>
 800ef2a:	2b0f      	cmp	r3, #15
 800ef2c:	bfdc      	itt	le
 800ef2e:	230a      	movle	r3, #10
 800ef30:	fb03 2707 	mlale	r7, r3, r7, r2
 800ef34:	e7e3      	b.n	800eefe <_strtod_l+0x23e>
 800ef36:	2300      	movs	r3, #0
 800ef38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e77a      	b.n	800ee34 <_strtod_l+0x174>
 800ef3e:	f04f 0c00 	mov.w	ip, #0
 800ef42:	1ca2      	adds	r2, r4, #2
 800ef44:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef46:	78a2      	ldrb	r2, [r4, #2]
 800ef48:	e782      	b.n	800ee50 <_strtod_l+0x190>
 800ef4a:	f04f 0c01 	mov.w	ip, #1
 800ef4e:	e7f8      	b.n	800ef42 <_strtod_l+0x282>
 800ef50:	08011e1c 	.word	0x08011e1c
 800ef54:	08011c53 	.word	0x08011c53
 800ef58:	7ff00000 	.word	0x7ff00000
 800ef5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef5e:	1c51      	adds	r1, r2, #1
 800ef60:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef62:	7852      	ldrb	r2, [r2, #1]
 800ef64:	2a30      	cmp	r2, #48	@ 0x30
 800ef66:	d0f9      	beq.n	800ef5c <_strtod_l+0x29c>
 800ef68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ef6c:	2908      	cmp	r1, #8
 800ef6e:	f63f af75 	bhi.w	800ee5c <_strtod_l+0x19c>
 800ef72:	3a30      	subs	r2, #48	@ 0x30
 800ef74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef78:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ef7a:	f04f 080a 	mov.w	r8, #10
 800ef7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef80:	1c56      	adds	r6, r2, #1
 800ef82:	9619      	str	r6, [sp, #100]	@ 0x64
 800ef84:	7852      	ldrb	r2, [r2, #1]
 800ef86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ef8a:	f1be 0f09 	cmp.w	lr, #9
 800ef8e:	d939      	bls.n	800f004 <_strtod_l+0x344>
 800ef90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef92:	1a76      	subs	r6, r6, r1
 800ef94:	2e08      	cmp	r6, #8
 800ef96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ef9a:	dc03      	bgt.n	800efa4 <_strtod_l+0x2e4>
 800ef9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef9e:	4588      	cmp	r8, r1
 800efa0:	bfa8      	it	ge
 800efa2:	4688      	movge	r8, r1
 800efa4:	f1bc 0f00 	cmp.w	ip, #0
 800efa8:	d001      	beq.n	800efae <_strtod_l+0x2ee>
 800efaa:	f1c8 0800 	rsb	r8, r8, #0
 800efae:	2d00      	cmp	r5, #0
 800efb0:	d14e      	bne.n	800f050 <_strtod_l+0x390>
 800efb2:	9908      	ldr	r1, [sp, #32]
 800efb4:	4308      	orrs	r0, r1
 800efb6:	f47f aebc 	bne.w	800ed32 <_strtod_l+0x72>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f47f aed4 	bne.w	800ed68 <_strtod_l+0xa8>
 800efc0:	2a69      	cmp	r2, #105	@ 0x69
 800efc2:	d028      	beq.n	800f016 <_strtod_l+0x356>
 800efc4:	dc25      	bgt.n	800f012 <_strtod_l+0x352>
 800efc6:	2a49      	cmp	r2, #73	@ 0x49
 800efc8:	d025      	beq.n	800f016 <_strtod_l+0x356>
 800efca:	2a4e      	cmp	r2, #78	@ 0x4e
 800efcc:	f47f aecc 	bne.w	800ed68 <_strtod_l+0xa8>
 800efd0:	499a      	ldr	r1, [pc, #616]	@ (800f23c <_strtod_l+0x57c>)
 800efd2:	a819      	add	r0, sp, #100	@ 0x64
 800efd4:	f001 f9c8 	bl	8010368 <__match>
 800efd8:	2800      	cmp	r0, #0
 800efda:	f43f aec5 	beq.w	800ed68 <_strtod_l+0xa8>
 800efde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b28      	cmp	r3, #40	@ 0x28
 800efe4:	d12e      	bne.n	800f044 <_strtod_l+0x384>
 800efe6:	4996      	ldr	r1, [pc, #600]	@ (800f240 <_strtod_l+0x580>)
 800efe8:	aa1c      	add	r2, sp, #112	@ 0x70
 800efea:	a819      	add	r0, sp, #100	@ 0x64
 800efec:	f001 f9d0 	bl	8010390 <__hexnan>
 800eff0:	2805      	cmp	r0, #5
 800eff2:	d127      	bne.n	800f044 <_strtod_l+0x384>
 800eff4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eff6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800effa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800effe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f002:	e696      	b.n	800ed32 <_strtod_l+0x72>
 800f004:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f006:	fb08 2101 	mla	r1, r8, r1, r2
 800f00a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f00e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f010:	e7b5      	b.n	800ef7e <_strtod_l+0x2be>
 800f012:	2a6e      	cmp	r2, #110	@ 0x6e
 800f014:	e7da      	b.n	800efcc <_strtod_l+0x30c>
 800f016:	498b      	ldr	r1, [pc, #556]	@ (800f244 <_strtod_l+0x584>)
 800f018:	a819      	add	r0, sp, #100	@ 0x64
 800f01a:	f001 f9a5 	bl	8010368 <__match>
 800f01e:	2800      	cmp	r0, #0
 800f020:	f43f aea2 	beq.w	800ed68 <_strtod_l+0xa8>
 800f024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f026:	4988      	ldr	r1, [pc, #544]	@ (800f248 <_strtod_l+0x588>)
 800f028:	3b01      	subs	r3, #1
 800f02a:	a819      	add	r0, sp, #100	@ 0x64
 800f02c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f02e:	f001 f99b 	bl	8010368 <__match>
 800f032:	b910      	cbnz	r0, 800f03a <_strtod_l+0x37a>
 800f034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f036:	3301      	adds	r3, #1
 800f038:	9319      	str	r3, [sp, #100]	@ 0x64
 800f03a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f258 <_strtod_l+0x598>
 800f03e:	f04f 0a00 	mov.w	sl, #0
 800f042:	e676      	b.n	800ed32 <_strtod_l+0x72>
 800f044:	4881      	ldr	r0, [pc, #516]	@ (800f24c <_strtod_l+0x58c>)
 800f046:	f000 fedf 	bl	800fe08 <nan>
 800f04a:	ec5b ab10 	vmov	sl, fp, d0
 800f04e:	e670      	b.n	800ed32 <_strtod_l+0x72>
 800f050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f052:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f054:	eba8 0303 	sub.w	r3, r8, r3
 800f058:	f1b9 0f00 	cmp.w	r9, #0
 800f05c:	bf08      	it	eq
 800f05e:	46a9      	moveq	r9, r5
 800f060:	2d10      	cmp	r5, #16
 800f062:	9309      	str	r3, [sp, #36]	@ 0x24
 800f064:	462c      	mov	r4, r5
 800f066:	bfa8      	it	ge
 800f068:	2410      	movge	r4, #16
 800f06a:	f7f1 fa6b 	bl	8000544 <__aeabi_ui2d>
 800f06e:	2d09      	cmp	r5, #9
 800f070:	4682      	mov	sl, r0
 800f072:	468b      	mov	fp, r1
 800f074:	dc13      	bgt.n	800f09e <_strtod_l+0x3de>
 800f076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f43f ae5a 	beq.w	800ed32 <_strtod_l+0x72>
 800f07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f080:	dd78      	ble.n	800f174 <_strtod_l+0x4b4>
 800f082:	2b16      	cmp	r3, #22
 800f084:	dc5f      	bgt.n	800f146 <_strtod_l+0x486>
 800f086:	4972      	ldr	r1, [pc, #456]	@ (800f250 <_strtod_l+0x590>)
 800f088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f090:	4652      	mov	r2, sl
 800f092:	465b      	mov	r3, fp
 800f094:	f7f1 fad0 	bl	8000638 <__aeabi_dmul>
 800f098:	4682      	mov	sl, r0
 800f09a:	468b      	mov	fp, r1
 800f09c:	e649      	b.n	800ed32 <_strtod_l+0x72>
 800f09e:	4b6c      	ldr	r3, [pc, #432]	@ (800f250 <_strtod_l+0x590>)
 800f0a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f0a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f0a8:	f7f1 fac6 	bl	8000638 <__aeabi_dmul>
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	468b      	mov	fp, r1
 800f0b2:	f7f1 fa47 	bl	8000544 <__aeabi_ui2d>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4650      	mov	r0, sl
 800f0bc:	4659      	mov	r1, fp
 800f0be:	f7f1 f905 	bl	80002cc <__adddf3>
 800f0c2:	2d0f      	cmp	r5, #15
 800f0c4:	4682      	mov	sl, r0
 800f0c6:	468b      	mov	fp, r1
 800f0c8:	ddd5      	ble.n	800f076 <_strtod_l+0x3b6>
 800f0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0cc:	1b2c      	subs	r4, r5, r4
 800f0ce:	441c      	add	r4, r3
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	f340 8093 	ble.w	800f1fc <_strtod_l+0x53c>
 800f0d6:	f014 030f 	ands.w	r3, r4, #15
 800f0da:	d00a      	beq.n	800f0f2 <_strtod_l+0x432>
 800f0dc:	495c      	ldr	r1, [pc, #368]	@ (800f250 <_strtod_l+0x590>)
 800f0de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0e2:	4652      	mov	r2, sl
 800f0e4:	465b      	mov	r3, fp
 800f0e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0ea:	f7f1 faa5 	bl	8000638 <__aeabi_dmul>
 800f0ee:	4682      	mov	sl, r0
 800f0f0:	468b      	mov	fp, r1
 800f0f2:	f034 040f 	bics.w	r4, r4, #15
 800f0f6:	d073      	beq.n	800f1e0 <_strtod_l+0x520>
 800f0f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f0fc:	dd49      	ble.n	800f192 <_strtod_l+0x4d2>
 800f0fe:	2400      	movs	r4, #0
 800f100:	46a0      	mov	r8, r4
 800f102:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f104:	46a1      	mov	r9, r4
 800f106:	9a05      	ldr	r2, [sp, #20]
 800f108:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f258 <_strtod_l+0x598>
 800f10c:	2322      	movs	r3, #34	@ 0x22
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	f04f 0a00 	mov.w	sl, #0
 800f114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f116:	2b00      	cmp	r3, #0
 800f118:	f43f ae0b 	beq.w	800ed32 <_strtod_l+0x72>
 800f11c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f11e:	9805      	ldr	r0, [sp, #20]
 800f120:	f7ff f944 	bl	800e3ac <_Bfree>
 800f124:	9805      	ldr	r0, [sp, #20]
 800f126:	4649      	mov	r1, r9
 800f128:	f7ff f940 	bl	800e3ac <_Bfree>
 800f12c:	9805      	ldr	r0, [sp, #20]
 800f12e:	4641      	mov	r1, r8
 800f130:	f7ff f93c 	bl	800e3ac <_Bfree>
 800f134:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f136:	9805      	ldr	r0, [sp, #20]
 800f138:	f7ff f938 	bl	800e3ac <_Bfree>
 800f13c:	9805      	ldr	r0, [sp, #20]
 800f13e:	4621      	mov	r1, r4
 800f140:	f7ff f934 	bl	800e3ac <_Bfree>
 800f144:	e5f5      	b.n	800ed32 <_strtod_l+0x72>
 800f146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f148:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f14c:	4293      	cmp	r3, r2
 800f14e:	dbbc      	blt.n	800f0ca <_strtod_l+0x40a>
 800f150:	4c3f      	ldr	r4, [pc, #252]	@ (800f250 <_strtod_l+0x590>)
 800f152:	f1c5 050f 	rsb	r5, r5, #15
 800f156:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f15a:	4652      	mov	r2, sl
 800f15c:	465b      	mov	r3, fp
 800f15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f162:	f7f1 fa69 	bl	8000638 <__aeabi_dmul>
 800f166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f168:	1b5d      	subs	r5, r3, r5
 800f16a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f16e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f172:	e78f      	b.n	800f094 <_strtod_l+0x3d4>
 800f174:	3316      	adds	r3, #22
 800f176:	dba8      	blt.n	800f0ca <_strtod_l+0x40a>
 800f178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f17a:	eba3 0808 	sub.w	r8, r3, r8
 800f17e:	4b34      	ldr	r3, [pc, #208]	@ (800f250 <_strtod_l+0x590>)
 800f180:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f184:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f188:	4650      	mov	r0, sl
 800f18a:	4659      	mov	r1, fp
 800f18c:	f7f1 fb7e 	bl	800088c <__aeabi_ddiv>
 800f190:	e782      	b.n	800f098 <_strtod_l+0x3d8>
 800f192:	2300      	movs	r3, #0
 800f194:	4f2f      	ldr	r7, [pc, #188]	@ (800f254 <_strtod_l+0x594>)
 800f196:	1124      	asrs	r4, r4, #4
 800f198:	4650      	mov	r0, sl
 800f19a:	4659      	mov	r1, fp
 800f19c:	461e      	mov	r6, r3
 800f19e:	2c01      	cmp	r4, #1
 800f1a0:	dc21      	bgt.n	800f1e6 <_strtod_l+0x526>
 800f1a2:	b10b      	cbz	r3, 800f1a8 <_strtod_l+0x4e8>
 800f1a4:	4682      	mov	sl, r0
 800f1a6:	468b      	mov	fp, r1
 800f1a8:	492a      	ldr	r1, [pc, #168]	@ (800f254 <_strtod_l+0x594>)
 800f1aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f1ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f1b2:	4652      	mov	r2, sl
 800f1b4:	465b      	mov	r3, fp
 800f1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ba:	f7f1 fa3d 	bl	8000638 <__aeabi_dmul>
 800f1be:	4b26      	ldr	r3, [pc, #152]	@ (800f258 <_strtod_l+0x598>)
 800f1c0:	460a      	mov	r2, r1
 800f1c2:	400b      	ands	r3, r1
 800f1c4:	4925      	ldr	r1, [pc, #148]	@ (800f25c <_strtod_l+0x59c>)
 800f1c6:	428b      	cmp	r3, r1
 800f1c8:	4682      	mov	sl, r0
 800f1ca:	d898      	bhi.n	800f0fe <_strtod_l+0x43e>
 800f1cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	bf86      	itte	hi
 800f1d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f260 <_strtod_l+0x5a0>
 800f1d8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f1dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	9308      	str	r3, [sp, #32]
 800f1e4:	e076      	b.n	800f2d4 <_strtod_l+0x614>
 800f1e6:	07e2      	lsls	r2, r4, #31
 800f1e8:	d504      	bpl.n	800f1f4 <_strtod_l+0x534>
 800f1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ee:	f7f1 fa23 	bl	8000638 <__aeabi_dmul>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	3601      	adds	r6, #1
 800f1f6:	1064      	asrs	r4, r4, #1
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	e7d0      	b.n	800f19e <_strtod_l+0x4de>
 800f1fc:	d0f0      	beq.n	800f1e0 <_strtod_l+0x520>
 800f1fe:	4264      	negs	r4, r4
 800f200:	f014 020f 	ands.w	r2, r4, #15
 800f204:	d00a      	beq.n	800f21c <_strtod_l+0x55c>
 800f206:	4b12      	ldr	r3, [pc, #72]	@ (800f250 <_strtod_l+0x590>)
 800f208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f20c:	4650      	mov	r0, sl
 800f20e:	4659      	mov	r1, fp
 800f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f214:	f7f1 fb3a 	bl	800088c <__aeabi_ddiv>
 800f218:	4682      	mov	sl, r0
 800f21a:	468b      	mov	fp, r1
 800f21c:	1124      	asrs	r4, r4, #4
 800f21e:	d0df      	beq.n	800f1e0 <_strtod_l+0x520>
 800f220:	2c1f      	cmp	r4, #31
 800f222:	dd1f      	ble.n	800f264 <_strtod_l+0x5a4>
 800f224:	2400      	movs	r4, #0
 800f226:	46a0      	mov	r8, r4
 800f228:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f22a:	46a1      	mov	r9, r4
 800f22c:	9a05      	ldr	r2, [sp, #20]
 800f22e:	2322      	movs	r3, #34	@ 0x22
 800f230:	f04f 0a00 	mov.w	sl, #0
 800f234:	f04f 0b00 	mov.w	fp, #0
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	e76b      	b.n	800f114 <_strtod_l+0x454>
 800f23c:	08011b41 	.word	0x08011b41
 800f240:	08011e08 	.word	0x08011e08
 800f244:	08011b39 	.word	0x08011b39
 800f248:	08011b70 	.word	0x08011b70
 800f24c:	08011ca9 	.word	0x08011ca9
 800f250:	08011d40 	.word	0x08011d40
 800f254:	08011d18 	.word	0x08011d18
 800f258:	7ff00000 	.word	0x7ff00000
 800f25c:	7ca00000 	.word	0x7ca00000
 800f260:	7fefffff 	.word	0x7fefffff
 800f264:	f014 0310 	ands.w	r3, r4, #16
 800f268:	bf18      	it	ne
 800f26a:	236a      	movne	r3, #106	@ 0x6a
 800f26c:	4ea9      	ldr	r6, [pc, #676]	@ (800f514 <_strtod_l+0x854>)
 800f26e:	9308      	str	r3, [sp, #32]
 800f270:	4650      	mov	r0, sl
 800f272:	4659      	mov	r1, fp
 800f274:	2300      	movs	r3, #0
 800f276:	07e7      	lsls	r7, r4, #31
 800f278:	d504      	bpl.n	800f284 <_strtod_l+0x5c4>
 800f27a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f27e:	f7f1 f9db 	bl	8000638 <__aeabi_dmul>
 800f282:	2301      	movs	r3, #1
 800f284:	1064      	asrs	r4, r4, #1
 800f286:	f106 0608 	add.w	r6, r6, #8
 800f28a:	d1f4      	bne.n	800f276 <_strtod_l+0x5b6>
 800f28c:	b10b      	cbz	r3, 800f292 <_strtod_l+0x5d2>
 800f28e:	4682      	mov	sl, r0
 800f290:	468b      	mov	fp, r1
 800f292:	9b08      	ldr	r3, [sp, #32]
 800f294:	b1b3      	cbz	r3, 800f2c4 <_strtod_l+0x604>
 800f296:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f29a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	4659      	mov	r1, fp
 800f2a2:	dd0f      	ble.n	800f2c4 <_strtod_l+0x604>
 800f2a4:	2b1f      	cmp	r3, #31
 800f2a6:	dd56      	ble.n	800f356 <_strtod_l+0x696>
 800f2a8:	2b34      	cmp	r3, #52	@ 0x34
 800f2aa:	bfde      	ittt	le
 800f2ac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f2b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f2b4:	4093      	lslle	r3, r2
 800f2b6:	f04f 0a00 	mov.w	sl, #0
 800f2ba:	bfcc      	ite	gt
 800f2bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f2c0:	ea03 0b01 	andle.w	fp, r3, r1
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	4659      	mov	r1, fp
 800f2cc:	f7f1 fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d1a7      	bne.n	800f224 <_strtod_l+0x564>
 800f2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f2da:	9805      	ldr	r0, [sp, #20]
 800f2dc:	462b      	mov	r3, r5
 800f2de:	464a      	mov	r2, r9
 800f2e0:	f7ff f8cc 	bl	800e47c <__s2b>
 800f2e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	f43f af09 	beq.w	800f0fe <_strtod_l+0x43e>
 800f2ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2f0:	2a00      	cmp	r2, #0
 800f2f2:	eba3 0308 	sub.w	r3, r3, r8
 800f2f6:	bfa8      	it	ge
 800f2f8:	2300      	movge	r3, #0
 800f2fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800f2fc:	2400      	movs	r4, #0
 800f2fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f302:	9316      	str	r3, [sp, #88]	@ 0x58
 800f304:	46a0      	mov	r8, r4
 800f306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f308:	9805      	ldr	r0, [sp, #20]
 800f30a:	6859      	ldr	r1, [r3, #4]
 800f30c:	f7ff f80e 	bl	800e32c <_Balloc>
 800f310:	4681      	mov	r9, r0
 800f312:	2800      	cmp	r0, #0
 800f314:	f43f aef7 	beq.w	800f106 <_strtod_l+0x446>
 800f318:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f31a:	691a      	ldr	r2, [r3, #16]
 800f31c:	3202      	adds	r2, #2
 800f31e:	f103 010c 	add.w	r1, r3, #12
 800f322:	0092      	lsls	r2, r2, #2
 800f324:	300c      	adds	r0, #12
 800f326:	f000 fd61 	bl	800fdec <memcpy>
 800f32a:	ec4b ab10 	vmov	d0, sl, fp
 800f32e:	9805      	ldr	r0, [sp, #20]
 800f330:	aa1c      	add	r2, sp, #112	@ 0x70
 800f332:	a91b      	add	r1, sp, #108	@ 0x6c
 800f334:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f338:	f7ff fbd4 	bl	800eae4 <__d2b>
 800f33c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f33e:	2800      	cmp	r0, #0
 800f340:	f43f aee1 	beq.w	800f106 <_strtod_l+0x446>
 800f344:	9805      	ldr	r0, [sp, #20]
 800f346:	2101      	movs	r1, #1
 800f348:	f7ff f92e 	bl	800e5a8 <__i2b>
 800f34c:	4680      	mov	r8, r0
 800f34e:	b948      	cbnz	r0, 800f364 <_strtod_l+0x6a4>
 800f350:	f04f 0800 	mov.w	r8, #0
 800f354:	e6d7      	b.n	800f106 <_strtod_l+0x446>
 800f356:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f35a:	fa02 f303 	lsl.w	r3, r2, r3
 800f35e:	ea03 0a0a 	and.w	sl, r3, sl
 800f362:	e7af      	b.n	800f2c4 <_strtod_l+0x604>
 800f364:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f366:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f368:	2d00      	cmp	r5, #0
 800f36a:	bfab      	itete	ge
 800f36c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f36e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f370:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f372:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f374:	bfac      	ite	ge
 800f376:	18ef      	addge	r7, r5, r3
 800f378:	1b5e      	sublt	r6, r3, r5
 800f37a:	9b08      	ldr	r3, [sp, #32]
 800f37c:	1aed      	subs	r5, r5, r3
 800f37e:	4415      	add	r5, r2
 800f380:	4b65      	ldr	r3, [pc, #404]	@ (800f518 <_strtod_l+0x858>)
 800f382:	3d01      	subs	r5, #1
 800f384:	429d      	cmp	r5, r3
 800f386:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f38a:	da50      	bge.n	800f42e <_strtod_l+0x76e>
 800f38c:	1b5b      	subs	r3, r3, r5
 800f38e:	2b1f      	cmp	r3, #31
 800f390:	eba2 0203 	sub.w	r2, r2, r3
 800f394:	f04f 0101 	mov.w	r1, #1
 800f398:	dc3d      	bgt.n	800f416 <_strtod_l+0x756>
 800f39a:	fa01 f303 	lsl.w	r3, r1, r3
 800f39e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3a4:	18bd      	adds	r5, r7, r2
 800f3a6:	9b08      	ldr	r3, [sp, #32]
 800f3a8:	42af      	cmp	r7, r5
 800f3aa:	4416      	add	r6, r2
 800f3ac:	441e      	add	r6, r3
 800f3ae:	463b      	mov	r3, r7
 800f3b0:	bfa8      	it	ge
 800f3b2:	462b      	movge	r3, r5
 800f3b4:	42b3      	cmp	r3, r6
 800f3b6:	bfa8      	it	ge
 800f3b8:	4633      	movge	r3, r6
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	bfc2      	ittt	gt
 800f3be:	1aed      	subgt	r5, r5, r3
 800f3c0:	1af6      	subgt	r6, r6, r3
 800f3c2:	1aff      	subgt	r7, r7, r3
 800f3c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dd16      	ble.n	800f3f8 <_strtod_l+0x738>
 800f3ca:	4641      	mov	r1, r8
 800f3cc:	9805      	ldr	r0, [sp, #20]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f7ff f9a2 	bl	800e718 <__pow5mult>
 800f3d4:	4680      	mov	r8, r0
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d0ba      	beq.n	800f350 <_strtod_l+0x690>
 800f3da:	4601      	mov	r1, r0
 800f3dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f3de:	9805      	ldr	r0, [sp, #20]
 800f3e0:	f7ff f8f8 	bl	800e5d4 <__multiply>
 800f3e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f43f ae8d 	beq.w	800f106 <_strtod_l+0x446>
 800f3ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3ee:	9805      	ldr	r0, [sp, #20]
 800f3f0:	f7fe ffdc 	bl	800e3ac <_Bfree>
 800f3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	dc1d      	bgt.n	800f438 <_strtod_l+0x778>
 800f3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	dd23      	ble.n	800f44a <_strtod_l+0x78a>
 800f402:	4649      	mov	r1, r9
 800f404:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f406:	9805      	ldr	r0, [sp, #20]
 800f408:	f7ff f986 	bl	800e718 <__pow5mult>
 800f40c:	4681      	mov	r9, r0
 800f40e:	b9e0      	cbnz	r0, 800f44a <_strtod_l+0x78a>
 800f410:	f04f 0900 	mov.w	r9, #0
 800f414:	e677      	b.n	800f106 <_strtod_l+0x446>
 800f416:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f41a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f41e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f422:	35e2      	adds	r5, #226	@ 0xe2
 800f424:	fa01 f305 	lsl.w	r3, r1, r5
 800f428:	9310      	str	r3, [sp, #64]	@ 0x40
 800f42a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f42c:	e7ba      	b.n	800f3a4 <_strtod_l+0x6e4>
 800f42e:	2300      	movs	r3, #0
 800f430:	9310      	str	r3, [sp, #64]	@ 0x40
 800f432:	2301      	movs	r3, #1
 800f434:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f436:	e7b5      	b.n	800f3a4 <_strtod_l+0x6e4>
 800f438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f43a:	9805      	ldr	r0, [sp, #20]
 800f43c:	462a      	mov	r2, r5
 800f43e:	f7ff f9c5 	bl	800e7cc <__lshift>
 800f442:	901a      	str	r0, [sp, #104]	@ 0x68
 800f444:	2800      	cmp	r0, #0
 800f446:	d1d9      	bne.n	800f3fc <_strtod_l+0x73c>
 800f448:	e65d      	b.n	800f106 <_strtod_l+0x446>
 800f44a:	2e00      	cmp	r6, #0
 800f44c:	dd07      	ble.n	800f45e <_strtod_l+0x79e>
 800f44e:	4649      	mov	r1, r9
 800f450:	9805      	ldr	r0, [sp, #20]
 800f452:	4632      	mov	r2, r6
 800f454:	f7ff f9ba 	bl	800e7cc <__lshift>
 800f458:	4681      	mov	r9, r0
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d0d8      	beq.n	800f410 <_strtod_l+0x750>
 800f45e:	2f00      	cmp	r7, #0
 800f460:	dd08      	ble.n	800f474 <_strtod_l+0x7b4>
 800f462:	4641      	mov	r1, r8
 800f464:	9805      	ldr	r0, [sp, #20]
 800f466:	463a      	mov	r2, r7
 800f468:	f7ff f9b0 	bl	800e7cc <__lshift>
 800f46c:	4680      	mov	r8, r0
 800f46e:	2800      	cmp	r0, #0
 800f470:	f43f ae49 	beq.w	800f106 <_strtod_l+0x446>
 800f474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f476:	9805      	ldr	r0, [sp, #20]
 800f478:	464a      	mov	r2, r9
 800f47a:	f7ff fa2f 	bl	800e8dc <__mdiff>
 800f47e:	4604      	mov	r4, r0
 800f480:	2800      	cmp	r0, #0
 800f482:	f43f ae40 	beq.w	800f106 <_strtod_l+0x446>
 800f486:	68c3      	ldr	r3, [r0, #12]
 800f488:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f48a:	2300      	movs	r3, #0
 800f48c:	60c3      	str	r3, [r0, #12]
 800f48e:	4641      	mov	r1, r8
 800f490:	f7ff fa08 	bl	800e8a4 <__mcmp>
 800f494:	2800      	cmp	r0, #0
 800f496:	da45      	bge.n	800f524 <_strtod_l+0x864>
 800f498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f49a:	ea53 030a 	orrs.w	r3, r3, sl
 800f49e:	d16b      	bne.n	800f578 <_strtod_l+0x8b8>
 800f4a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d167      	bne.n	800f578 <_strtod_l+0x8b8>
 800f4a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4ac:	0d1b      	lsrs	r3, r3, #20
 800f4ae:	051b      	lsls	r3, r3, #20
 800f4b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f4b4:	d960      	bls.n	800f578 <_strtod_l+0x8b8>
 800f4b6:	6963      	ldr	r3, [r4, #20]
 800f4b8:	b913      	cbnz	r3, 800f4c0 <_strtod_l+0x800>
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	dd5b      	ble.n	800f578 <_strtod_l+0x8b8>
 800f4c0:	4621      	mov	r1, r4
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	9805      	ldr	r0, [sp, #20]
 800f4c6:	f7ff f981 	bl	800e7cc <__lshift>
 800f4ca:	4641      	mov	r1, r8
 800f4cc:	4604      	mov	r4, r0
 800f4ce:	f7ff f9e9 	bl	800e8a4 <__mcmp>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	dd50      	ble.n	800f578 <_strtod_l+0x8b8>
 800f4d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4da:	9a08      	ldr	r2, [sp, #32]
 800f4dc:	0d1b      	lsrs	r3, r3, #20
 800f4de:	051b      	lsls	r3, r3, #20
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d06a      	beq.n	800f5ba <_strtod_l+0x8fa>
 800f4e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f4e8:	d867      	bhi.n	800f5ba <_strtod_l+0x8fa>
 800f4ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f4ee:	f67f ae9d 	bls.w	800f22c <_strtod_l+0x56c>
 800f4f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f51c <_strtod_l+0x85c>)
 800f4f4:	4650      	mov	r0, sl
 800f4f6:	4659      	mov	r1, fp
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f7f1 f89d 	bl	8000638 <__aeabi_dmul>
 800f4fe:	4b08      	ldr	r3, [pc, #32]	@ (800f520 <_strtod_l+0x860>)
 800f500:	400b      	ands	r3, r1
 800f502:	4682      	mov	sl, r0
 800f504:	468b      	mov	fp, r1
 800f506:	2b00      	cmp	r3, #0
 800f508:	f47f ae08 	bne.w	800f11c <_strtod_l+0x45c>
 800f50c:	9a05      	ldr	r2, [sp, #20]
 800f50e:	2322      	movs	r3, #34	@ 0x22
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	e603      	b.n	800f11c <_strtod_l+0x45c>
 800f514:	08011e30 	.word	0x08011e30
 800f518:	fffffc02 	.word	0xfffffc02
 800f51c:	39500000 	.word	0x39500000
 800f520:	7ff00000 	.word	0x7ff00000
 800f524:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f528:	d165      	bne.n	800f5f6 <_strtod_l+0x936>
 800f52a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f52c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f530:	b35a      	cbz	r2, 800f58a <_strtod_l+0x8ca>
 800f532:	4a9f      	ldr	r2, [pc, #636]	@ (800f7b0 <_strtod_l+0xaf0>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d12b      	bne.n	800f590 <_strtod_l+0x8d0>
 800f538:	9b08      	ldr	r3, [sp, #32]
 800f53a:	4651      	mov	r1, sl
 800f53c:	b303      	cbz	r3, 800f580 <_strtod_l+0x8c0>
 800f53e:	4b9d      	ldr	r3, [pc, #628]	@ (800f7b4 <_strtod_l+0xaf4>)
 800f540:	465a      	mov	r2, fp
 800f542:	4013      	ands	r3, r2
 800f544:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f54c:	d81b      	bhi.n	800f586 <_strtod_l+0x8c6>
 800f54e:	0d1b      	lsrs	r3, r3, #20
 800f550:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f554:	fa02 f303 	lsl.w	r3, r2, r3
 800f558:	4299      	cmp	r1, r3
 800f55a:	d119      	bne.n	800f590 <_strtod_l+0x8d0>
 800f55c:	4b96      	ldr	r3, [pc, #600]	@ (800f7b8 <_strtod_l+0xaf8>)
 800f55e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f560:	429a      	cmp	r2, r3
 800f562:	d102      	bne.n	800f56a <_strtod_l+0x8aa>
 800f564:	3101      	adds	r1, #1
 800f566:	f43f adce 	beq.w	800f106 <_strtod_l+0x446>
 800f56a:	4b92      	ldr	r3, [pc, #584]	@ (800f7b4 <_strtod_l+0xaf4>)
 800f56c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f56e:	401a      	ands	r2, r3
 800f570:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f574:	f04f 0a00 	mov.w	sl, #0
 800f578:	9b08      	ldr	r3, [sp, #32]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1b9      	bne.n	800f4f2 <_strtod_l+0x832>
 800f57e:	e5cd      	b.n	800f11c <_strtod_l+0x45c>
 800f580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f584:	e7e8      	b.n	800f558 <_strtod_l+0x898>
 800f586:	4613      	mov	r3, r2
 800f588:	e7e6      	b.n	800f558 <_strtod_l+0x898>
 800f58a:	ea53 030a 	orrs.w	r3, r3, sl
 800f58e:	d0a2      	beq.n	800f4d6 <_strtod_l+0x816>
 800f590:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f592:	b1db      	cbz	r3, 800f5cc <_strtod_l+0x90c>
 800f594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f596:	4213      	tst	r3, r2
 800f598:	d0ee      	beq.n	800f578 <_strtod_l+0x8b8>
 800f59a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f59c:	9a08      	ldr	r2, [sp, #32]
 800f59e:	4650      	mov	r0, sl
 800f5a0:	4659      	mov	r1, fp
 800f5a2:	b1bb      	cbz	r3, 800f5d4 <_strtod_l+0x914>
 800f5a4:	f7ff fb6c 	bl	800ec80 <sulp>
 800f5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5ac:	ec53 2b10 	vmov	r2, r3, d0
 800f5b0:	f7f0 fe8c 	bl	80002cc <__adddf3>
 800f5b4:	4682      	mov	sl, r0
 800f5b6:	468b      	mov	fp, r1
 800f5b8:	e7de      	b.n	800f578 <_strtod_l+0x8b8>
 800f5ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f5be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f5c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f5c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f5ca:	e7d5      	b.n	800f578 <_strtod_l+0x8b8>
 800f5cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5ce:	ea13 0f0a 	tst.w	r3, sl
 800f5d2:	e7e1      	b.n	800f598 <_strtod_l+0x8d8>
 800f5d4:	f7ff fb54 	bl	800ec80 <sulp>
 800f5d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5dc:	ec53 2b10 	vmov	r2, r3, d0
 800f5e0:	f7f0 fe72 	bl	80002c8 <__aeabi_dsub>
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	4682      	mov	sl, r0
 800f5ea:	468b      	mov	fp, r1
 800f5ec:	f7f1 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d0c1      	beq.n	800f578 <_strtod_l+0x8b8>
 800f5f4:	e61a      	b.n	800f22c <_strtod_l+0x56c>
 800f5f6:	4641      	mov	r1, r8
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f7ff facb 	bl	800eb94 <__ratio>
 800f5fe:	ec57 6b10 	vmov	r6, r7, d0
 800f602:	2200      	movs	r2, #0
 800f604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f608:	4630      	mov	r0, r6
 800f60a:	4639      	mov	r1, r7
 800f60c:	f7f1 fa90 	bl	8000b30 <__aeabi_dcmple>
 800f610:	2800      	cmp	r0, #0
 800f612:	d06f      	beq.n	800f6f4 <_strtod_l+0xa34>
 800f614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f616:	2b00      	cmp	r3, #0
 800f618:	d17a      	bne.n	800f710 <_strtod_l+0xa50>
 800f61a:	f1ba 0f00 	cmp.w	sl, #0
 800f61e:	d158      	bne.n	800f6d2 <_strtod_l+0xa12>
 800f620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f626:	2b00      	cmp	r3, #0
 800f628:	d15a      	bne.n	800f6e0 <_strtod_l+0xa20>
 800f62a:	4b64      	ldr	r3, [pc, #400]	@ (800f7bc <_strtod_l+0xafc>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	4630      	mov	r0, r6
 800f630:	4639      	mov	r1, r7
 800f632:	f7f1 fa73 	bl	8000b1c <__aeabi_dcmplt>
 800f636:	2800      	cmp	r0, #0
 800f638:	d159      	bne.n	800f6ee <_strtod_l+0xa2e>
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	4b60      	ldr	r3, [pc, #384]	@ (800f7c0 <_strtod_l+0xb00>)
 800f640:	2200      	movs	r2, #0
 800f642:	f7f0 fff9 	bl	8000638 <__aeabi_dmul>
 800f646:	4606      	mov	r6, r0
 800f648:	460f      	mov	r7, r1
 800f64a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f64e:	9606      	str	r6, [sp, #24]
 800f650:	9307      	str	r3, [sp, #28]
 800f652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f656:	4d57      	ldr	r5, [pc, #348]	@ (800f7b4 <_strtod_l+0xaf4>)
 800f658:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f65e:	401d      	ands	r5, r3
 800f660:	4b58      	ldr	r3, [pc, #352]	@ (800f7c4 <_strtod_l+0xb04>)
 800f662:	429d      	cmp	r5, r3
 800f664:	f040 80b2 	bne.w	800f7cc <_strtod_l+0xb0c>
 800f668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f66a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f66e:	ec4b ab10 	vmov	d0, sl, fp
 800f672:	f7ff f9c7 	bl	800ea04 <__ulp>
 800f676:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f67a:	ec51 0b10 	vmov	r0, r1, d0
 800f67e:	f7f0 ffdb 	bl	8000638 <__aeabi_dmul>
 800f682:	4652      	mov	r2, sl
 800f684:	465b      	mov	r3, fp
 800f686:	f7f0 fe21 	bl	80002cc <__adddf3>
 800f68a:	460b      	mov	r3, r1
 800f68c:	4949      	ldr	r1, [pc, #292]	@ (800f7b4 <_strtod_l+0xaf4>)
 800f68e:	4a4e      	ldr	r2, [pc, #312]	@ (800f7c8 <_strtod_l+0xb08>)
 800f690:	4019      	ands	r1, r3
 800f692:	4291      	cmp	r1, r2
 800f694:	4682      	mov	sl, r0
 800f696:	d942      	bls.n	800f71e <_strtod_l+0xa5e>
 800f698:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f69a:	4b47      	ldr	r3, [pc, #284]	@ (800f7b8 <_strtod_l+0xaf8>)
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d103      	bne.n	800f6a8 <_strtod_l+0x9e8>
 800f6a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	f43f ad2f 	beq.w	800f106 <_strtod_l+0x446>
 800f6a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f7b8 <_strtod_l+0xaf8>
 800f6ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f6b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6b2:	9805      	ldr	r0, [sp, #20]
 800f6b4:	f7fe fe7a 	bl	800e3ac <_Bfree>
 800f6b8:	9805      	ldr	r0, [sp, #20]
 800f6ba:	4649      	mov	r1, r9
 800f6bc:	f7fe fe76 	bl	800e3ac <_Bfree>
 800f6c0:	9805      	ldr	r0, [sp, #20]
 800f6c2:	4641      	mov	r1, r8
 800f6c4:	f7fe fe72 	bl	800e3ac <_Bfree>
 800f6c8:	9805      	ldr	r0, [sp, #20]
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	f7fe fe6e 	bl	800e3ac <_Bfree>
 800f6d0:	e619      	b.n	800f306 <_strtod_l+0x646>
 800f6d2:	f1ba 0f01 	cmp.w	sl, #1
 800f6d6:	d103      	bne.n	800f6e0 <_strtod_l+0xa20>
 800f6d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f43f ada6 	beq.w	800f22c <_strtod_l+0x56c>
 800f6e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f790 <_strtod_l+0xad0>
 800f6e4:	4f35      	ldr	r7, [pc, #212]	@ (800f7bc <_strtod_l+0xafc>)
 800f6e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	e7b1      	b.n	800f652 <_strtod_l+0x992>
 800f6ee:	4f34      	ldr	r7, [pc, #208]	@ (800f7c0 <_strtod_l+0xb00>)
 800f6f0:	2600      	movs	r6, #0
 800f6f2:	e7aa      	b.n	800f64a <_strtod_l+0x98a>
 800f6f4:	4b32      	ldr	r3, [pc, #200]	@ (800f7c0 <_strtod_l+0xb00>)
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	4639      	mov	r1, r7
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f7f0 ff9c 	bl	8000638 <__aeabi_dmul>
 800f700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f702:	4606      	mov	r6, r0
 800f704:	460f      	mov	r7, r1
 800f706:	2b00      	cmp	r3, #0
 800f708:	d09f      	beq.n	800f64a <_strtod_l+0x98a>
 800f70a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f70e:	e7a0      	b.n	800f652 <_strtod_l+0x992>
 800f710:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f798 <_strtod_l+0xad8>
 800f714:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f718:	ec57 6b17 	vmov	r6, r7, d7
 800f71c:	e799      	b.n	800f652 <_strtod_l+0x992>
 800f71e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f722:	9b08      	ldr	r3, [sp, #32]
 800f724:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1c1      	bne.n	800f6b0 <_strtod_l+0x9f0>
 800f72c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f730:	0d1b      	lsrs	r3, r3, #20
 800f732:	051b      	lsls	r3, r3, #20
 800f734:	429d      	cmp	r5, r3
 800f736:	d1bb      	bne.n	800f6b0 <_strtod_l+0x9f0>
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	f7f1 fadc 	bl	8000cf8 <__aeabi_d2lz>
 800f740:	f7f0 ff4c 	bl	80005dc <__aeabi_l2d>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4630      	mov	r0, r6
 800f74a:	4639      	mov	r1, r7
 800f74c:	f7f0 fdbc 	bl	80002c8 <__aeabi_dsub>
 800f750:	460b      	mov	r3, r1
 800f752:	4602      	mov	r2, r0
 800f754:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f758:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75e:	ea46 060a 	orr.w	r6, r6, sl
 800f762:	431e      	orrs	r6, r3
 800f764:	d06f      	beq.n	800f846 <_strtod_l+0xb86>
 800f766:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7a0 <_strtod_l+0xae0>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f1 f9d6 	bl	8000b1c <__aeabi_dcmplt>
 800f770:	2800      	cmp	r0, #0
 800f772:	f47f acd3 	bne.w	800f11c <_strtod_l+0x45c>
 800f776:	a30c      	add	r3, pc, #48	@ (adr r3, 800f7a8 <_strtod_l+0xae8>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f780:	f7f1 f9ea 	bl	8000b58 <__aeabi_dcmpgt>
 800f784:	2800      	cmp	r0, #0
 800f786:	d093      	beq.n	800f6b0 <_strtod_l+0x9f0>
 800f788:	e4c8      	b.n	800f11c <_strtod_l+0x45c>
 800f78a:	bf00      	nop
 800f78c:	f3af 8000 	nop.w
 800f790:	00000000 	.word	0x00000000
 800f794:	bff00000 	.word	0xbff00000
 800f798:	00000000 	.word	0x00000000
 800f79c:	3ff00000 	.word	0x3ff00000
 800f7a0:	94a03595 	.word	0x94a03595
 800f7a4:	3fdfffff 	.word	0x3fdfffff
 800f7a8:	35afe535 	.word	0x35afe535
 800f7ac:	3fe00000 	.word	0x3fe00000
 800f7b0:	000fffff 	.word	0x000fffff
 800f7b4:	7ff00000 	.word	0x7ff00000
 800f7b8:	7fefffff 	.word	0x7fefffff
 800f7bc:	3ff00000 	.word	0x3ff00000
 800f7c0:	3fe00000 	.word	0x3fe00000
 800f7c4:	7fe00000 	.word	0x7fe00000
 800f7c8:	7c9fffff 	.word	0x7c9fffff
 800f7cc:	9b08      	ldr	r3, [sp, #32]
 800f7ce:	b323      	cbz	r3, 800f81a <_strtod_l+0xb5a>
 800f7d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f7d4:	d821      	bhi.n	800f81a <_strtod_l+0xb5a>
 800f7d6:	a328      	add	r3, pc, #160	@ (adr r3, 800f878 <_strtod_l+0xbb8>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4639      	mov	r1, r7
 800f7e0:	f7f1 f9a6 	bl	8000b30 <__aeabi_dcmple>
 800f7e4:	b1a0      	cbz	r0, 800f810 <_strtod_l+0xb50>
 800f7e6:	4639      	mov	r1, r7
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f7f1 f9fd 	bl	8000be8 <__aeabi_d2uiz>
 800f7ee:	2801      	cmp	r0, #1
 800f7f0:	bf38      	it	cc
 800f7f2:	2001      	movcc	r0, #1
 800f7f4:	f7f0 fea6 	bl	8000544 <__aeabi_ui2d>
 800f7f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	b9fb      	cbnz	r3, 800f840 <_strtod_l+0xb80>
 800f800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f804:	9014      	str	r0, [sp, #80]	@ 0x50
 800f806:	9315      	str	r3, [sp, #84]	@ 0x54
 800f808:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f80c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f810:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f812:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f816:	1b5b      	subs	r3, r3, r5
 800f818:	9311      	str	r3, [sp, #68]	@ 0x44
 800f81a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f81e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f822:	f7ff f8ef 	bl	800ea04 <__ulp>
 800f826:	4650      	mov	r0, sl
 800f828:	ec53 2b10 	vmov	r2, r3, d0
 800f82c:	4659      	mov	r1, fp
 800f82e:	f7f0 ff03 	bl	8000638 <__aeabi_dmul>
 800f832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f836:	f7f0 fd49 	bl	80002cc <__adddf3>
 800f83a:	4682      	mov	sl, r0
 800f83c:	468b      	mov	fp, r1
 800f83e:	e770      	b.n	800f722 <_strtod_l+0xa62>
 800f840:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f844:	e7e0      	b.n	800f808 <_strtod_l+0xb48>
 800f846:	a30e      	add	r3, pc, #56	@ (adr r3, 800f880 <_strtod_l+0xbc0>)
 800f848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84c:	f7f1 f966 	bl	8000b1c <__aeabi_dcmplt>
 800f850:	e798      	b.n	800f784 <_strtod_l+0xac4>
 800f852:	2300      	movs	r3, #0
 800f854:	930e      	str	r3, [sp, #56]	@ 0x38
 800f856:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f858:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	f7ff ba6d 	b.w	800ed3a <_strtod_l+0x7a>
 800f860:	2a65      	cmp	r2, #101	@ 0x65
 800f862:	f43f ab68 	beq.w	800ef36 <_strtod_l+0x276>
 800f866:	2a45      	cmp	r2, #69	@ 0x45
 800f868:	f43f ab65 	beq.w	800ef36 <_strtod_l+0x276>
 800f86c:	2301      	movs	r3, #1
 800f86e:	f7ff bba0 	b.w	800efb2 <_strtod_l+0x2f2>
 800f872:	bf00      	nop
 800f874:	f3af 8000 	nop.w
 800f878:	ffc00000 	.word	0xffc00000
 800f87c:	41dfffff 	.word	0x41dfffff
 800f880:	94a03595 	.word	0x94a03595
 800f884:	3fcfffff 	.word	0x3fcfffff

0800f888 <_strtod_r>:
 800f888:	4b01      	ldr	r3, [pc, #4]	@ (800f890 <_strtod_r+0x8>)
 800f88a:	f7ff ba19 	b.w	800ecc0 <_strtod_l>
 800f88e:	bf00      	nop
 800f890:	20000080 	.word	0x20000080

0800f894 <_strtol_l.isra.0>:
 800f894:	2b24      	cmp	r3, #36	@ 0x24
 800f896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f89a:	4686      	mov	lr, r0
 800f89c:	4690      	mov	r8, r2
 800f89e:	d801      	bhi.n	800f8a4 <_strtol_l.isra.0+0x10>
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d106      	bne.n	800f8b2 <_strtol_l.isra.0+0x1e>
 800f8a4:	f7fd fe64 	bl	800d570 <__errno>
 800f8a8:	2316      	movs	r3, #22
 800f8aa:	6003      	str	r3, [r0, #0]
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b2:	4834      	ldr	r0, [pc, #208]	@ (800f984 <_strtol_l.isra.0+0xf0>)
 800f8b4:	460d      	mov	r5, r1
 800f8b6:	462a      	mov	r2, r5
 800f8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8bc:	5d06      	ldrb	r6, [r0, r4]
 800f8be:	f016 0608 	ands.w	r6, r6, #8
 800f8c2:	d1f8      	bne.n	800f8b6 <_strtol_l.isra.0+0x22>
 800f8c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f8c6:	d110      	bne.n	800f8ea <_strtol_l.isra.0+0x56>
 800f8c8:	782c      	ldrb	r4, [r5, #0]
 800f8ca:	2601      	movs	r6, #1
 800f8cc:	1c95      	adds	r5, r2, #2
 800f8ce:	f033 0210 	bics.w	r2, r3, #16
 800f8d2:	d115      	bne.n	800f900 <_strtol_l.isra.0+0x6c>
 800f8d4:	2c30      	cmp	r4, #48	@ 0x30
 800f8d6:	d10d      	bne.n	800f8f4 <_strtol_l.isra.0+0x60>
 800f8d8:	782a      	ldrb	r2, [r5, #0]
 800f8da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f8de:	2a58      	cmp	r2, #88	@ 0x58
 800f8e0:	d108      	bne.n	800f8f4 <_strtol_l.isra.0+0x60>
 800f8e2:	786c      	ldrb	r4, [r5, #1]
 800f8e4:	3502      	adds	r5, #2
 800f8e6:	2310      	movs	r3, #16
 800f8e8:	e00a      	b.n	800f900 <_strtol_l.isra.0+0x6c>
 800f8ea:	2c2b      	cmp	r4, #43	@ 0x2b
 800f8ec:	bf04      	itt	eq
 800f8ee:	782c      	ldrbeq	r4, [r5, #0]
 800f8f0:	1c95      	addeq	r5, r2, #2
 800f8f2:	e7ec      	b.n	800f8ce <_strtol_l.isra.0+0x3a>
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1f6      	bne.n	800f8e6 <_strtol_l.isra.0+0x52>
 800f8f8:	2c30      	cmp	r4, #48	@ 0x30
 800f8fa:	bf14      	ite	ne
 800f8fc:	230a      	movne	r3, #10
 800f8fe:	2308      	moveq	r3, #8
 800f900:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f904:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f908:	2200      	movs	r2, #0
 800f90a:	fbbc f9f3 	udiv	r9, ip, r3
 800f90e:	4610      	mov	r0, r2
 800f910:	fb03 ca19 	mls	sl, r3, r9, ip
 800f914:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f918:	2f09      	cmp	r7, #9
 800f91a:	d80f      	bhi.n	800f93c <_strtol_l.isra.0+0xa8>
 800f91c:	463c      	mov	r4, r7
 800f91e:	42a3      	cmp	r3, r4
 800f920:	dd1b      	ble.n	800f95a <_strtol_l.isra.0+0xc6>
 800f922:	1c57      	adds	r7, r2, #1
 800f924:	d007      	beq.n	800f936 <_strtol_l.isra.0+0xa2>
 800f926:	4581      	cmp	r9, r0
 800f928:	d314      	bcc.n	800f954 <_strtol_l.isra.0+0xc0>
 800f92a:	d101      	bne.n	800f930 <_strtol_l.isra.0+0x9c>
 800f92c:	45a2      	cmp	sl, r4
 800f92e:	db11      	blt.n	800f954 <_strtol_l.isra.0+0xc0>
 800f930:	fb00 4003 	mla	r0, r0, r3, r4
 800f934:	2201      	movs	r2, #1
 800f936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f93a:	e7eb      	b.n	800f914 <_strtol_l.isra.0+0x80>
 800f93c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f940:	2f19      	cmp	r7, #25
 800f942:	d801      	bhi.n	800f948 <_strtol_l.isra.0+0xb4>
 800f944:	3c37      	subs	r4, #55	@ 0x37
 800f946:	e7ea      	b.n	800f91e <_strtol_l.isra.0+0x8a>
 800f948:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f94c:	2f19      	cmp	r7, #25
 800f94e:	d804      	bhi.n	800f95a <_strtol_l.isra.0+0xc6>
 800f950:	3c57      	subs	r4, #87	@ 0x57
 800f952:	e7e4      	b.n	800f91e <_strtol_l.isra.0+0x8a>
 800f954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f958:	e7ed      	b.n	800f936 <_strtol_l.isra.0+0xa2>
 800f95a:	1c53      	adds	r3, r2, #1
 800f95c:	d108      	bne.n	800f970 <_strtol_l.isra.0+0xdc>
 800f95e:	2322      	movs	r3, #34	@ 0x22
 800f960:	f8ce 3000 	str.w	r3, [lr]
 800f964:	4660      	mov	r0, ip
 800f966:	f1b8 0f00 	cmp.w	r8, #0
 800f96a:	d0a0      	beq.n	800f8ae <_strtol_l.isra.0+0x1a>
 800f96c:	1e69      	subs	r1, r5, #1
 800f96e:	e006      	b.n	800f97e <_strtol_l.isra.0+0xea>
 800f970:	b106      	cbz	r6, 800f974 <_strtol_l.isra.0+0xe0>
 800f972:	4240      	negs	r0, r0
 800f974:	f1b8 0f00 	cmp.w	r8, #0
 800f978:	d099      	beq.n	800f8ae <_strtol_l.isra.0+0x1a>
 800f97a:	2a00      	cmp	r2, #0
 800f97c:	d1f6      	bne.n	800f96c <_strtol_l.isra.0+0xd8>
 800f97e:	f8c8 1000 	str.w	r1, [r8]
 800f982:	e794      	b.n	800f8ae <_strtol_l.isra.0+0x1a>
 800f984:	08011e59 	.word	0x08011e59

0800f988 <_strtol_r>:
 800f988:	f7ff bf84 	b.w	800f894 <_strtol_l.isra.0>

0800f98c <__ssputs_r>:
 800f98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f990:	688e      	ldr	r6, [r1, #8]
 800f992:	461f      	mov	r7, r3
 800f994:	42be      	cmp	r6, r7
 800f996:	680b      	ldr	r3, [r1, #0]
 800f998:	4682      	mov	sl, r0
 800f99a:	460c      	mov	r4, r1
 800f99c:	4690      	mov	r8, r2
 800f99e:	d82d      	bhi.n	800f9fc <__ssputs_r+0x70>
 800f9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f9a8:	d026      	beq.n	800f9f8 <__ssputs_r+0x6c>
 800f9aa:	6965      	ldr	r5, [r4, #20]
 800f9ac:	6909      	ldr	r1, [r1, #16]
 800f9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9b2:	eba3 0901 	sub.w	r9, r3, r1
 800f9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9ba:	1c7b      	adds	r3, r7, #1
 800f9bc:	444b      	add	r3, r9
 800f9be:	106d      	asrs	r5, r5, #1
 800f9c0:	429d      	cmp	r5, r3
 800f9c2:	bf38      	it	cc
 800f9c4:	461d      	movcc	r5, r3
 800f9c6:	0553      	lsls	r3, r2, #21
 800f9c8:	d527      	bpl.n	800fa1a <__ssputs_r+0x8e>
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	f7fc fd56 	bl	800c47c <_malloc_r>
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	b360      	cbz	r0, 800fa2e <__ssputs_r+0xa2>
 800f9d4:	6921      	ldr	r1, [r4, #16]
 800f9d6:	464a      	mov	r2, r9
 800f9d8:	f000 fa08 	bl	800fdec <memcpy>
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9e6:	81a3      	strh	r3, [r4, #12]
 800f9e8:	6126      	str	r6, [r4, #16]
 800f9ea:	6165      	str	r5, [r4, #20]
 800f9ec:	444e      	add	r6, r9
 800f9ee:	eba5 0509 	sub.w	r5, r5, r9
 800f9f2:	6026      	str	r6, [r4, #0]
 800f9f4:	60a5      	str	r5, [r4, #8]
 800f9f6:	463e      	mov	r6, r7
 800f9f8:	42be      	cmp	r6, r7
 800f9fa:	d900      	bls.n	800f9fe <__ssputs_r+0x72>
 800f9fc:	463e      	mov	r6, r7
 800f9fe:	6820      	ldr	r0, [r4, #0]
 800fa00:	4632      	mov	r2, r6
 800fa02:	4641      	mov	r1, r8
 800fa04:	f000 f9c6 	bl	800fd94 <memmove>
 800fa08:	68a3      	ldr	r3, [r4, #8]
 800fa0a:	1b9b      	subs	r3, r3, r6
 800fa0c:	60a3      	str	r3, [r4, #8]
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	4433      	add	r3, r6
 800fa12:	6023      	str	r3, [r4, #0]
 800fa14:	2000      	movs	r0, #0
 800fa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	f000 fd65 	bl	80104ea <_realloc_r>
 800fa20:	4606      	mov	r6, r0
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d1e0      	bne.n	800f9e8 <__ssputs_r+0x5c>
 800fa26:	6921      	ldr	r1, [r4, #16]
 800fa28:	4650      	mov	r0, sl
 800fa2a:	f7fe fc2d 	bl	800e288 <_free_r>
 800fa2e:	230c      	movs	r3, #12
 800fa30:	f8ca 3000 	str.w	r3, [sl]
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa40:	e7e9      	b.n	800fa16 <__ssputs_r+0x8a>
	...

0800fa44 <_svfiprintf_r>:
 800fa44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa48:	4698      	mov	r8, r3
 800fa4a:	898b      	ldrh	r3, [r1, #12]
 800fa4c:	061b      	lsls	r3, r3, #24
 800fa4e:	b09d      	sub	sp, #116	@ 0x74
 800fa50:	4607      	mov	r7, r0
 800fa52:	460d      	mov	r5, r1
 800fa54:	4614      	mov	r4, r2
 800fa56:	d510      	bpl.n	800fa7a <_svfiprintf_r+0x36>
 800fa58:	690b      	ldr	r3, [r1, #16]
 800fa5a:	b973      	cbnz	r3, 800fa7a <_svfiprintf_r+0x36>
 800fa5c:	2140      	movs	r1, #64	@ 0x40
 800fa5e:	f7fc fd0d 	bl	800c47c <_malloc_r>
 800fa62:	6028      	str	r0, [r5, #0]
 800fa64:	6128      	str	r0, [r5, #16]
 800fa66:	b930      	cbnz	r0, 800fa76 <_svfiprintf_r+0x32>
 800fa68:	230c      	movs	r3, #12
 800fa6a:	603b      	str	r3, [r7, #0]
 800fa6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa70:	b01d      	add	sp, #116	@ 0x74
 800fa72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa76:	2340      	movs	r3, #64	@ 0x40
 800fa78:	616b      	str	r3, [r5, #20]
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa7e:	2320      	movs	r3, #32
 800fa80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa84:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa88:	2330      	movs	r3, #48	@ 0x30
 800fa8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fc28 <_svfiprintf_r+0x1e4>
 800fa8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa92:	f04f 0901 	mov.w	r9, #1
 800fa96:	4623      	mov	r3, r4
 800fa98:	469a      	mov	sl, r3
 800fa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa9e:	b10a      	cbz	r2, 800faa4 <_svfiprintf_r+0x60>
 800faa0:	2a25      	cmp	r2, #37	@ 0x25
 800faa2:	d1f9      	bne.n	800fa98 <_svfiprintf_r+0x54>
 800faa4:	ebba 0b04 	subs.w	fp, sl, r4
 800faa8:	d00b      	beq.n	800fac2 <_svfiprintf_r+0x7e>
 800faaa:	465b      	mov	r3, fp
 800faac:	4622      	mov	r2, r4
 800faae:	4629      	mov	r1, r5
 800fab0:	4638      	mov	r0, r7
 800fab2:	f7ff ff6b 	bl	800f98c <__ssputs_r>
 800fab6:	3001      	adds	r0, #1
 800fab8:	f000 80a7 	beq.w	800fc0a <_svfiprintf_r+0x1c6>
 800fabc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fabe:	445a      	add	r2, fp
 800fac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fac2:	f89a 3000 	ldrb.w	r3, [sl]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 809f 	beq.w	800fc0a <_svfiprintf_r+0x1c6>
 800facc:	2300      	movs	r3, #0
 800face:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fad6:	f10a 0a01 	add.w	sl, sl, #1
 800fada:	9304      	str	r3, [sp, #16]
 800fadc:	9307      	str	r3, [sp, #28]
 800fade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fae4:	4654      	mov	r4, sl
 800fae6:	2205      	movs	r2, #5
 800fae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faec:	484e      	ldr	r0, [pc, #312]	@ (800fc28 <_svfiprintf_r+0x1e4>)
 800faee:	f7f0 fb8f 	bl	8000210 <memchr>
 800faf2:	9a04      	ldr	r2, [sp, #16]
 800faf4:	b9d8      	cbnz	r0, 800fb2e <_svfiprintf_r+0xea>
 800faf6:	06d0      	lsls	r0, r2, #27
 800faf8:	bf44      	itt	mi
 800fafa:	2320      	movmi	r3, #32
 800fafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb00:	0711      	lsls	r1, r2, #28
 800fb02:	bf44      	itt	mi
 800fb04:	232b      	movmi	r3, #43	@ 0x2b
 800fb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb10:	d015      	beq.n	800fb3e <_svfiprintf_r+0xfa>
 800fb12:	9a07      	ldr	r2, [sp, #28]
 800fb14:	4654      	mov	r4, sl
 800fb16:	2000      	movs	r0, #0
 800fb18:	f04f 0c0a 	mov.w	ip, #10
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb22:	3b30      	subs	r3, #48	@ 0x30
 800fb24:	2b09      	cmp	r3, #9
 800fb26:	d94b      	bls.n	800fbc0 <_svfiprintf_r+0x17c>
 800fb28:	b1b0      	cbz	r0, 800fb58 <_svfiprintf_r+0x114>
 800fb2a:	9207      	str	r2, [sp, #28]
 800fb2c:	e014      	b.n	800fb58 <_svfiprintf_r+0x114>
 800fb2e:	eba0 0308 	sub.w	r3, r0, r8
 800fb32:	fa09 f303 	lsl.w	r3, r9, r3
 800fb36:	4313      	orrs	r3, r2
 800fb38:	9304      	str	r3, [sp, #16]
 800fb3a:	46a2      	mov	sl, r4
 800fb3c:	e7d2      	b.n	800fae4 <_svfiprintf_r+0xa0>
 800fb3e:	9b03      	ldr	r3, [sp, #12]
 800fb40:	1d19      	adds	r1, r3, #4
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	9103      	str	r1, [sp, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	bfbb      	ittet	lt
 800fb4a:	425b      	neglt	r3, r3
 800fb4c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb50:	9307      	strge	r3, [sp, #28]
 800fb52:	9307      	strlt	r3, [sp, #28]
 800fb54:	bfb8      	it	lt
 800fb56:	9204      	strlt	r2, [sp, #16]
 800fb58:	7823      	ldrb	r3, [r4, #0]
 800fb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb5c:	d10a      	bne.n	800fb74 <_svfiprintf_r+0x130>
 800fb5e:	7863      	ldrb	r3, [r4, #1]
 800fb60:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb62:	d132      	bne.n	800fbca <_svfiprintf_r+0x186>
 800fb64:	9b03      	ldr	r3, [sp, #12]
 800fb66:	1d1a      	adds	r2, r3, #4
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	9203      	str	r2, [sp, #12]
 800fb6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb70:	3402      	adds	r4, #2
 800fb72:	9305      	str	r3, [sp, #20]
 800fb74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fc38 <_svfiprintf_r+0x1f4>
 800fb78:	7821      	ldrb	r1, [r4, #0]
 800fb7a:	2203      	movs	r2, #3
 800fb7c:	4650      	mov	r0, sl
 800fb7e:	f7f0 fb47 	bl	8000210 <memchr>
 800fb82:	b138      	cbz	r0, 800fb94 <_svfiprintf_r+0x150>
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	eba0 000a 	sub.w	r0, r0, sl
 800fb8a:	2240      	movs	r2, #64	@ 0x40
 800fb8c:	4082      	lsls	r2, r0
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	3401      	adds	r4, #1
 800fb92:	9304      	str	r3, [sp, #16]
 800fb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb98:	4824      	ldr	r0, [pc, #144]	@ (800fc2c <_svfiprintf_r+0x1e8>)
 800fb9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb9e:	2206      	movs	r2, #6
 800fba0:	f7f0 fb36 	bl	8000210 <memchr>
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d036      	beq.n	800fc16 <_svfiprintf_r+0x1d2>
 800fba8:	4b21      	ldr	r3, [pc, #132]	@ (800fc30 <_svfiprintf_r+0x1ec>)
 800fbaa:	bb1b      	cbnz	r3, 800fbf4 <_svfiprintf_r+0x1b0>
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	3307      	adds	r3, #7
 800fbb0:	f023 0307 	bic.w	r3, r3, #7
 800fbb4:	3308      	adds	r3, #8
 800fbb6:	9303      	str	r3, [sp, #12]
 800fbb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbba:	4433      	add	r3, r6
 800fbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbbe:	e76a      	b.n	800fa96 <_svfiprintf_r+0x52>
 800fbc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbc4:	460c      	mov	r4, r1
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	e7a8      	b.n	800fb1c <_svfiprintf_r+0xd8>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	3401      	adds	r4, #1
 800fbce:	9305      	str	r3, [sp, #20]
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	f04f 0c0a 	mov.w	ip, #10
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbdc:	3a30      	subs	r2, #48	@ 0x30
 800fbde:	2a09      	cmp	r2, #9
 800fbe0:	d903      	bls.n	800fbea <_svfiprintf_r+0x1a6>
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d0c6      	beq.n	800fb74 <_svfiprintf_r+0x130>
 800fbe6:	9105      	str	r1, [sp, #20]
 800fbe8:	e7c4      	b.n	800fb74 <_svfiprintf_r+0x130>
 800fbea:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbee:	4604      	mov	r4, r0
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e7f0      	b.n	800fbd6 <_svfiprintf_r+0x192>
 800fbf4:	ab03      	add	r3, sp, #12
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	462a      	mov	r2, r5
 800fbfa:	4b0e      	ldr	r3, [pc, #56]	@ (800fc34 <_svfiprintf_r+0x1f0>)
 800fbfc:	a904      	add	r1, sp, #16
 800fbfe:	4638      	mov	r0, r7
 800fc00:	f7fc fd68 	bl	800c6d4 <_printf_float>
 800fc04:	1c42      	adds	r2, r0, #1
 800fc06:	4606      	mov	r6, r0
 800fc08:	d1d6      	bne.n	800fbb8 <_svfiprintf_r+0x174>
 800fc0a:	89ab      	ldrh	r3, [r5, #12]
 800fc0c:	065b      	lsls	r3, r3, #25
 800fc0e:	f53f af2d 	bmi.w	800fa6c <_svfiprintf_r+0x28>
 800fc12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc14:	e72c      	b.n	800fa70 <_svfiprintf_r+0x2c>
 800fc16:	ab03      	add	r3, sp, #12
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	462a      	mov	r2, r5
 800fc1c:	4b05      	ldr	r3, [pc, #20]	@ (800fc34 <_svfiprintf_r+0x1f0>)
 800fc1e:	a904      	add	r1, sp, #16
 800fc20:	4638      	mov	r0, r7
 800fc22:	f7fc ffef 	bl	800cc04 <_printf_i>
 800fc26:	e7ed      	b.n	800fc04 <_svfiprintf_r+0x1c0>
 800fc28:	08011c55 	.word	0x08011c55
 800fc2c:	08011c5f 	.word	0x08011c5f
 800fc30:	0800c6d5 	.word	0x0800c6d5
 800fc34:	0800f98d 	.word	0x0800f98d
 800fc38:	08011c5b 	.word	0x08011c5b

0800fc3c <__sflush_r>:
 800fc3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc44:	0716      	lsls	r6, r2, #28
 800fc46:	4605      	mov	r5, r0
 800fc48:	460c      	mov	r4, r1
 800fc4a:	d454      	bmi.n	800fcf6 <__sflush_r+0xba>
 800fc4c:	684b      	ldr	r3, [r1, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	dc02      	bgt.n	800fc58 <__sflush_r+0x1c>
 800fc52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	dd48      	ble.n	800fcea <__sflush_r+0xae>
 800fc58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc5a:	2e00      	cmp	r6, #0
 800fc5c:	d045      	beq.n	800fcea <__sflush_r+0xae>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc64:	682f      	ldr	r7, [r5, #0]
 800fc66:	6a21      	ldr	r1, [r4, #32]
 800fc68:	602b      	str	r3, [r5, #0]
 800fc6a:	d030      	beq.n	800fcce <__sflush_r+0x92>
 800fc6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc6e:	89a3      	ldrh	r3, [r4, #12]
 800fc70:	0759      	lsls	r1, r3, #29
 800fc72:	d505      	bpl.n	800fc80 <__sflush_r+0x44>
 800fc74:	6863      	ldr	r3, [r4, #4]
 800fc76:	1ad2      	subs	r2, r2, r3
 800fc78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc7a:	b10b      	cbz	r3, 800fc80 <__sflush_r+0x44>
 800fc7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc7e:	1ad2      	subs	r2, r2, r3
 800fc80:	2300      	movs	r3, #0
 800fc82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc84:	6a21      	ldr	r1, [r4, #32]
 800fc86:	4628      	mov	r0, r5
 800fc88:	47b0      	blx	r6
 800fc8a:	1c43      	adds	r3, r0, #1
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	d106      	bne.n	800fc9e <__sflush_r+0x62>
 800fc90:	6829      	ldr	r1, [r5, #0]
 800fc92:	291d      	cmp	r1, #29
 800fc94:	d82b      	bhi.n	800fcee <__sflush_r+0xb2>
 800fc96:	4a2a      	ldr	r2, [pc, #168]	@ (800fd40 <__sflush_r+0x104>)
 800fc98:	40ca      	lsrs	r2, r1
 800fc9a:	07d6      	lsls	r6, r2, #31
 800fc9c:	d527      	bpl.n	800fcee <__sflush_r+0xb2>
 800fc9e:	2200      	movs	r2, #0
 800fca0:	6062      	str	r2, [r4, #4]
 800fca2:	04d9      	lsls	r1, r3, #19
 800fca4:	6922      	ldr	r2, [r4, #16]
 800fca6:	6022      	str	r2, [r4, #0]
 800fca8:	d504      	bpl.n	800fcb4 <__sflush_r+0x78>
 800fcaa:	1c42      	adds	r2, r0, #1
 800fcac:	d101      	bne.n	800fcb2 <__sflush_r+0x76>
 800fcae:	682b      	ldr	r3, [r5, #0]
 800fcb0:	b903      	cbnz	r3, 800fcb4 <__sflush_r+0x78>
 800fcb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fcb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcb6:	602f      	str	r7, [r5, #0]
 800fcb8:	b1b9      	cbz	r1, 800fcea <__sflush_r+0xae>
 800fcba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcbe:	4299      	cmp	r1, r3
 800fcc0:	d002      	beq.n	800fcc8 <__sflush_r+0x8c>
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f7fe fae0 	bl	800e288 <_free_r>
 800fcc8:	2300      	movs	r3, #0
 800fcca:	6363      	str	r3, [r4, #52]	@ 0x34
 800fccc:	e00d      	b.n	800fcea <__sflush_r+0xae>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	47b0      	blx	r6
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	1c50      	adds	r0, r2, #1
 800fcd8:	d1c9      	bne.n	800fc6e <__sflush_r+0x32>
 800fcda:	682b      	ldr	r3, [r5, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d0c6      	beq.n	800fc6e <__sflush_r+0x32>
 800fce0:	2b1d      	cmp	r3, #29
 800fce2:	d001      	beq.n	800fce8 <__sflush_r+0xac>
 800fce4:	2b16      	cmp	r3, #22
 800fce6:	d11e      	bne.n	800fd26 <__sflush_r+0xea>
 800fce8:	602f      	str	r7, [r5, #0]
 800fcea:	2000      	movs	r0, #0
 800fcec:	e022      	b.n	800fd34 <__sflush_r+0xf8>
 800fcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcf2:	b21b      	sxth	r3, r3
 800fcf4:	e01b      	b.n	800fd2e <__sflush_r+0xf2>
 800fcf6:	690f      	ldr	r7, [r1, #16]
 800fcf8:	2f00      	cmp	r7, #0
 800fcfa:	d0f6      	beq.n	800fcea <__sflush_r+0xae>
 800fcfc:	0793      	lsls	r3, r2, #30
 800fcfe:	680e      	ldr	r6, [r1, #0]
 800fd00:	bf08      	it	eq
 800fd02:	694b      	ldreq	r3, [r1, #20]
 800fd04:	600f      	str	r7, [r1, #0]
 800fd06:	bf18      	it	ne
 800fd08:	2300      	movne	r3, #0
 800fd0a:	eba6 0807 	sub.w	r8, r6, r7
 800fd0e:	608b      	str	r3, [r1, #8]
 800fd10:	f1b8 0f00 	cmp.w	r8, #0
 800fd14:	dde9      	ble.n	800fcea <__sflush_r+0xae>
 800fd16:	6a21      	ldr	r1, [r4, #32]
 800fd18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd1a:	4643      	mov	r3, r8
 800fd1c:	463a      	mov	r2, r7
 800fd1e:	4628      	mov	r0, r5
 800fd20:	47b0      	blx	r6
 800fd22:	2800      	cmp	r0, #0
 800fd24:	dc08      	bgt.n	800fd38 <__sflush_r+0xfc>
 800fd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd2e:	81a3      	strh	r3, [r4, #12]
 800fd30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd38:	4407      	add	r7, r0
 800fd3a:	eba8 0800 	sub.w	r8, r8, r0
 800fd3e:	e7e7      	b.n	800fd10 <__sflush_r+0xd4>
 800fd40:	20400001 	.word	0x20400001

0800fd44 <_fflush_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	690b      	ldr	r3, [r1, #16]
 800fd48:	4605      	mov	r5, r0
 800fd4a:	460c      	mov	r4, r1
 800fd4c:	b913      	cbnz	r3, 800fd54 <_fflush_r+0x10>
 800fd4e:	2500      	movs	r5, #0
 800fd50:	4628      	mov	r0, r5
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	b118      	cbz	r0, 800fd5e <_fflush_r+0x1a>
 800fd56:	6a03      	ldr	r3, [r0, #32]
 800fd58:	b90b      	cbnz	r3, 800fd5e <_fflush_r+0x1a>
 800fd5a:	f7fd fb0b 	bl	800d374 <__sinit>
 800fd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d0f3      	beq.n	800fd4e <_fflush_r+0xa>
 800fd66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd68:	07d0      	lsls	r0, r2, #31
 800fd6a:	d404      	bmi.n	800fd76 <_fflush_r+0x32>
 800fd6c:	0599      	lsls	r1, r3, #22
 800fd6e:	d402      	bmi.n	800fd76 <_fflush_r+0x32>
 800fd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd72:	f7fd fc28 	bl	800d5c6 <__retarget_lock_acquire_recursive>
 800fd76:	4628      	mov	r0, r5
 800fd78:	4621      	mov	r1, r4
 800fd7a:	f7ff ff5f 	bl	800fc3c <__sflush_r>
 800fd7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd80:	07da      	lsls	r2, r3, #31
 800fd82:	4605      	mov	r5, r0
 800fd84:	d4e4      	bmi.n	800fd50 <_fflush_r+0xc>
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	059b      	lsls	r3, r3, #22
 800fd8a:	d4e1      	bmi.n	800fd50 <_fflush_r+0xc>
 800fd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd8e:	f7fd fc1b 	bl	800d5c8 <__retarget_lock_release_recursive>
 800fd92:	e7dd      	b.n	800fd50 <_fflush_r+0xc>

0800fd94 <memmove>:
 800fd94:	4288      	cmp	r0, r1
 800fd96:	b510      	push	{r4, lr}
 800fd98:	eb01 0402 	add.w	r4, r1, r2
 800fd9c:	d902      	bls.n	800fda4 <memmove+0x10>
 800fd9e:	4284      	cmp	r4, r0
 800fda0:	4623      	mov	r3, r4
 800fda2:	d807      	bhi.n	800fdb4 <memmove+0x20>
 800fda4:	1e43      	subs	r3, r0, #1
 800fda6:	42a1      	cmp	r1, r4
 800fda8:	d008      	beq.n	800fdbc <memmove+0x28>
 800fdaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdb2:	e7f8      	b.n	800fda6 <memmove+0x12>
 800fdb4:	4402      	add	r2, r0
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	428a      	cmp	r2, r1
 800fdba:	d100      	bne.n	800fdbe <memmove+0x2a>
 800fdbc:	bd10      	pop	{r4, pc}
 800fdbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdc6:	e7f7      	b.n	800fdb8 <memmove+0x24>

0800fdc8 <strncmp>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	b16a      	cbz	r2, 800fde8 <strncmp+0x20>
 800fdcc:	3901      	subs	r1, #1
 800fdce:	1884      	adds	r4, r0, r2
 800fdd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d103      	bne.n	800fde4 <strncmp+0x1c>
 800fddc:	42a0      	cmp	r0, r4
 800fdde:	d001      	beq.n	800fde4 <strncmp+0x1c>
 800fde0:	2a00      	cmp	r2, #0
 800fde2:	d1f5      	bne.n	800fdd0 <strncmp+0x8>
 800fde4:	1ad0      	subs	r0, r2, r3
 800fde6:	bd10      	pop	{r4, pc}
 800fde8:	4610      	mov	r0, r2
 800fdea:	e7fc      	b.n	800fde6 <strncmp+0x1e>

0800fdec <memcpy>:
 800fdec:	440a      	add	r2, r1
 800fdee:	4291      	cmp	r1, r2
 800fdf0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fdf4:	d100      	bne.n	800fdf8 <memcpy+0xc>
 800fdf6:	4770      	bx	lr
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe02:	4291      	cmp	r1, r2
 800fe04:	d1f9      	bne.n	800fdfa <memcpy+0xe>
 800fe06:	bd10      	pop	{r4, pc}

0800fe08 <nan>:
 800fe08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fe10 <nan+0x8>
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	00000000 	.word	0x00000000
 800fe14:	7ff80000 	.word	0x7ff80000

0800fe18 <__assert_func>:
 800fe18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe1a:	4614      	mov	r4, r2
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	4b09      	ldr	r3, [pc, #36]	@ (800fe44 <__assert_func+0x2c>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4605      	mov	r5, r0
 800fe24:	68d8      	ldr	r0, [r3, #12]
 800fe26:	b14c      	cbz	r4, 800fe3c <__assert_func+0x24>
 800fe28:	4b07      	ldr	r3, [pc, #28]	@ (800fe48 <__assert_func+0x30>)
 800fe2a:	9100      	str	r1, [sp, #0]
 800fe2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe30:	4906      	ldr	r1, [pc, #24]	@ (800fe4c <__assert_func+0x34>)
 800fe32:	462b      	mov	r3, r5
 800fe34:	f000 fb94 	bl	8010560 <fiprintf>
 800fe38:	f000 fba4 	bl	8010584 <abort>
 800fe3c:	4b04      	ldr	r3, [pc, #16]	@ (800fe50 <__assert_func+0x38>)
 800fe3e:	461c      	mov	r4, r3
 800fe40:	e7f3      	b.n	800fe2a <__assert_func+0x12>
 800fe42:	bf00      	nop
 800fe44:	20000030 	.word	0x20000030
 800fe48:	08011c6e 	.word	0x08011c6e
 800fe4c:	08011c7b 	.word	0x08011c7b
 800fe50:	08011ca9 	.word	0x08011ca9

0800fe54 <rshift>:
 800fe54:	6903      	ldr	r3, [r0, #16]
 800fe56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe62:	f100 0414 	add.w	r4, r0, #20
 800fe66:	dd45      	ble.n	800fef4 <rshift+0xa0>
 800fe68:	f011 011f 	ands.w	r1, r1, #31
 800fe6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fe70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fe74:	d10c      	bne.n	800fe90 <rshift+0x3c>
 800fe76:	f100 0710 	add.w	r7, r0, #16
 800fe7a:	4629      	mov	r1, r5
 800fe7c:	42b1      	cmp	r1, r6
 800fe7e:	d334      	bcc.n	800feea <rshift+0x96>
 800fe80:	1a9b      	subs	r3, r3, r2
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	1eea      	subs	r2, r5, #3
 800fe86:	4296      	cmp	r6, r2
 800fe88:	bf38      	it	cc
 800fe8a:	2300      	movcc	r3, #0
 800fe8c:	4423      	add	r3, r4
 800fe8e:	e015      	b.n	800febc <rshift+0x68>
 800fe90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fe94:	f1c1 0820 	rsb	r8, r1, #32
 800fe98:	40cf      	lsrs	r7, r1
 800fe9a:	f105 0e04 	add.w	lr, r5, #4
 800fe9e:	46a1      	mov	r9, r4
 800fea0:	4576      	cmp	r6, lr
 800fea2:	46f4      	mov	ip, lr
 800fea4:	d815      	bhi.n	800fed2 <rshift+0x7e>
 800fea6:	1a9a      	subs	r2, r3, r2
 800fea8:	0092      	lsls	r2, r2, #2
 800feaa:	3a04      	subs	r2, #4
 800feac:	3501      	adds	r5, #1
 800feae:	42ae      	cmp	r6, r5
 800feb0:	bf38      	it	cc
 800feb2:	2200      	movcc	r2, #0
 800feb4:	18a3      	adds	r3, r4, r2
 800feb6:	50a7      	str	r7, [r4, r2]
 800feb8:	b107      	cbz	r7, 800febc <rshift+0x68>
 800feba:	3304      	adds	r3, #4
 800febc:	1b1a      	subs	r2, r3, r4
 800febe:	42a3      	cmp	r3, r4
 800fec0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fec4:	bf08      	it	eq
 800fec6:	2300      	moveq	r3, #0
 800fec8:	6102      	str	r2, [r0, #16]
 800feca:	bf08      	it	eq
 800fecc:	6143      	streq	r3, [r0, #20]
 800fece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fed2:	f8dc c000 	ldr.w	ip, [ip]
 800fed6:	fa0c fc08 	lsl.w	ip, ip, r8
 800feda:	ea4c 0707 	orr.w	r7, ip, r7
 800fede:	f849 7b04 	str.w	r7, [r9], #4
 800fee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fee6:	40cf      	lsrs	r7, r1
 800fee8:	e7da      	b.n	800fea0 <rshift+0x4c>
 800feea:	f851 cb04 	ldr.w	ip, [r1], #4
 800feee:	f847 cf04 	str.w	ip, [r7, #4]!
 800fef2:	e7c3      	b.n	800fe7c <rshift+0x28>
 800fef4:	4623      	mov	r3, r4
 800fef6:	e7e1      	b.n	800febc <rshift+0x68>

0800fef8 <__hexdig_fun>:
 800fef8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fefc:	2b09      	cmp	r3, #9
 800fefe:	d802      	bhi.n	800ff06 <__hexdig_fun+0xe>
 800ff00:	3820      	subs	r0, #32
 800ff02:	b2c0      	uxtb	r0, r0
 800ff04:	4770      	bx	lr
 800ff06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ff0a:	2b05      	cmp	r3, #5
 800ff0c:	d801      	bhi.n	800ff12 <__hexdig_fun+0x1a>
 800ff0e:	3847      	subs	r0, #71	@ 0x47
 800ff10:	e7f7      	b.n	800ff02 <__hexdig_fun+0xa>
 800ff12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ff16:	2b05      	cmp	r3, #5
 800ff18:	d801      	bhi.n	800ff1e <__hexdig_fun+0x26>
 800ff1a:	3827      	subs	r0, #39	@ 0x27
 800ff1c:	e7f1      	b.n	800ff02 <__hexdig_fun+0xa>
 800ff1e:	2000      	movs	r0, #0
 800ff20:	4770      	bx	lr
	...

0800ff24 <__gethex>:
 800ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff28:	b085      	sub	sp, #20
 800ff2a:	468a      	mov	sl, r1
 800ff2c:	9302      	str	r3, [sp, #8]
 800ff2e:	680b      	ldr	r3, [r1, #0]
 800ff30:	9001      	str	r0, [sp, #4]
 800ff32:	4690      	mov	r8, r2
 800ff34:	1c9c      	adds	r4, r3, #2
 800ff36:	46a1      	mov	r9, r4
 800ff38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ff3c:	2830      	cmp	r0, #48	@ 0x30
 800ff3e:	d0fa      	beq.n	800ff36 <__gethex+0x12>
 800ff40:	eba9 0303 	sub.w	r3, r9, r3
 800ff44:	f1a3 0b02 	sub.w	fp, r3, #2
 800ff48:	f7ff ffd6 	bl	800fef8 <__hexdig_fun>
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d168      	bne.n	8010024 <__gethex+0x100>
 800ff52:	49a0      	ldr	r1, [pc, #640]	@ (80101d4 <__gethex+0x2b0>)
 800ff54:	2201      	movs	r2, #1
 800ff56:	4648      	mov	r0, r9
 800ff58:	f7ff ff36 	bl	800fdc8 <strncmp>
 800ff5c:	4607      	mov	r7, r0
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d167      	bne.n	8010032 <__gethex+0x10e>
 800ff62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ff66:	4626      	mov	r6, r4
 800ff68:	f7ff ffc6 	bl	800fef8 <__hexdig_fun>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d062      	beq.n	8010036 <__gethex+0x112>
 800ff70:	4623      	mov	r3, r4
 800ff72:	7818      	ldrb	r0, [r3, #0]
 800ff74:	2830      	cmp	r0, #48	@ 0x30
 800ff76:	4699      	mov	r9, r3
 800ff78:	f103 0301 	add.w	r3, r3, #1
 800ff7c:	d0f9      	beq.n	800ff72 <__gethex+0x4e>
 800ff7e:	f7ff ffbb 	bl	800fef8 <__hexdig_fun>
 800ff82:	fab0 f580 	clz	r5, r0
 800ff86:	096d      	lsrs	r5, r5, #5
 800ff88:	f04f 0b01 	mov.w	fp, #1
 800ff8c:	464a      	mov	r2, r9
 800ff8e:	4616      	mov	r6, r2
 800ff90:	3201      	adds	r2, #1
 800ff92:	7830      	ldrb	r0, [r6, #0]
 800ff94:	f7ff ffb0 	bl	800fef8 <__hexdig_fun>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d1f8      	bne.n	800ff8e <__gethex+0x6a>
 800ff9c:	498d      	ldr	r1, [pc, #564]	@ (80101d4 <__gethex+0x2b0>)
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7ff ff11 	bl	800fdc8 <strncmp>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d13f      	bne.n	801002a <__gethex+0x106>
 800ffaa:	b944      	cbnz	r4, 800ffbe <__gethex+0x9a>
 800ffac:	1c74      	adds	r4, r6, #1
 800ffae:	4622      	mov	r2, r4
 800ffb0:	4616      	mov	r6, r2
 800ffb2:	3201      	adds	r2, #1
 800ffb4:	7830      	ldrb	r0, [r6, #0]
 800ffb6:	f7ff ff9f 	bl	800fef8 <__hexdig_fun>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d1f8      	bne.n	800ffb0 <__gethex+0x8c>
 800ffbe:	1ba4      	subs	r4, r4, r6
 800ffc0:	00a7      	lsls	r7, r4, #2
 800ffc2:	7833      	ldrb	r3, [r6, #0]
 800ffc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ffc8:	2b50      	cmp	r3, #80	@ 0x50
 800ffca:	d13e      	bne.n	801004a <__gethex+0x126>
 800ffcc:	7873      	ldrb	r3, [r6, #1]
 800ffce:	2b2b      	cmp	r3, #43	@ 0x2b
 800ffd0:	d033      	beq.n	801003a <__gethex+0x116>
 800ffd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ffd4:	d034      	beq.n	8010040 <__gethex+0x11c>
 800ffd6:	1c71      	adds	r1, r6, #1
 800ffd8:	2400      	movs	r4, #0
 800ffda:	7808      	ldrb	r0, [r1, #0]
 800ffdc:	f7ff ff8c 	bl	800fef8 <__hexdig_fun>
 800ffe0:	1e43      	subs	r3, r0, #1
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b18      	cmp	r3, #24
 800ffe6:	d830      	bhi.n	801004a <__gethex+0x126>
 800ffe8:	f1a0 0210 	sub.w	r2, r0, #16
 800ffec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fff0:	f7ff ff82 	bl	800fef8 <__hexdig_fun>
 800fff4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800fff8:	fa5f fc8c 	uxtb.w	ip, ip
 800fffc:	f1bc 0f18 	cmp.w	ip, #24
 8010000:	f04f 030a 	mov.w	r3, #10
 8010004:	d91e      	bls.n	8010044 <__gethex+0x120>
 8010006:	b104      	cbz	r4, 801000a <__gethex+0xe6>
 8010008:	4252      	negs	r2, r2
 801000a:	4417      	add	r7, r2
 801000c:	f8ca 1000 	str.w	r1, [sl]
 8010010:	b1ed      	cbz	r5, 801004e <__gethex+0x12a>
 8010012:	f1bb 0f00 	cmp.w	fp, #0
 8010016:	bf0c      	ite	eq
 8010018:	2506      	moveq	r5, #6
 801001a:	2500      	movne	r5, #0
 801001c:	4628      	mov	r0, r5
 801001e:	b005      	add	sp, #20
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010024:	2500      	movs	r5, #0
 8010026:	462c      	mov	r4, r5
 8010028:	e7b0      	b.n	800ff8c <__gethex+0x68>
 801002a:	2c00      	cmp	r4, #0
 801002c:	d1c7      	bne.n	800ffbe <__gethex+0x9a>
 801002e:	4627      	mov	r7, r4
 8010030:	e7c7      	b.n	800ffc2 <__gethex+0x9e>
 8010032:	464e      	mov	r6, r9
 8010034:	462f      	mov	r7, r5
 8010036:	2501      	movs	r5, #1
 8010038:	e7c3      	b.n	800ffc2 <__gethex+0x9e>
 801003a:	2400      	movs	r4, #0
 801003c:	1cb1      	adds	r1, r6, #2
 801003e:	e7cc      	b.n	800ffda <__gethex+0xb6>
 8010040:	2401      	movs	r4, #1
 8010042:	e7fb      	b.n	801003c <__gethex+0x118>
 8010044:	fb03 0002 	mla	r0, r3, r2, r0
 8010048:	e7ce      	b.n	800ffe8 <__gethex+0xc4>
 801004a:	4631      	mov	r1, r6
 801004c:	e7de      	b.n	801000c <__gethex+0xe8>
 801004e:	eba6 0309 	sub.w	r3, r6, r9
 8010052:	3b01      	subs	r3, #1
 8010054:	4629      	mov	r1, r5
 8010056:	2b07      	cmp	r3, #7
 8010058:	dc0a      	bgt.n	8010070 <__gethex+0x14c>
 801005a:	9801      	ldr	r0, [sp, #4]
 801005c:	f7fe f966 	bl	800e32c <_Balloc>
 8010060:	4604      	mov	r4, r0
 8010062:	b940      	cbnz	r0, 8010076 <__gethex+0x152>
 8010064:	4b5c      	ldr	r3, [pc, #368]	@ (80101d8 <__gethex+0x2b4>)
 8010066:	4602      	mov	r2, r0
 8010068:	21e4      	movs	r1, #228	@ 0xe4
 801006a:	485c      	ldr	r0, [pc, #368]	@ (80101dc <__gethex+0x2b8>)
 801006c:	f7ff fed4 	bl	800fe18 <__assert_func>
 8010070:	3101      	adds	r1, #1
 8010072:	105b      	asrs	r3, r3, #1
 8010074:	e7ef      	b.n	8010056 <__gethex+0x132>
 8010076:	f100 0a14 	add.w	sl, r0, #20
 801007a:	2300      	movs	r3, #0
 801007c:	4655      	mov	r5, sl
 801007e:	469b      	mov	fp, r3
 8010080:	45b1      	cmp	r9, r6
 8010082:	d337      	bcc.n	80100f4 <__gethex+0x1d0>
 8010084:	f845 bb04 	str.w	fp, [r5], #4
 8010088:	eba5 050a 	sub.w	r5, r5, sl
 801008c:	10ad      	asrs	r5, r5, #2
 801008e:	6125      	str	r5, [r4, #16]
 8010090:	4658      	mov	r0, fp
 8010092:	f7fe fa3d 	bl	800e510 <__hi0bits>
 8010096:	016d      	lsls	r5, r5, #5
 8010098:	f8d8 6000 	ldr.w	r6, [r8]
 801009c:	1a2d      	subs	r5, r5, r0
 801009e:	42b5      	cmp	r5, r6
 80100a0:	dd54      	ble.n	801014c <__gethex+0x228>
 80100a2:	1bad      	subs	r5, r5, r6
 80100a4:	4629      	mov	r1, r5
 80100a6:	4620      	mov	r0, r4
 80100a8:	f7fe fdc9 	bl	800ec3e <__any_on>
 80100ac:	4681      	mov	r9, r0
 80100ae:	b178      	cbz	r0, 80100d0 <__gethex+0x1ac>
 80100b0:	1e6b      	subs	r3, r5, #1
 80100b2:	1159      	asrs	r1, r3, #5
 80100b4:	f003 021f 	and.w	r2, r3, #31
 80100b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80100bc:	f04f 0901 	mov.w	r9, #1
 80100c0:	fa09 f202 	lsl.w	r2, r9, r2
 80100c4:	420a      	tst	r2, r1
 80100c6:	d003      	beq.n	80100d0 <__gethex+0x1ac>
 80100c8:	454b      	cmp	r3, r9
 80100ca:	dc36      	bgt.n	801013a <__gethex+0x216>
 80100cc:	f04f 0902 	mov.w	r9, #2
 80100d0:	4629      	mov	r1, r5
 80100d2:	4620      	mov	r0, r4
 80100d4:	f7ff febe 	bl	800fe54 <rshift>
 80100d8:	442f      	add	r7, r5
 80100da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100de:	42bb      	cmp	r3, r7
 80100e0:	da42      	bge.n	8010168 <__gethex+0x244>
 80100e2:	9801      	ldr	r0, [sp, #4]
 80100e4:	4621      	mov	r1, r4
 80100e6:	f7fe f961 	bl	800e3ac <_Bfree>
 80100ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100ec:	2300      	movs	r3, #0
 80100ee:	6013      	str	r3, [r2, #0]
 80100f0:	25a3      	movs	r5, #163	@ 0xa3
 80100f2:	e793      	b.n	801001c <__gethex+0xf8>
 80100f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80100f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80100fa:	d012      	beq.n	8010122 <__gethex+0x1fe>
 80100fc:	2b20      	cmp	r3, #32
 80100fe:	d104      	bne.n	801010a <__gethex+0x1e6>
 8010100:	f845 bb04 	str.w	fp, [r5], #4
 8010104:	f04f 0b00 	mov.w	fp, #0
 8010108:	465b      	mov	r3, fp
 801010a:	7830      	ldrb	r0, [r6, #0]
 801010c:	9303      	str	r3, [sp, #12]
 801010e:	f7ff fef3 	bl	800fef8 <__hexdig_fun>
 8010112:	9b03      	ldr	r3, [sp, #12]
 8010114:	f000 000f 	and.w	r0, r0, #15
 8010118:	4098      	lsls	r0, r3
 801011a:	ea4b 0b00 	orr.w	fp, fp, r0
 801011e:	3304      	adds	r3, #4
 8010120:	e7ae      	b.n	8010080 <__gethex+0x15c>
 8010122:	45b1      	cmp	r9, r6
 8010124:	d8ea      	bhi.n	80100fc <__gethex+0x1d8>
 8010126:	492b      	ldr	r1, [pc, #172]	@ (80101d4 <__gethex+0x2b0>)
 8010128:	9303      	str	r3, [sp, #12]
 801012a:	2201      	movs	r2, #1
 801012c:	4630      	mov	r0, r6
 801012e:	f7ff fe4b 	bl	800fdc8 <strncmp>
 8010132:	9b03      	ldr	r3, [sp, #12]
 8010134:	2800      	cmp	r0, #0
 8010136:	d1e1      	bne.n	80100fc <__gethex+0x1d8>
 8010138:	e7a2      	b.n	8010080 <__gethex+0x15c>
 801013a:	1ea9      	subs	r1, r5, #2
 801013c:	4620      	mov	r0, r4
 801013e:	f7fe fd7e 	bl	800ec3e <__any_on>
 8010142:	2800      	cmp	r0, #0
 8010144:	d0c2      	beq.n	80100cc <__gethex+0x1a8>
 8010146:	f04f 0903 	mov.w	r9, #3
 801014a:	e7c1      	b.n	80100d0 <__gethex+0x1ac>
 801014c:	da09      	bge.n	8010162 <__gethex+0x23e>
 801014e:	1b75      	subs	r5, r6, r5
 8010150:	4621      	mov	r1, r4
 8010152:	9801      	ldr	r0, [sp, #4]
 8010154:	462a      	mov	r2, r5
 8010156:	f7fe fb39 	bl	800e7cc <__lshift>
 801015a:	1b7f      	subs	r7, r7, r5
 801015c:	4604      	mov	r4, r0
 801015e:	f100 0a14 	add.w	sl, r0, #20
 8010162:	f04f 0900 	mov.w	r9, #0
 8010166:	e7b8      	b.n	80100da <__gethex+0x1b6>
 8010168:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801016c:	42bd      	cmp	r5, r7
 801016e:	dd6f      	ble.n	8010250 <__gethex+0x32c>
 8010170:	1bed      	subs	r5, r5, r7
 8010172:	42ae      	cmp	r6, r5
 8010174:	dc34      	bgt.n	80101e0 <__gethex+0x2bc>
 8010176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801017a:	2b02      	cmp	r3, #2
 801017c:	d022      	beq.n	80101c4 <__gethex+0x2a0>
 801017e:	2b03      	cmp	r3, #3
 8010180:	d024      	beq.n	80101cc <__gethex+0x2a8>
 8010182:	2b01      	cmp	r3, #1
 8010184:	d115      	bne.n	80101b2 <__gethex+0x28e>
 8010186:	42ae      	cmp	r6, r5
 8010188:	d113      	bne.n	80101b2 <__gethex+0x28e>
 801018a:	2e01      	cmp	r6, #1
 801018c:	d10b      	bne.n	80101a6 <__gethex+0x282>
 801018e:	9a02      	ldr	r2, [sp, #8]
 8010190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010194:	6013      	str	r3, [r2, #0]
 8010196:	2301      	movs	r3, #1
 8010198:	6123      	str	r3, [r4, #16]
 801019a:	f8ca 3000 	str.w	r3, [sl]
 801019e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101a0:	2562      	movs	r5, #98	@ 0x62
 80101a2:	601c      	str	r4, [r3, #0]
 80101a4:	e73a      	b.n	801001c <__gethex+0xf8>
 80101a6:	1e71      	subs	r1, r6, #1
 80101a8:	4620      	mov	r0, r4
 80101aa:	f7fe fd48 	bl	800ec3e <__any_on>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d1ed      	bne.n	801018e <__gethex+0x26a>
 80101b2:	9801      	ldr	r0, [sp, #4]
 80101b4:	4621      	mov	r1, r4
 80101b6:	f7fe f8f9 	bl	800e3ac <_Bfree>
 80101ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101bc:	2300      	movs	r3, #0
 80101be:	6013      	str	r3, [r2, #0]
 80101c0:	2550      	movs	r5, #80	@ 0x50
 80101c2:	e72b      	b.n	801001c <__gethex+0xf8>
 80101c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1f3      	bne.n	80101b2 <__gethex+0x28e>
 80101ca:	e7e0      	b.n	801018e <__gethex+0x26a>
 80101cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1dd      	bne.n	801018e <__gethex+0x26a>
 80101d2:	e7ee      	b.n	80101b2 <__gethex+0x28e>
 80101d4:	08011c53 	.word	0x08011c53
 80101d8:	08011be9 	.word	0x08011be9
 80101dc:	08011caa 	.word	0x08011caa
 80101e0:	1e6f      	subs	r7, r5, #1
 80101e2:	f1b9 0f00 	cmp.w	r9, #0
 80101e6:	d130      	bne.n	801024a <__gethex+0x326>
 80101e8:	b127      	cbz	r7, 80101f4 <__gethex+0x2d0>
 80101ea:	4639      	mov	r1, r7
 80101ec:	4620      	mov	r0, r4
 80101ee:	f7fe fd26 	bl	800ec3e <__any_on>
 80101f2:	4681      	mov	r9, r0
 80101f4:	117a      	asrs	r2, r7, #5
 80101f6:	2301      	movs	r3, #1
 80101f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80101fc:	f007 071f 	and.w	r7, r7, #31
 8010200:	40bb      	lsls	r3, r7
 8010202:	4213      	tst	r3, r2
 8010204:	4629      	mov	r1, r5
 8010206:	4620      	mov	r0, r4
 8010208:	bf18      	it	ne
 801020a:	f049 0902 	orrne.w	r9, r9, #2
 801020e:	f7ff fe21 	bl	800fe54 <rshift>
 8010212:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010216:	1b76      	subs	r6, r6, r5
 8010218:	2502      	movs	r5, #2
 801021a:	f1b9 0f00 	cmp.w	r9, #0
 801021e:	d047      	beq.n	80102b0 <__gethex+0x38c>
 8010220:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010224:	2b02      	cmp	r3, #2
 8010226:	d015      	beq.n	8010254 <__gethex+0x330>
 8010228:	2b03      	cmp	r3, #3
 801022a:	d017      	beq.n	801025c <__gethex+0x338>
 801022c:	2b01      	cmp	r3, #1
 801022e:	d109      	bne.n	8010244 <__gethex+0x320>
 8010230:	f019 0f02 	tst.w	r9, #2
 8010234:	d006      	beq.n	8010244 <__gethex+0x320>
 8010236:	f8da 3000 	ldr.w	r3, [sl]
 801023a:	ea49 0903 	orr.w	r9, r9, r3
 801023e:	f019 0f01 	tst.w	r9, #1
 8010242:	d10e      	bne.n	8010262 <__gethex+0x33e>
 8010244:	f045 0510 	orr.w	r5, r5, #16
 8010248:	e032      	b.n	80102b0 <__gethex+0x38c>
 801024a:	f04f 0901 	mov.w	r9, #1
 801024e:	e7d1      	b.n	80101f4 <__gethex+0x2d0>
 8010250:	2501      	movs	r5, #1
 8010252:	e7e2      	b.n	801021a <__gethex+0x2f6>
 8010254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010256:	f1c3 0301 	rsb	r3, r3, #1
 801025a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801025c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801025e:	2b00      	cmp	r3, #0
 8010260:	d0f0      	beq.n	8010244 <__gethex+0x320>
 8010262:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010266:	f104 0314 	add.w	r3, r4, #20
 801026a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801026e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010272:	f04f 0c00 	mov.w	ip, #0
 8010276:	4618      	mov	r0, r3
 8010278:	f853 2b04 	ldr.w	r2, [r3], #4
 801027c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010280:	d01b      	beq.n	80102ba <__gethex+0x396>
 8010282:	3201      	adds	r2, #1
 8010284:	6002      	str	r2, [r0, #0]
 8010286:	2d02      	cmp	r5, #2
 8010288:	f104 0314 	add.w	r3, r4, #20
 801028c:	d13c      	bne.n	8010308 <__gethex+0x3e4>
 801028e:	f8d8 2000 	ldr.w	r2, [r8]
 8010292:	3a01      	subs	r2, #1
 8010294:	42b2      	cmp	r2, r6
 8010296:	d109      	bne.n	80102ac <__gethex+0x388>
 8010298:	1171      	asrs	r1, r6, #5
 801029a:	2201      	movs	r2, #1
 801029c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102a0:	f006 061f 	and.w	r6, r6, #31
 80102a4:	fa02 f606 	lsl.w	r6, r2, r6
 80102a8:	421e      	tst	r6, r3
 80102aa:	d13a      	bne.n	8010322 <__gethex+0x3fe>
 80102ac:	f045 0520 	orr.w	r5, r5, #32
 80102b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102b2:	601c      	str	r4, [r3, #0]
 80102b4:	9b02      	ldr	r3, [sp, #8]
 80102b6:	601f      	str	r7, [r3, #0]
 80102b8:	e6b0      	b.n	801001c <__gethex+0xf8>
 80102ba:	4299      	cmp	r1, r3
 80102bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80102c0:	d8d9      	bhi.n	8010276 <__gethex+0x352>
 80102c2:	68a3      	ldr	r3, [r4, #8]
 80102c4:	459b      	cmp	fp, r3
 80102c6:	db17      	blt.n	80102f8 <__gethex+0x3d4>
 80102c8:	6861      	ldr	r1, [r4, #4]
 80102ca:	9801      	ldr	r0, [sp, #4]
 80102cc:	3101      	adds	r1, #1
 80102ce:	f7fe f82d 	bl	800e32c <_Balloc>
 80102d2:	4681      	mov	r9, r0
 80102d4:	b918      	cbnz	r0, 80102de <__gethex+0x3ba>
 80102d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010340 <__gethex+0x41c>)
 80102d8:	4602      	mov	r2, r0
 80102da:	2184      	movs	r1, #132	@ 0x84
 80102dc:	e6c5      	b.n	801006a <__gethex+0x146>
 80102de:	6922      	ldr	r2, [r4, #16]
 80102e0:	3202      	adds	r2, #2
 80102e2:	f104 010c 	add.w	r1, r4, #12
 80102e6:	0092      	lsls	r2, r2, #2
 80102e8:	300c      	adds	r0, #12
 80102ea:	f7ff fd7f 	bl	800fdec <memcpy>
 80102ee:	4621      	mov	r1, r4
 80102f0:	9801      	ldr	r0, [sp, #4]
 80102f2:	f7fe f85b 	bl	800e3ac <_Bfree>
 80102f6:	464c      	mov	r4, r9
 80102f8:	6923      	ldr	r3, [r4, #16]
 80102fa:	1c5a      	adds	r2, r3, #1
 80102fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010300:	6122      	str	r2, [r4, #16]
 8010302:	2201      	movs	r2, #1
 8010304:	615a      	str	r2, [r3, #20]
 8010306:	e7be      	b.n	8010286 <__gethex+0x362>
 8010308:	6922      	ldr	r2, [r4, #16]
 801030a:	455a      	cmp	r2, fp
 801030c:	dd0b      	ble.n	8010326 <__gethex+0x402>
 801030e:	2101      	movs	r1, #1
 8010310:	4620      	mov	r0, r4
 8010312:	f7ff fd9f 	bl	800fe54 <rshift>
 8010316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801031a:	3701      	adds	r7, #1
 801031c:	42bb      	cmp	r3, r7
 801031e:	f6ff aee0 	blt.w	80100e2 <__gethex+0x1be>
 8010322:	2501      	movs	r5, #1
 8010324:	e7c2      	b.n	80102ac <__gethex+0x388>
 8010326:	f016 061f 	ands.w	r6, r6, #31
 801032a:	d0fa      	beq.n	8010322 <__gethex+0x3fe>
 801032c:	4453      	add	r3, sl
 801032e:	f1c6 0620 	rsb	r6, r6, #32
 8010332:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010336:	f7fe f8eb 	bl	800e510 <__hi0bits>
 801033a:	42b0      	cmp	r0, r6
 801033c:	dbe7      	blt.n	801030e <__gethex+0x3ea>
 801033e:	e7f0      	b.n	8010322 <__gethex+0x3fe>
 8010340:	08011be9 	.word	0x08011be9

08010344 <L_shift>:
 8010344:	f1c2 0208 	rsb	r2, r2, #8
 8010348:	0092      	lsls	r2, r2, #2
 801034a:	b570      	push	{r4, r5, r6, lr}
 801034c:	f1c2 0620 	rsb	r6, r2, #32
 8010350:	6843      	ldr	r3, [r0, #4]
 8010352:	6804      	ldr	r4, [r0, #0]
 8010354:	fa03 f506 	lsl.w	r5, r3, r6
 8010358:	432c      	orrs	r4, r5
 801035a:	40d3      	lsrs	r3, r2
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010362:	4288      	cmp	r0, r1
 8010364:	d3f4      	bcc.n	8010350 <L_shift+0xc>
 8010366:	bd70      	pop	{r4, r5, r6, pc}

08010368 <__match>:
 8010368:	b530      	push	{r4, r5, lr}
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	3301      	adds	r3, #1
 801036e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010372:	b914      	cbnz	r4, 801037a <__match+0x12>
 8010374:	6003      	str	r3, [r0, #0]
 8010376:	2001      	movs	r0, #1
 8010378:	bd30      	pop	{r4, r5, pc}
 801037a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801037e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010382:	2d19      	cmp	r5, #25
 8010384:	bf98      	it	ls
 8010386:	3220      	addls	r2, #32
 8010388:	42a2      	cmp	r2, r4
 801038a:	d0f0      	beq.n	801036e <__match+0x6>
 801038c:	2000      	movs	r0, #0
 801038e:	e7f3      	b.n	8010378 <__match+0x10>

08010390 <__hexnan>:
 8010390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010394:	680b      	ldr	r3, [r1, #0]
 8010396:	6801      	ldr	r1, [r0, #0]
 8010398:	115e      	asrs	r6, r3, #5
 801039a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801039e:	f013 031f 	ands.w	r3, r3, #31
 80103a2:	b087      	sub	sp, #28
 80103a4:	bf18      	it	ne
 80103a6:	3604      	addne	r6, #4
 80103a8:	2500      	movs	r5, #0
 80103aa:	1f37      	subs	r7, r6, #4
 80103ac:	4682      	mov	sl, r0
 80103ae:	4690      	mov	r8, r2
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80103b6:	46b9      	mov	r9, r7
 80103b8:	463c      	mov	r4, r7
 80103ba:	9502      	str	r5, [sp, #8]
 80103bc:	46ab      	mov	fp, r5
 80103be:	784a      	ldrb	r2, [r1, #1]
 80103c0:	1c4b      	adds	r3, r1, #1
 80103c2:	9303      	str	r3, [sp, #12]
 80103c4:	b342      	cbz	r2, 8010418 <__hexnan+0x88>
 80103c6:	4610      	mov	r0, r2
 80103c8:	9105      	str	r1, [sp, #20]
 80103ca:	9204      	str	r2, [sp, #16]
 80103cc:	f7ff fd94 	bl	800fef8 <__hexdig_fun>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d151      	bne.n	8010478 <__hexnan+0xe8>
 80103d4:	9a04      	ldr	r2, [sp, #16]
 80103d6:	9905      	ldr	r1, [sp, #20]
 80103d8:	2a20      	cmp	r2, #32
 80103da:	d818      	bhi.n	801040e <__hexnan+0x7e>
 80103dc:	9b02      	ldr	r3, [sp, #8]
 80103de:	459b      	cmp	fp, r3
 80103e0:	dd13      	ble.n	801040a <__hexnan+0x7a>
 80103e2:	454c      	cmp	r4, r9
 80103e4:	d206      	bcs.n	80103f4 <__hexnan+0x64>
 80103e6:	2d07      	cmp	r5, #7
 80103e8:	dc04      	bgt.n	80103f4 <__hexnan+0x64>
 80103ea:	462a      	mov	r2, r5
 80103ec:	4649      	mov	r1, r9
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7ff ffa8 	bl	8010344 <L_shift>
 80103f4:	4544      	cmp	r4, r8
 80103f6:	d952      	bls.n	801049e <__hexnan+0x10e>
 80103f8:	2300      	movs	r3, #0
 80103fa:	f1a4 0904 	sub.w	r9, r4, #4
 80103fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010402:	f8cd b008 	str.w	fp, [sp, #8]
 8010406:	464c      	mov	r4, r9
 8010408:	461d      	mov	r5, r3
 801040a:	9903      	ldr	r1, [sp, #12]
 801040c:	e7d7      	b.n	80103be <__hexnan+0x2e>
 801040e:	2a29      	cmp	r2, #41	@ 0x29
 8010410:	d157      	bne.n	80104c2 <__hexnan+0x132>
 8010412:	3102      	adds	r1, #2
 8010414:	f8ca 1000 	str.w	r1, [sl]
 8010418:	f1bb 0f00 	cmp.w	fp, #0
 801041c:	d051      	beq.n	80104c2 <__hexnan+0x132>
 801041e:	454c      	cmp	r4, r9
 8010420:	d206      	bcs.n	8010430 <__hexnan+0xa0>
 8010422:	2d07      	cmp	r5, #7
 8010424:	dc04      	bgt.n	8010430 <__hexnan+0xa0>
 8010426:	462a      	mov	r2, r5
 8010428:	4649      	mov	r1, r9
 801042a:	4620      	mov	r0, r4
 801042c:	f7ff ff8a 	bl	8010344 <L_shift>
 8010430:	4544      	cmp	r4, r8
 8010432:	d936      	bls.n	80104a2 <__hexnan+0x112>
 8010434:	f1a8 0204 	sub.w	r2, r8, #4
 8010438:	4623      	mov	r3, r4
 801043a:	f853 1b04 	ldr.w	r1, [r3], #4
 801043e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010442:	429f      	cmp	r7, r3
 8010444:	d2f9      	bcs.n	801043a <__hexnan+0xaa>
 8010446:	1b3b      	subs	r3, r7, r4
 8010448:	f023 0303 	bic.w	r3, r3, #3
 801044c:	3304      	adds	r3, #4
 801044e:	3401      	adds	r4, #1
 8010450:	3e03      	subs	r6, #3
 8010452:	42b4      	cmp	r4, r6
 8010454:	bf88      	it	hi
 8010456:	2304      	movhi	r3, #4
 8010458:	4443      	add	r3, r8
 801045a:	2200      	movs	r2, #0
 801045c:	f843 2b04 	str.w	r2, [r3], #4
 8010460:	429f      	cmp	r7, r3
 8010462:	d2fb      	bcs.n	801045c <__hexnan+0xcc>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	b91b      	cbnz	r3, 8010470 <__hexnan+0xe0>
 8010468:	4547      	cmp	r7, r8
 801046a:	d128      	bne.n	80104be <__hexnan+0x12e>
 801046c:	2301      	movs	r3, #1
 801046e:	603b      	str	r3, [r7, #0]
 8010470:	2005      	movs	r0, #5
 8010472:	b007      	add	sp, #28
 8010474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010478:	3501      	adds	r5, #1
 801047a:	2d08      	cmp	r5, #8
 801047c:	f10b 0b01 	add.w	fp, fp, #1
 8010480:	dd06      	ble.n	8010490 <__hexnan+0x100>
 8010482:	4544      	cmp	r4, r8
 8010484:	d9c1      	bls.n	801040a <__hexnan+0x7a>
 8010486:	2300      	movs	r3, #0
 8010488:	f844 3c04 	str.w	r3, [r4, #-4]
 801048c:	2501      	movs	r5, #1
 801048e:	3c04      	subs	r4, #4
 8010490:	6822      	ldr	r2, [r4, #0]
 8010492:	f000 000f 	and.w	r0, r0, #15
 8010496:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801049a:	6020      	str	r0, [r4, #0]
 801049c:	e7b5      	b.n	801040a <__hexnan+0x7a>
 801049e:	2508      	movs	r5, #8
 80104a0:	e7b3      	b.n	801040a <__hexnan+0x7a>
 80104a2:	9b01      	ldr	r3, [sp, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d0dd      	beq.n	8010464 <__hexnan+0xd4>
 80104a8:	f1c3 0320 	rsb	r3, r3, #32
 80104ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80104b0:	40da      	lsrs	r2, r3
 80104b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80104b6:	4013      	ands	r3, r2
 80104b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80104bc:	e7d2      	b.n	8010464 <__hexnan+0xd4>
 80104be:	3f04      	subs	r7, #4
 80104c0:	e7d0      	b.n	8010464 <__hexnan+0xd4>
 80104c2:	2004      	movs	r0, #4
 80104c4:	e7d5      	b.n	8010472 <__hexnan+0xe2>

080104c6 <__ascii_mbtowc>:
 80104c6:	b082      	sub	sp, #8
 80104c8:	b901      	cbnz	r1, 80104cc <__ascii_mbtowc+0x6>
 80104ca:	a901      	add	r1, sp, #4
 80104cc:	b142      	cbz	r2, 80104e0 <__ascii_mbtowc+0x1a>
 80104ce:	b14b      	cbz	r3, 80104e4 <__ascii_mbtowc+0x1e>
 80104d0:	7813      	ldrb	r3, [r2, #0]
 80104d2:	600b      	str	r3, [r1, #0]
 80104d4:	7812      	ldrb	r2, [r2, #0]
 80104d6:	1e10      	subs	r0, r2, #0
 80104d8:	bf18      	it	ne
 80104da:	2001      	movne	r0, #1
 80104dc:	b002      	add	sp, #8
 80104de:	4770      	bx	lr
 80104e0:	4610      	mov	r0, r2
 80104e2:	e7fb      	b.n	80104dc <__ascii_mbtowc+0x16>
 80104e4:	f06f 0001 	mvn.w	r0, #1
 80104e8:	e7f8      	b.n	80104dc <__ascii_mbtowc+0x16>

080104ea <_realloc_r>:
 80104ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ee:	4607      	mov	r7, r0
 80104f0:	4614      	mov	r4, r2
 80104f2:	460d      	mov	r5, r1
 80104f4:	b921      	cbnz	r1, 8010500 <_realloc_r+0x16>
 80104f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104fa:	4611      	mov	r1, r2
 80104fc:	f7fb bfbe 	b.w	800c47c <_malloc_r>
 8010500:	b92a      	cbnz	r2, 801050e <_realloc_r+0x24>
 8010502:	f7fd fec1 	bl	800e288 <_free_r>
 8010506:	4625      	mov	r5, r4
 8010508:	4628      	mov	r0, r5
 801050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801050e:	f000 f840 	bl	8010592 <_malloc_usable_size_r>
 8010512:	4284      	cmp	r4, r0
 8010514:	4606      	mov	r6, r0
 8010516:	d802      	bhi.n	801051e <_realloc_r+0x34>
 8010518:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801051c:	d8f4      	bhi.n	8010508 <_realloc_r+0x1e>
 801051e:	4621      	mov	r1, r4
 8010520:	4638      	mov	r0, r7
 8010522:	f7fb ffab 	bl	800c47c <_malloc_r>
 8010526:	4680      	mov	r8, r0
 8010528:	b908      	cbnz	r0, 801052e <_realloc_r+0x44>
 801052a:	4645      	mov	r5, r8
 801052c:	e7ec      	b.n	8010508 <_realloc_r+0x1e>
 801052e:	42b4      	cmp	r4, r6
 8010530:	4622      	mov	r2, r4
 8010532:	4629      	mov	r1, r5
 8010534:	bf28      	it	cs
 8010536:	4632      	movcs	r2, r6
 8010538:	f7ff fc58 	bl	800fdec <memcpy>
 801053c:	4629      	mov	r1, r5
 801053e:	4638      	mov	r0, r7
 8010540:	f7fd fea2 	bl	800e288 <_free_r>
 8010544:	e7f1      	b.n	801052a <_realloc_r+0x40>

08010546 <__ascii_wctomb>:
 8010546:	4603      	mov	r3, r0
 8010548:	4608      	mov	r0, r1
 801054a:	b141      	cbz	r1, 801055e <__ascii_wctomb+0x18>
 801054c:	2aff      	cmp	r2, #255	@ 0xff
 801054e:	d904      	bls.n	801055a <__ascii_wctomb+0x14>
 8010550:	228a      	movs	r2, #138	@ 0x8a
 8010552:	601a      	str	r2, [r3, #0]
 8010554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010558:	4770      	bx	lr
 801055a:	700a      	strb	r2, [r1, #0]
 801055c:	2001      	movs	r0, #1
 801055e:	4770      	bx	lr

08010560 <fiprintf>:
 8010560:	b40e      	push	{r1, r2, r3}
 8010562:	b503      	push	{r0, r1, lr}
 8010564:	4601      	mov	r1, r0
 8010566:	ab03      	add	r3, sp, #12
 8010568:	4805      	ldr	r0, [pc, #20]	@ (8010580 <fiprintf+0x20>)
 801056a:	f853 2b04 	ldr.w	r2, [r3], #4
 801056e:	6800      	ldr	r0, [r0, #0]
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	f000 f83f 	bl	80105f4 <_vfiprintf_r>
 8010576:	b002      	add	sp, #8
 8010578:	f85d eb04 	ldr.w	lr, [sp], #4
 801057c:	b003      	add	sp, #12
 801057e:	4770      	bx	lr
 8010580:	20000030 	.word	0x20000030

08010584 <abort>:
 8010584:	b508      	push	{r3, lr}
 8010586:	2006      	movs	r0, #6
 8010588:	f000 fa08 	bl	801099c <raise>
 801058c:	2001      	movs	r0, #1
 801058e:	f7f1 fe0d 	bl	80021ac <_exit>

08010592 <_malloc_usable_size_r>:
 8010592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010596:	1f18      	subs	r0, r3, #4
 8010598:	2b00      	cmp	r3, #0
 801059a:	bfbc      	itt	lt
 801059c:	580b      	ldrlt	r3, [r1, r0]
 801059e:	18c0      	addlt	r0, r0, r3
 80105a0:	4770      	bx	lr

080105a2 <__sfputc_r>:
 80105a2:	6893      	ldr	r3, [r2, #8]
 80105a4:	3b01      	subs	r3, #1
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	b410      	push	{r4}
 80105aa:	6093      	str	r3, [r2, #8]
 80105ac:	da08      	bge.n	80105c0 <__sfputc_r+0x1e>
 80105ae:	6994      	ldr	r4, [r2, #24]
 80105b0:	42a3      	cmp	r3, r4
 80105b2:	db01      	blt.n	80105b8 <__sfputc_r+0x16>
 80105b4:	290a      	cmp	r1, #10
 80105b6:	d103      	bne.n	80105c0 <__sfputc_r+0x1e>
 80105b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105bc:	f000 b932 	b.w	8010824 <__swbuf_r>
 80105c0:	6813      	ldr	r3, [r2, #0]
 80105c2:	1c58      	adds	r0, r3, #1
 80105c4:	6010      	str	r0, [r2, #0]
 80105c6:	7019      	strb	r1, [r3, #0]
 80105c8:	4608      	mov	r0, r1
 80105ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <__sfputs_r>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	4606      	mov	r6, r0
 80105d4:	460f      	mov	r7, r1
 80105d6:	4614      	mov	r4, r2
 80105d8:	18d5      	adds	r5, r2, r3
 80105da:	42ac      	cmp	r4, r5
 80105dc:	d101      	bne.n	80105e2 <__sfputs_r+0x12>
 80105de:	2000      	movs	r0, #0
 80105e0:	e007      	b.n	80105f2 <__sfputs_r+0x22>
 80105e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105e6:	463a      	mov	r2, r7
 80105e8:	4630      	mov	r0, r6
 80105ea:	f7ff ffda 	bl	80105a2 <__sfputc_r>
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d1f3      	bne.n	80105da <__sfputs_r+0xa>
 80105f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080105f4 <_vfiprintf_r>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	460d      	mov	r5, r1
 80105fa:	b09d      	sub	sp, #116	@ 0x74
 80105fc:	4614      	mov	r4, r2
 80105fe:	4698      	mov	r8, r3
 8010600:	4606      	mov	r6, r0
 8010602:	b118      	cbz	r0, 801060c <_vfiprintf_r+0x18>
 8010604:	6a03      	ldr	r3, [r0, #32]
 8010606:	b90b      	cbnz	r3, 801060c <_vfiprintf_r+0x18>
 8010608:	f7fc feb4 	bl	800d374 <__sinit>
 801060c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801060e:	07d9      	lsls	r1, r3, #31
 8010610:	d405      	bmi.n	801061e <_vfiprintf_r+0x2a>
 8010612:	89ab      	ldrh	r3, [r5, #12]
 8010614:	059a      	lsls	r2, r3, #22
 8010616:	d402      	bmi.n	801061e <_vfiprintf_r+0x2a>
 8010618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801061a:	f7fc ffd4 	bl	800d5c6 <__retarget_lock_acquire_recursive>
 801061e:	89ab      	ldrh	r3, [r5, #12]
 8010620:	071b      	lsls	r3, r3, #28
 8010622:	d501      	bpl.n	8010628 <_vfiprintf_r+0x34>
 8010624:	692b      	ldr	r3, [r5, #16]
 8010626:	b99b      	cbnz	r3, 8010650 <_vfiprintf_r+0x5c>
 8010628:	4629      	mov	r1, r5
 801062a:	4630      	mov	r0, r6
 801062c:	f000 f938 	bl	80108a0 <__swsetup_r>
 8010630:	b170      	cbz	r0, 8010650 <_vfiprintf_r+0x5c>
 8010632:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010634:	07dc      	lsls	r4, r3, #31
 8010636:	d504      	bpl.n	8010642 <_vfiprintf_r+0x4e>
 8010638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801063c:	b01d      	add	sp, #116	@ 0x74
 801063e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	0598      	lsls	r0, r3, #22
 8010646:	d4f7      	bmi.n	8010638 <_vfiprintf_r+0x44>
 8010648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801064a:	f7fc ffbd 	bl	800d5c8 <__retarget_lock_release_recursive>
 801064e:	e7f3      	b.n	8010638 <_vfiprintf_r+0x44>
 8010650:	2300      	movs	r3, #0
 8010652:	9309      	str	r3, [sp, #36]	@ 0x24
 8010654:	2320      	movs	r3, #32
 8010656:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801065a:	f8cd 800c 	str.w	r8, [sp, #12]
 801065e:	2330      	movs	r3, #48	@ 0x30
 8010660:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010810 <_vfiprintf_r+0x21c>
 8010664:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010668:	f04f 0901 	mov.w	r9, #1
 801066c:	4623      	mov	r3, r4
 801066e:	469a      	mov	sl, r3
 8010670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010674:	b10a      	cbz	r2, 801067a <_vfiprintf_r+0x86>
 8010676:	2a25      	cmp	r2, #37	@ 0x25
 8010678:	d1f9      	bne.n	801066e <_vfiprintf_r+0x7a>
 801067a:	ebba 0b04 	subs.w	fp, sl, r4
 801067e:	d00b      	beq.n	8010698 <_vfiprintf_r+0xa4>
 8010680:	465b      	mov	r3, fp
 8010682:	4622      	mov	r2, r4
 8010684:	4629      	mov	r1, r5
 8010686:	4630      	mov	r0, r6
 8010688:	f7ff ffa2 	bl	80105d0 <__sfputs_r>
 801068c:	3001      	adds	r0, #1
 801068e:	f000 80a7 	beq.w	80107e0 <_vfiprintf_r+0x1ec>
 8010692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010694:	445a      	add	r2, fp
 8010696:	9209      	str	r2, [sp, #36]	@ 0x24
 8010698:	f89a 3000 	ldrb.w	r3, [sl]
 801069c:	2b00      	cmp	r3, #0
 801069e:	f000 809f 	beq.w	80107e0 <_vfiprintf_r+0x1ec>
 80106a2:	2300      	movs	r3, #0
 80106a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80106a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106ac:	f10a 0a01 	add.w	sl, sl, #1
 80106b0:	9304      	str	r3, [sp, #16]
 80106b2:	9307      	str	r3, [sp, #28]
 80106b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80106ba:	4654      	mov	r4, sl
 80106bc:	2205      	movs	r2, #5
 80106be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106c2:	4853      	ldr	r0, [pc, #332]	@ (8010810 <_vfiprintf_r+0x21c>)
 80106c4:	f7ef fda4 	bl	8000210 <memchr>
 80106c8:	9a04      	ldr	r2, [sp, #16]
 80106ca:	b9d8      	cbnz	r0, 8010704 <_vfiprintf_r+0x110>
 80106cc:	06d1      	lsls	r1, r2, #27
 80106ce:	bf44      	itt	mi
 80106d0:	2320      	movmi	r3, #32
 80106d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106d6:	0713      	lsls	r3, r2, #28
 80106d8:	bf44      	itt	mi
 80106da:	232b      	movmi	r3, #43	@ 0x2b
 80106dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106e0:	f89a 3000 	ldrb.w	r3, [sl]
 80106e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80106e6:	d015      	beq.n	8010714 <_vfiprintf_r+0x120>
 80106e8:	9a07      	ldr	r2, [sp, #28]
 80106ea:	4654      	mov	r4, sl
 80106ec:	2000      	movs	r0, #0
 80106ee:	f04f 0c0a 	mov.w	ip, #10
 80106f2:	4621      	mov	r1, r4
 80106f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106f8:	3b30      	subs	r3, #48	@ 0x30
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	d94b      	bls.n	8010796 <_vfiprintf_r+0x1a2>
 80106fe:	b1b0      	cbz	r0, 801072e <_vfiprintf_r+0x13a>
 8010700:	9207      	str	r2, [sp, #28]
 8010702:	e014      	b.n	801072e <_vfiprintf_r+0x13a>
 8010704:	eba0 0308 	sub.w	r3, r0, r8
 8010708:	fa09 f303 	lsl.w	r3, r9, r3
 801070c:	4313      	orrs	r3, r2
 801070e:	9304      	str	r3, [sp, #16]
 8010710:	46a2      	mov	sl, r4
 8010712:	e7d2      	b.n	80106ba <_vfiprintf_r+0xc6>
 8010714:	9b03      	ldr	r3, [sp, #12]
 8010716:	1d19      	adds	r1, r3, #4
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	9103      	str	r1, [sp, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	bfbb      	ittet	lt
 8010720:	425b      	neglt	r3, r3
 8010722:	f042 0202 	orrlt.w	r2, r2, #2
 8010726:	9307      	strge	r3, [sp, #28]
 8010728:	9307      	strlt	r3, [sp, #28]
 801072a:	bfb8      	it	lt
 801072c:	9204      	strlt	r2, [sp, #16]
 801072e:	7823      	ldrb	r3, [r4, #0]
 8010730:	2b2e      	cmp	r3, #46	@ 0x2e
 8010732:	d10a      	bne.n	801074a <_vfiprintf_r+0x156>
 8010734:	7863      	ldrb	r3, [r4, #1]
 8010736:	2b2a      	cmp	r3, #42	@ 0x2a
 8010738:	d132      	bne.n	80107a0 <_vfiprintf_r+0x1ac>
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	1d1a      	adds	r2, r3, #4
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	9203      	str	r2, [sp, #12]
 8010742:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010746:	3402      	adds	r4, #2
 8010748:	9305      	str	r3, [sp, #20]
 801074a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010820 <_vfiprintf_r+0x22c>
 801074e:	7821      	ldrb	r1, [r4, #0]
 8010750:	2203      	movs	r2, #3
 8010752:	4650      	mov	r0, sl
 8010754:	f7ef fd5c 	bl	8000210 <memchr>
 8010758:	b138      	cbz	r0, 801076a <_vfiprintf_r+0x176>
 801075a:	9b04      	ldr	r3, [sp, #16]
 801075c:	eba0 000a 	sub.w	r0, r0, sl
 8010760:	2240      	movs	r2, #64	@ 0x40
 8010762:	4082      	lsls	r2, r0
 8010764:	4313      	orrs	r3, r2
 8010766:	3401      	adds	r4, #1
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801076e:	4829      	ldr	r0, [pc, #164]	@ (8010814 <_vfiprintf_r+0x220>)
 8010770:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010774:	2206      	movs	r2, #6
 8010776:	f7ef fd4b 	bl	8000210 <memchr>
 801077a:	2800      	cmp	r0, #0
 801077c:	d03f      	beq.n	80107fe <_vfiprintf_r+0x20a>
 801077e:	4b26      	ldr	r3, [pc, #152]	@ (8010818 <_vfiprintf_r+0x224>)
 8010780:	bb1b      	cbnz	r3, 80107ca <_vfiprintf_r+0x1d6>
 8010782:	9b03      	ldr	r3, [sp, #12]
 8010784:	3307      	adds	r3, #7
 8010786:	f023 0307 	bic.w	r3, r3, #7
 801078a:	3308      	adds	r3, #8
 801078c:	9303      	str	r3, [sp, #12]
 801078e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010790:	443b      	add	r3, r7
 8010792:	9309      	str	r3, [sp, #36]	@ 0x24
 8010794:	e76a      	b.n	801066c <_vfiprintf_r+0x78>
 8010796:	fb0c 3202 	mla	r2, ip, r2, r3
 801079a:	460c      	mov	r4, r1
 801079c:	2001      	movs	r0, #1
 801079e:	e7a8      	b.n	80106f2 <_vfiprintf_r+0xfe>
 80107a0:	2300      	movs	r3, #0
 80107a2:	3401      	adds	r4, #1
 80107a4:	9305      	str	r3, [sp, #20]
 80107a6:	4619      	mov	r1, r3
 80107a8:	f04f 0c0a 	mov.w	ip, #10
 80107ac:	4620      	mov	r0, r4
 80107ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107b2:	3a30      	subs	r2, #48	@ 0x30
 80107b4:	2a09      	cmp	r2, #9
 80107b6:	d903      	bls.n	80107c0 <_vfiprintf_r+0x1cc>
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d0c6      	beq.n	801074a <_vfiprintf_r+0x156>
 80107bc:	9105      	str	r1, [sp, #20]
 80107be:	e7c4      	b.n	801074a <_vfiprintf_r+0x156>
 80107c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80107c4:	4604      	mov	r4, r0
 80107c6:	2301      	movs	r3, #1
 80107c8:	e7f0      	b.n	80107ac <_vfiprintf_r+0x1b8>
 80107ca:	ab03      	add	r3, sp, #12
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	462a      	mov	r2, r5
 80107d0:	4b12      	ldr	r3, [pc, #72]	@ (801081c <_vfiprintf_r+0x228>)
 80107d2:	a904      	add	r1, sp, #16
 80107d4:	4630      	mov	r0, r6
 80107d6:	f7fb ff7d 	bl	800c6d4 <_printf_float>
 80107da:	4607      	mov	r7, r0
 80107dc:	1c78      	adds	r0, r7, #1
 80107de:	d1d6      	bne.n	801078e <_vfiprintf_r+0x19a>
 80107e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107e2:	07d9      	lsls	r1, r3, #31
 80107e4:	d405      	bmi.n	80107f2 <_vfiprintf_r+0x1fe>
 80107e6:	89ab      	ldrh	r3, [r5, #12]
 80107e8:	059a      	lsls	r2, r3, #22
 80107ea:	d402      	bmi.n	80107f2 <_vfiprintf_r+0x1fe>
 80107ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107ee:	f7fc feeb 	bl	800d5c8 <__retarget_lock_release_recursive>
 80107f2:	89ab      	ldrh	r3, [r5, #12]
 80107f4:	065b      	lsls	r3, r3, #25
 80107f6:	f53f af1f 	bmi.w	8010638 <_vfiprintf_r+0x44>
 80107fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107fc:	e71e      	b.n	801063c <_vfiprintf_r+0x48>
 80107fe:	ab03      	add	r3, sp, #12
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	462a      	mov	r2, r5
 8010804:	4b05      	ldr	r3, [pc, #20]	@ (801081c <_vfiprintf_r+0x228>)
 8010806:	a904      	add	r1, sp, #16
 8010808:	4630      	mov	r0, r6
 801080a:	f7fc f9fb 	bl	800cc04 <_printf_i>
 801080e:	e7e4      	b.n	80107da <_vfiprintf_r+0x1e6>
 8010810:	08011c55 	.word	0x08011c55
 8010814:	08011c5f 	.word	0x08011c5f
 8010818:	0800c6d5 	.word	0x0800c6d5
 801081c:	080105d1 	.word	0x080105d1
 8010820:	08011c5b 	.word	0x08011c5b

08010824 <__swbuf_r>:
 8010824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010826:	460e      	mov	r6, r1
 8010828:	4614      	mov	r4, r2
 801082a:	4605      	mov	r5, r0
 801082c:	b118      	cbz	r0, 8010836 <__swbuf_r+0x12>
 801082e:	6a03      	ldr	r3, [r0, #32]
 8010830:	b90b      	cbnz	r3, 8010836 <__swbuf_r+0x12>
 8010832:	f7fc fd9f 	bl	800d374 <__sinit>
 8010836:	69a3      	ldr	r3, [r4, #24]
 8010838:	60a3      	str	r3, [r4, #8]
 801083a:	89a3      	ldrh	r3, [r4, #12]
 801083c:	071a      	lsls	r2, r3, #28
 801083e:	d501      	bpl.n	8010844 <__swbuf_r+0x20>
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	b943      	cbnz	r3, 8010856 <__swbuf_r+0x32>
 8010844:	4621      	mov	r1, r4
 8010846:	4628      	mov	r0, r5
 8010848:	f000 f82a 	bl	80108a0 <__swsetup_r>
 801084c:	b118      	cbz	r0, 8010856 <__swbuf_r+0x32>
 801084e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010852:	4638      	mov	r0, r7
 8010854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	6922      	ldr	r2, [r4, #16]
 801085a:	1a98      	subs	r0, r3, r2
 801085c:	6963      	ldr	r3, [r4, #20]
 801085e:	b2f6      	uxtb	r6, r6
 8010860:	4283      	cmp	r3, r0
 8010862:	4637      	mov	r7, r6
 8010864:	dc05      	bgt.n	8010872 <__swbuf_r+0x4e>
 8010866:	4621      	mov	r1, r4
 8010868:	4628      	mov	r0, r5
 801086a:	f7ff fa6b 	bl	800fd44 <_fflush_r>
 801086e:	2800      	cmp	r0, #0
 8010870:	d1ed      	bne.n	801084e <__swbuf_r+0x2a>
 8010872:	68a3      	ldr	r3, [r4, #8]
 8010874:	3b01      	subs	r3, #1
 8010876:	60a3      	str	r3, [r4, #8]
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	1c5a      	adds	r2, r3, #1
 801087c:	6022      	str	r2, [r4, #0]
 801087e:	701e      	strb	r6, [r3, #0]
 8010880:	6962      	ldr	r2, [r4, #20]
 8010882:	1c43      	adds	r3, r0, #1
 8010884:	429a      	cmp	r2, r3
 8010886:	d004      	beq.n	8010892 <__swbuf_r+0x6e>
 8010888:	89a3      	ldrh	r3, [r4, #12]
 801088a:	07db      	lsls	r3, r3, #31
 801088c:	d5e1      	bpl.n	8010852 <__swbuf_r+0x2e>
 801088e:	2e0a      	cmp	r6, #10
 8010890:	d1df      	bne.n	8010852 <__swbuf_r+0x2e>
 8010892:	4621      	mov	r1, r4
 8010894:	4628      	mov	r0, r5
 8010896:	f7ff fa55 	bl	800fd44 <_fflush_r>
 801089a:	2800      	cmp	r0, #0
 801089c:	d0d9      	beq.n	8010852 <__swbuf_r+0x2e>
 801089e:	e7d6      	b.n	801084e <__swbuf_r+0x2a>

080108a0 <__swsetup_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	4b29      	ldr	r3, [pc, #164]	@ (8010948 <__swsetup_r+0xa8>)
 80108a4:	4605      	mov	r5, r0
 80108a6:	6818      	ldr	r0, [r3, #0]
 80108a8:	460c      	mov	r4, r1
 80108aa:	b118      	cbz	r0, 80108b4 <__swsetup_r+0x14>
 80108ac:	6a03      	ldr	r3, [r0, #32]
 80108ae:	b90b      	cbnz	r3, 80108b4 <__swsetup_r+0x14>
 80108b0:	f7fc fd60 	bl	800d374 <__sinit>
 80108b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108b8:	0719      	lsls	r1, r3, #28
 80108ba:	d422      	bmi.n	8010902 <__swsetup_r+0x62>
 80108bc:	06da      	lsls	r2, r3, #27
 80108be:	d407      	bmi.n	80108d0 <__swsetup_r+0x30>
 80108c0:	2209      	movs	r2, #9
 80108c2:	602a      	str	r2, [r5, #0]
 80108c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108c8:	81a3      	strh	r3, [r4, #12]
 80108ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108ce:	e033      	b.n	8010938 <__swsetup_r+0x98>
 80108d0:	0758      	lsls	r0, r3, #29
 80108d2:	d512      	bpl.n	80108fa <__swsetup_r+0x5a>
 80108d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108d6:	b141      	cbz	r1, 80108ea <__swsetup_r+0x4a>
 80108d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108dc:	4299      	cmp	r1, r3
 80108de:	d002      	beq.n	80108e6 <__swsetup_r+0x46>
 80108e0:	4628      	mov	r0, r5
 80108e2:	f7fd fcd1 	bl	800e288 <_free_r>
 80108e6:	2300      	movs	r3, #0
 80108e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80108ea:	89a3      	ldrh	r3, [r4, #12]
 80108ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80108f0:	81a3      	strh	r3, [r4, #12]
 80108f2:	2300      	movs	r3, #0
 80108f4:	6063      	str	r3, [r4, #4]
 80108f6:	6923      	ldr	r3, [r4, #16]
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f043 0308 	orr.w	r3, r3, #8
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	6923      	ldr	r3, [r4, #16]
 8010904:	b94b      	cbnz	r3, 801091a <__swsetup_r+0x7a>
 8010906:	89a3      	ldrh	r3, [r4, #12]
 8010908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801090c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010910:	d003      	beq.n	801091a <__swsetup_r+0x7a>
 8010912:	4621      	mov	r1, r4
 8010914:	4628      	mov	r0, r5
 8010916:	f000 f883 	bl	8010a20 <__smakebuf_r>
 801091a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801091e:	f013 0201 	ands.w	r2, r3, #1
 8010922:	d00a      	beq.n	801093a <__swsetup_r+0x9a>
 8010924:	2200      	movs	r2, #0
 8010926:	60a2      	str	r2, [r4, #8]
 8010928:	6962      	ldr	r2, [r4, #20]
 801092a:	4252      	negs	r2, r2
 801092c:	61a2      	str	r2, [r4, #24]
 801092e:	6922      	ldr	r2, [r4, #16]
 8010930:	b942      	cbnz	r2, 8010944 <__swsetup_r+0xa4>
 8010932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010936:	d1c5      	bne.n	80108c4 <__swsetup_r+0x24>
 8010938:	bd38      	pop	{r3, r4, r5, pc}
 801093a:	0799      	lsls	r1, r3, #30
 801093c:	bf58      	it	pl
 801093e:	6962      	ldrpl	r2, [r4, #20]
 8010940:	60a2      	str	r2, [r4, #8]
 8010942:	e7f4      	b.n	801092e <__swsetup_r+0x8e>
 8010944:	2000      	movs	r0, #0
 8010946:	e7f7      	b.n	8010938 <__swsetup_r+0x98>
 8010948:	20000030 	.word	0x20000030

0801094c <_raise_r>:
 801094c:	291f      	cmp	r1, #31
 801094e:	b538      	push	{r3, r4, r5, lr}
 8010950:	4605      	mov	r5, r0
 8010952:	460c      	mov	r4, r1
 8010954:	d904      	bls.n	8010960 <_raise_r+0x14>
 8010956:	2316      	movs	r3, #22
 8010958:	6003      	str	r3, [r0, #0]
 801095a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801095e:	bd38      	pop	{r3, r4, r5, pc}
 8010960:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010962:	b112      	cbz	r2, 801096a <_raise_r+0x1e>
 8010964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010968:	b94b      	cbnz	r3, 801097e <_raise_r+0x32>
 801096a:	4628      	mov	r0, r5
 801096c:	f000 f830 	bl	80109d0 <_getpid_r>
 8010970:	4622      	mov	r2, r4
 8010972:	4601      	mov	r1, r0
 8010974:	4628      	mov	r0, r5
 8010976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801097a:	f000 b817 	b.w	80109ac <_kill_r>
 801097e:	2b01      	cmp	r3, #1
 8010980:	d00a      	beq.n	8010998 <_raise_r+0x4c>
 8010982:	1c59      	adds	r1, r3, #1
 8010984:	d103      	bne.n	801098e <_raise_r+0x42>
 8010986:	2316      	movs	r3, #22
 8010988:	6003      	str	r3, [r0, #0]
 801098a:	2001      	movs	r0, #1
 801098c:	e7e7      	b.n	801095e <_raise_r+0x12>
 801098e:	2100      	movs	r1, #0
 8010990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010994:	4620      	mov	r0, r4
 8010996:	4798      	blx	r3
 8010998:	2000      	movs	r0, #0
 801099a:	e7e0      	b.n	801095e <_raise_r+0x12>

0801099c <raise>:
 801099c:	4b02      	ldr	r3, [pc, #8]	@ (80109a8 <raise+0xc>)
 801099e:	4601      	mov	r1, r0
 80109a0:	6818      	ldr	r0, [r3, #0]
 80109a2:	f7ff bfd3 	b.w	801094c <_raise_r>
 80109a6:	bf00      	nop
 80109a8:	20000030 	.word	0x20000030

080109ac <_kill_r>:
 80109ac:	b538      	push	{r3, r4, r5, lr}
 80109ae:	4d07      	ldr	r5, [pc, #28]	@ (80109cc <_kill_r+0x20>)
 80109b0:	2300      	movs	r3, #0
 80109b2:	4604      	mov	r4, r0
 80109b4:	4608      	mov	r0, r1
 80109b6:	4611      	mov	r1, r2
 80109b8:	602b      	str	r3, [r5, #0]
 80109ba:	f7f1 fbe7 	bl	800218c <_kill>
 80109be:	1c43      	adds	r3, r0, #1
 80109c0:	d102      	bne.n	80109c8 <_kill_r+0x1c>
 80109c2:	682b      	ldr	r3, [r5, #0]
 80109c4:	b103      	cbz	r3, 80109c8 <_kill_r+0x1c>
 80109c6:	6023      	str	r3, [r4, #0]
 80109c8:	bd38      	pop	{r3, r4, r5, pc}
 80109ca:	bf00      	nop
 80109cc:	20000cbc 	.word	0x20000cbc

080109d0 <_getpid_r>:
 80109d0:	f7f1 bbd4 	b.w	800217c <_getpid>

080109d4 <__swhatbuf_r>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	460c      	mov	r4, r1
 80109d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109dc:	2900      	cmp	r1, #0
 80109de:	b096      	sub	sp, #88	@ 0x58
 80109e0:	4615      	mov	r5, r2
 80109e2:	461e      	mov	r6, r3
 80109e4:	da0d      	bge.n	8010a02 <__swhatbuf_r+0x2e>
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109ec:	f04f 0100 	mov.w	r1, #0
 80109f0:	bf14      	ite	ne
 80109f2:	2340      	movne	r3, #64	@ 0x40
 80109f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109f8:	2000      	movs	r0, #0
 80109fa:	6031      	str	r1, [r6, #0]
 80109fc:	602b      	str	r3, [r5, #0]
 80109fe:	b016      	add	sp, #88	@ 0x58
 8010a00:	bd70      	pop	{r4, r5, r6, pc}
 8010a02:	466a      	mov	r2, sp
 8010a04:	f000 f848 	bl	8010a98 <_fstat_r>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	dbec      	blt.n	80109e6 <__swhatbuf_r+0x12>
 8010a0c:	9901      	ldr	r1, [sp, #4]
 8010a0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a16:	4259      	negs	r1, r3
 8010a18:	4159      	adcs	r1, r3
 8010a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a1e:	e7eb      	b.n	80109f8 <__swhatbuf_r+0x24>

08010a20 <__smakebuf_r>:
 8010a20:	898b      	ldrh	r3, [r1, #12]
 8010a22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a24:	079d      	lsls	r5, r3, #30
 8010a26:	4606      	mov	r6, r0
 8010a28:	460c      	mov	r4, r1
 8010a2a:	d507      	bpl.n	8010a3c <__smakebuf_r+0x1c>
 8010a2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	2301      	movs	r3, #1
 8010a36:	6163      	str	r3, [r4, #20]
 8010a38:	b003      	add	sp, #12
 8010a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a3c:	ab01      	add	r3, sp, #4
 8010a3e:	466a      	mov	r2, sp
 8010a40:	f7ff ffc8 	bl	80109d4 <__swhatbuf_r>
 8010a44:	9f00      	ldr	r7, [sp, #0]
 8010a46:	4605      	mov	r5, r0
 8010a48:	4639      	mov	r1, r7
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7fb fd16 	bl	800c47c <_malloc_r>
 8010a50:	b948      	cbnz	r0, 8010a66 <__smakebuf_r+0x46>
 8010a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a56:	059a      	lsls	r2, r3, #22
 8010a58:	d4ee      	bmi.n	8010a38 <__smakebuf_r+0x18>
 8010a5a:	f023 0303 	bic.w	r3, r3, #3
 8010a5e:	f043 0302 	orr.w	r3, r3, #2
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	e7e2      	b.n	8010a2c <__smakebuf_r+0xc>
 8010a66:	89a3      	ldrh	r3, [r4, #12]
 8010a68:	6020      	str	r0, [r4, #0]
 8010a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a6e:	81a3      	strh	r3, [r4, #12]
 8010a70:	9b01      	ldr	r3, [sp, #4]
 8010a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a76:	b15b      	cbz	r3, 8010a90 <__smakebuf_r+0x70>
 8010a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	f000 f81d 	bl	8010abc <_isatty_r>
 8010a82:	b128      	cbz	r0, 8010a90 <__smakebuf_r+0x70>
 8010a84:	89a3      	ldrh	r3, [r4, #12]
 8010a86:	f023 0303 	bic.w	r3, r3, #3
 8010a8a:	f043 0301 	orr.w	r3, r3, #1
 8010a8e:	81a3      	strh	r3, [r4, #12]
 8010a90:	89a3      	ldrh	r3, [r4, #12]
 8010a92:	431d      	orrs	r5, r3
 8010a94:	81a5      	strh	r5, [r4, #12]
 8010a96:	e7cf      	b.n	8010a38 <__smakebuf_r+0x18>

08010a98 <_fstat_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4d07      	ldr	r5, [pc, #28]	@ (8010ab8 <_fstat_r+0x20>)
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	4608      	mov	r0, r1
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	602b      	str	r3, [r5, #0]
 8010aa6:	f7f1 fbd1 	bl	800224c <_fstat>
 8010aaa:	1c43      	adds	r3, r0, #1
 8010aac:	d102      	bne.n	8010ab4 <_fstat_r+0x1c>
 8010aae:	682b      	ldr	r3, [r5, #0]
 8010ab0:	b103      	cbz	r3, 8010ab4 <_fstat_r+0x1c>
 8010ab2:	6023      	str	r3, [r4, #0]
 8010ab4:	bd38      	pop	{r3, r4, r5, pc}
 8010ab6:	bf00      	nop
 8010ab8:	20000cbc 	.word	0x20000cbc

08010abc <_isatty_r>:
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	4d06      	ldr	r5, [pc, #24]	@ (8010ad8 <_isatty_r+0x1c>)
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	4608      	mov	r0, r1
 8010ac6:	602b      	str	r3, [r5, #0]
 8010ac8:	f7f1 fbd0 	bl	800226c <_isatty>
 8010acc:	1c43      	adds	r3, r0, #1
 8010ace:	d102      	bne.n	8010ad6 <_isatty_r+0x1a>
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	b103      	cbz	r3, 8010ad6 <_isatty_r+0x1a>
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	bd38      	pop	{r3, r4, r5, pc}
 8010ad8:	20000cbc 	.word	0x20000cbc

08010adc <pow>:
 8010adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ade:	ed2d 8b02 	vpush	{d8}
 8010ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ae6:	eef0 8a60 	vmov.f32	s17, s1
 8010aea:	ec55 4b11 	vmov	r4, r5, d1
 8010aee:	f000 f873 	bl	8010bd8 <__ieee754_pow>
 8010af2:	4622      	mov	r2, r4
 8010af4:	462b      	mov	r3, r5
 8010af6:	4620      	mov	r0, r4
 8010af8:	4629      	mov	r1, r5
 8010afa:	ec57 6b10 	vmov	r6, r7, d0
 8010afe:	f7f0 f835 	bl	8000b6c <__aeabi_dcmpun>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d13b      	bne.n	8010b7e <pow+0xa2>
 8010b06:	ec51 0b18 	vmov	r0, r1, d8
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	f7ef fffb 	bl	8000b08 <__aeabi_dcmpeq>
 8010b12:	b1b8      	cbz	r0, 8010b44 <pow+0x68>
 8010b14:	2200      	movs	r2, #0
 8010b16:	2300      	movs	r3, #0
 8010b18:	4620      	mov	r0, r4
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	f7ef fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d146      	bne.n	8010bb2 <pow+0xd6>
 8010b24:	ec45 4b10 	vmov	d0, r4, r5
 8010b28:	f000 f848 	bl	8010bbc <finite>
 8010b2c:	b338      	cbz	r0, 8010b7e <pow+0xa2>
 8010b2e:	2200      	movs	r2, #0
 8010b30:	2300      	movs	r3, #0
 8010b32:	4620      	mov	r0, r4
 8010b34:	4629      	mov	r1, r5
 8010b36:	f7ef fff1 	bl	8000b1c <__aeabi_dcmplt>
 8010b3a:	b300      	cbz	r0, 8010b7e <pow+0xa2>
 8010b3c:	f7fc fd18 	bl	800d570 <__errno>
 8010b40:	2322      	movs	r3, #34	@ 0x22
 8010b42:	e01b      	b.n	8010b7c <pow+0xa0>
 8010b44:	ec47 6b10 	vmov	d0, r6, r7
 8010b48:	f000 f838 	bl	8010bbc <finite>
 8010b4c:	b9e0      	cbnz	r0, 8010b88 <pow+0xac>
 8010b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8010b52:	eef0 0a68 	vmov.f32	s1, s17
 8010b56:	f000 f831 	bl	8010bbc <finite>
 8010b5a:	b1a8      	cbz	r0, 8010b88 <pow+0xac>
 8010b5c:	ec45 4b10 	vmov	d0, r4, r5
 8010b60:	f000 f82c 	bl	8010bbc <finite>
 8010b64:	b180      	cbz	r0, 8010b88 <pow+0xac>
 8010b66:	4632      	mov	r2, r6
 8010b68:	463b      	mov	r3, r7
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	f7ef fffd 	bl	8000b6c <__aeabi_dcmpun>
 8010b72:	2800      	cmp	r0, #0
 8010b74:	d0e2      	beq.n	8010b3c <pow+0x60>
 8010b76:	f7fc fcfb 	bl	800d570 <__errno>
 8010b7a:	2321      	movs	r3, #33	@ 0x21
 8010b7c:	6003      	str	r3, [r0, #0]
 8010b7e:	ecbd 8b02 	vpop	{d8}
 8010b82:	ec47 6b10 	vmov	d0, r6, r7
 8010b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b88:	2200      	movs	r2, #0
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	4639      	mov	r1, r7
 8010b90:	f7ef ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0f2      	beq.n	8010b7e <pow+0xa2>
 8010b98:	eeb0 0a48 	vmov.f32	s0, s16
 8010b9c:	eef0 0a68 	vmov.f32	s1, s17
 8010ba0:	f000 f80c 	bl	8010bbc <finite>
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	d0ea      	beq.n	8010b7e <pow+0xa2>
 8010ba8:	ec45 4b10 	vmov	d0, r4, r5
 8010bac:	f000 f806 	bl	8010bbc <finite>
 8010bb0:	e7c3      	b.n	8010b3a <pow+0x5e>
 8010bb2:	4f01      	ldr	r7, [pc, #4]	@ (8010bb8 <pow+0xdc>)
 8010bb4:	2600      	movs	r6, #0
 8010bb6:	e7e2      	b.n	8010b7e <pow+0xa2>
 8010bb8:	3ff00000 	.word	0x3ff00000

08010bbc <finite>:
 8010bbc:	b082      	sub	sp, #8
 8010bbe:	ed8d 0b00 	vstr	d0, [sp]
 8010bc2:	9801      	ldr	r0, [sp, #4]
 8010bc4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010bc8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010bcc:	0fc0      	lsrs	r0, r0, #31
 8010bce:	b002      	add	sp, #8
 8010bd0:	4770      	bx	lr
 8010bd2:	0000      	movs	r0, r0
 8010bd4:	0000      	movs	r0, r0
	...

08010bd8 <__ieee754_pow>:
 8010bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bdc:	b091      	sub	sp, #68	@ 0x44
 8010bde:	ed8d 1b00 	vstr	d1, [sp]
 8010be2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010be6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010bea:	ea5a 0001 	orrs.w	r0, sl, r1
 8010bee:	ec57 6b10 	vmov	r6, r7, d0
 8010bf2:	d113      	bne.n	8010c1c <__ieee754_pow+0x44>
 8010bf4:	19b3      	adds	r3, r6, r6
 8010bf6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010bfa:	4152      	adcs	r2, r2
 8010bfc:	4298      	cmp	r0, r3
 8010bfe:	4b9a      	ldr	r3, [pc, #616]	@ (8010e68 <__ieee754_pow+0x290>)
 8010c00:	4193      	sbcs	r3, r2
 8010c02:	f080 84ee 	bcs.w	80115e2 <__ieee754_pow+0xa0a>
 8010c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	4639      	mov	r1, r7
 8010c0e:	f7ef fb5d 	bl	80002cc <__adddf3>
 8010c12:	ec41 0b10 	vmov	d0, r0, r1
 8010c16:	b011      	add	sp, #68	@ 0x44
 8010c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1c:	4a93      	ldr	r2, [pc, #588]	@ (8010e6c <__ieee754_pow+0x294>)
 8010c1e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8010c22:	4295      	cmp	r5, r2
 8010c24:	46b8      	mov	r8, r7
 8010c26:	4633      	mov	r3, r6
 8010c28:	d80a      	bhi.n	8010c40 <__ieee754_pow+0x68>
 8010c2a:	d104      	bne.n	8010c36 <__ieee754_pow+0x5e>
 8010c2c:	2e00      	cmp	r6, #0
 8010c2e:	d1ea      	bne.n	8010c06 <__ieee754_pow+0x2e>
 8010c30:	45aa      	cmp	sl, r5
 8010c32:	d8e8      	bhi.n	8010c06 <__ieee754_pow+0x2e>
 8010c34:	e001      	b.n	8010c3a <__ieee754_pow+0x62>
 8010c36:	4592      	cmp	sl, r2
 8010c38:	d802      	bhi.n	8010c40 <__ieee754_pow+0x68>
 8010c3a:	4592      	cmp	sl, r2
 8010c3c:	d10f      	bne.n	8010c5e <__ieee754_pow+0x86>
 8010c3e:	b171      	cbz	r1, 8010c5e <__ieee754_pow+0x86>
 8010c40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010c44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010c48:	ea58 0803 	orrs.w	r8, r8, r3
 8010c4c:	d1db      	bne.n	8010c06 <__ieee754_pow+0x2e>
 8010c4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c52:	18db      	adds	r3, r3, r3
 8010c54:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010c58:	4152      	adcs	r2, r2
 8010c5a:	4598      	cmp	r8, r3
 8010c5c:	e7cf      	b.n	8010bfe <__ieee754_pow+0x26>
 8010c5e:	f1b8 0f00 	cmp.w	r8, #0
 8010c62:	46ab      	mov	fp, r5
 8010c64:	da43      	bge.n	8010cee <__ieee754_pow+0x116>
 8010c66:	4a82      	ldr	r2, [pc, #520]	@ (8010e70 <__ieee754_pow+0x298>)
 8010c68:	4592      	cmp	sl, r2
 8010c6a:	d856      	bhi.n	8010d1a <__ieee754_pow+0x142>
 8010c6c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010c70:	4592      	cmp	sl, r2
 8010c72:	f240 84c5 	bls.w	8011600 <__ieee754_pow+0xa28>
 8010c76:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010c7a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010c7e:	2a14      	cmp	r2, #20
 8010c80:	dd18      	ble.n	8010cb4 <__ieee754_pow+0xdc>
 8010c82:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010c86:	fa21 f402 	lsr.w	r4, r1, r2
 8010c8a:	fa04 f202 	lsl.w	r2, r4, r2
 8010c8e:	428a      	cmp	r2, r1
 8010c90:	f040 84b6 	bne.w	8011600 <__ieee754_pow+0xa28>
 8010c94:	f004 0401 	and.w	r4, r4, #1
 8010c98:	f1c4 0402 	rsb	r4, r4, #2
 8010c9c:	2900      	cmp	r1, #0
 8010c9e:	d159      	bne.n	8010d54 <__ieee754_pow+0x17c>
 8010ca0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010ca4:	d148      	bne.n	8010d38 <__ieee754_pow+0x160>
 8010ca6:	4632      	mov	r2, r6
 8010ca8:	463b      	mov	r3, r7
 8010caa:	4630      	mov	r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	f7ef fcc3 	bl	8000638 <__aeabi_dmul>
 8010cb2:	e7ae      	b.n	8010c12 <__ieee754_pow+0x3a>
 8010cb4:	2900      	cmp	r1, #0
 8010cb6:	d14c      	bne.n	8010d52 <__ieee754_pow+0x17a>
 8010cb8:	f1c2 0214 	rsb	r2, r2, #20
 8010cbc:	fa4a f402 	asr.w	r4, sl, r2
 8010cc0:	fa04 f202 	lsl.w	r2, r4, r2
 8010cc4:	4552      	cmp	r2, sl
 8010cc6:	f040 8498 	bne.w	80115fa <__ieee754_pow+0xa22>
 8010cca:	f004 0401 	and.w	r4, r4, #1
 8010cce:	f1c4 0402 	rsb	r4, r4, #2
 8010cd2:	4a68      	ldr	r2, [pc, #416]	@ (8010e74 <__ieee754_pow+0x29c>)
 8010cd4:	4592      	cmp	sl, r2
 8010cd6:	d1e3      	bne.n	8010ca0 <__ieee754_pow+0xc8>
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	f280 8489 	bge.w	80115f2 <__ieee754_pow+0xa1a>
 8010ce0:	4964      	ldr	r1, [pc, #400]	@ (8010e74 <__ieee754_pow+0x29c>)
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	463b      	mov	r3, r7
 8010ce6:	2000      	movs	r0, #0
 8010ce8:	f7ef fdd0 	bl	800088c <__aeabi_ddiv>
 8010cec:	e791      	b.n	8010c12 <__ieee754_pow+0x3a>
 8010cee:	2400      	movs	r4, #0
 8010cf0:	bb81      	cbnz	r1, 8010d54 <__ieee754_pow+0x17c>
 8010cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8010e6c <__ieee754_pow+0x294>)
 8010cf4:	4592      	cmp	sl, r2
 8010cf6:	d1ec      	bne.n	8010cd2 <__ieee754_pow+0xfa>
 8010cf8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8010cfc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010d00:	431a      	orrs	r2, r3
 8010d02:	f000 846e 	beq.w	80115e2 <__ieee754_pow+0xa0a>
 8010d06:	4b5c      	ldr	r3, [pc, #368]	@ (8010e78 <__ieee754_pow+0x2a0>)
 8010d08:	429d      	cmp	r5, r3
 8010d0a:	d908      	bls.n	8010d1e <__ieee754_pow+0x146>
 8010d0c:	f1b9 0f00 	cmp.w	r9, #0
 8010d10:	f280 846b 	bge.w	80115ea <__ieee754_pow+0xa12>
 8010d14:	2000      	movs	r0, #0
 8010d16:	2100      	movs	r1, #0
 8010d18:	e77b      	b.n	8010c12 <__ieee754_pow+0x3a>
 8010d1a:	2402      	movs	r4, #2
 8010d1c:	e7e8      	b.n	8010cf0 <__ieee754_pow+0x118>
 8010d1e:	f1b9 0f00 	cmp.w	r9, #0
 8010d22:	f04f 0000 	mov.w	r0, #0
 8010d26:	f04f 0100 	mov.w	r1, #0
 8010d2a:	f6bf af72 	bge.w	8010c12 <__ieee754_pow+0x3a>
 8010d2e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010d32:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010d36:	e76c      	b.n	8010c12 <__ieee754_pow+0x3a>
 8010d38:	4a50      	ldr	r2, [pc, #320]	@ (8010e7c <__ieee754_pow+0x2a4>)
 8010d3a:	4591      	cmp	r9, r2
 8010d3c:	d10a      	bne.n	8010d54 <__ieee754_pow+0x17c>
 8010d3e:	f1b8 0f00 	cmp.w	r8, #0
 8010d42:	db07      	blt.n	8010d54 <__ieee754_pow+0x17c>
 8010d44:	ec47 6b10 	vmov	d0, r6, r7
 8010d48:	b011      	add	sp, #68	@ 0x44
 8010d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4e:	f000 bd4f 	b.w	80117f0 <__ieee754_sqrt>
 8010d52:	2400      	movs	r4, #0
 8010d54:	ec47 6b10 	vmov	d0, r6, r7
 8010d58:	9302      	str	r3, [sp, #8]
 8010d5a:	f000 fc87 	bl	801166c <fabs>
 8010d5e:	9b02      	ldr	r3, [sp, #8]
 8010d60:	ec51 0b10 	vmov	r0, r1, d0
 8010d64:	bb43      	cbnz	r3, 8010db8 <__ieee754_pow+0x1e0>
 8010d66:	4b43      	ldr	r3, [pc, #268]	@ (8010e74 <__ieee754_pow+0x29c>)
 8010d68:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d000      	beq.n	8010d72 <__ieee754_pow+0x19a>
 8010d70:	bb15      	cbnz	r5, 8010db8 <__ieee754_pow+0x1e0>
 8010d72:	f1b9 0f00 	cmp.w	r9, #0
 8010d76:	da05      	bge.n	8010d84 <__ieee754_pow+0x1ac>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	460b      	mov	r3, r1
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	493d      	ldr	r1, [pc, #244]	@ (8010e74 <__ieee754_pow+0x29c>)
 8010d80:	f7ef fd84 	bl	800088c <__aeabi_ddiv>
 8010d84:	f1b8 0f00 	cmp.w	r8, #0
 8010d88:	f6bf af43 	bge.w	8010c12 <__ieee754_pow+0x3a>
 8010d8c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010d90:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010d94:	4325      	orrs	r5, r4
 8010d96:	d108      	bne.n	8010daa <__ieee754_pow+0x1d2>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4610      	mov	r0, r2
 8010d9e:	4619      	mov	r1, r3
 8010da0:	f7ef fa92 	bl	80002c8 <__aeabi_dsub>
 8010da4:	4602      	mov	r2, r0
 8010da6:	460b      	mov	r3, r1
 8010da8:	e79e      	b.n	8010ce8 <__ieee754_pow+0x110>
 8010daa:	2c01      	cmp	r4, #1
 8010dac:	f47f af31 	bne.w	8010c12 <__ieee754_pow+0x3a>
 8010db0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010db4:	4619      	mov	r1, r3
 8010db6:	e72c      	b.n	8010c12 <__ieee754_pow+0x3a>
 8010db8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	ea53 0204 	orrs.w	r2, r3, r4
 8010dc2:	d102      	bne.n	8010dca <__ieee754_pow+0x1f2>
 8010dc4:	4632      	mov	r2, r6
 8010dc6:	463b      	mov	r3, r7
 8010dc8:	e7e8      	b.n	8010d9c <__ieee754_pow+0x1c4>
 8010dca:	3c01      	subs	r4, #1
 8010dcc:	431c      	orrs	r4, r3
 8010dce:	d016      	beq.n	8010dfe <__ieee754_pow+0x226>
 8010dd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010e58 <__ieee754_pow+0x280>
 8010dd4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010dd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ddc:	f240 8110 	bls.w	8011000 <__ieee754_pow+0x428>
 8010de0:	4b27      	ldr	r3, [pc, #156]	@ (8010e80 <__ieee754_pow+0x2a8>)
 8010de2:	459a      	cmp	sl, r3
 8010de4:	4b24      	ldr	r3, [pc, #144]	@ (8010e78 <__ieee754_pow+0x2a0>)
 8010de6:	d916      	bls.n	8010e16 <__ieee754_pow+0x23e>
 8010de8:	429d      	cmp	r5, r3
 8010dea:	d80b      	bhi.n	8010e04 <__ieee754_pow+0x22c>
 8010dec:	f1b9 0f00 	cmp.w	r9, #0
 8010df0:	da0b      	bge.n	8010e0a <__ieee754_pow+0x232>
 8010df2:	2000      	movs	r0, #0
 8010df4:	b011      	add	sp, #68	@ 0x44
 8010df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfa:	f000 bcf1 	b.w	80117e0 <__math_oflow>
 8010dfe:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8010e60 <__ieee754_pow+0x288>
 8010e02:	e7e7      	b.n	8010dd4 <__ieee754_pow+0x1fc>
 8010e04:	f1b9 0f00 	cmp.w	r9, #0
 8010e08:	dcf3      	bgt.n	8010df2 <__ieee754_pow+0x21a>
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	b011      	add	sp, #68	@ 0x44
 8010e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e12:	f000 bcdd 	b.w	80117d0 <__math_uflow>
 8010e16:	429d      	cmp	r5, r3
 8010e18:	d20c      	bcs.n	8010e34 <__ieee754_pow+0x25c>
 8010e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2300      	movs	r3, #0
 8010e22:	f7ef fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8010e26:	3800      	subs	r0, #0
 8010e28:	bf18      	it	ne
 8010e2a:	2001      	movne	r0, #1
 8010e2c:	f1b9 0f00 	cmp.w	r9, #0
 8010e30:	daec      	bge.n	8010e0c <__ieee754_pow+0x234>
 8010e32:	e7df      	b.n	8010df4 <__ieee754_pow+0x21c>
 8010e34:	4b0f      	ldr	r3, [pc, #60]	@ (8010e74 <__ieee754_pow+0x29c>)
 8010e36:	429d      	cmp	r5, r3
 8010e38:	f04f 0200 	mov.w	r2, #0
 8010e3c:	d922      	bls.n	8010e84 <__ieee754_pow+0x2ac>
 8010e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e42:	2300      	movs	r3, #0
 8010e44:	f7ef fe6a 	bl	8000b1c <__aeabi_dcmplt>
 8010e48:	3800      	subs	r0, #0
 8010e4a:	bf18      	it	ne
 8010e4c:	2001      	movne	r0, #1
 8010e4e:	f1b9 0f00 	cmp.w	r9, #0
 8010e52:	dccf      	bgt.n	8010df4 <__ieee754_pow+0x21c>
 8010e54:	e7da      	b.n	8010e0c <__ieee754_pow+0x234>
 8010e56:	bf00      	nop
 8010e58:	00000000 	.word	0x00000000
 8010e5c:	3ff00000 	.word	0x3ff00000
 8010e60:	00000000 	.word	0x00000000
 8010e64:	bff00000 	.word	0xbff00000
 8010e68:	fff00000 	.word	0xfff00000
 8010e6c:	7ff00000 	.word	0x7ff00000
 8010e70:	433fffff 	.word	0x433fffff
 8010e74:	3ff00000 	.word	0x3ff00000
 8010e78:	3fefffff 	.word	0x3fefffff
 8010e7c:	3fe00000 	.word	0x3fe00000
 8010e80:	43f00000 	.word	0x43f00000
 8010e84:	4b5a      	ldr	r3, [pc, #360]	@ (8010ff0 <__ieee754_pow+0x418>)
 8010e86:	f7ef fa1f 	bl	80002c8 <__aeabi_dsub>
 8010e8a:	a351      	add	r3, pc, #324	@ (adr r3, 8010fd0 <__ieee754_pow+0x3f8>)
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	4604      	mov	r4, r0
 8010e92:	460d      	mov	r5, r1
 8010e94:	f7ef fbd0 	bl	8000638 <__aeabi_dmul>
 8010e98:	a34f      	add	r3, pc, #316	@ (adr r3, 8010fd8 <__ieee754_pow+0x400>)
 8010e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9e:	4606      	mov	r6, r0
 8010ea0:	460f      	mov	r7, r1
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	f7ef fbc7 	bl	8000638 <__aeabi_dmul>
 8010eaa:	4b52      	ldr	r3, [pc, #328]	@ (8010ff4 <__ieee754_pow+0x41c>)
 8010eac:	4682      	mov	sl, r0
 8010eae:	468b      	mov	fp, r1
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	4629      	mov	r1, r5
 8010eb6:	f7ef fbbf 	bl	8000638 <__aeabi_dmul>
 8010eba:	4602      	mov	r2, r0
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	a148      	add	r1, pc, #288	@ (adr r1, 8010fe0 <__ieee754_pow+0x408>)
 8010ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec4:	f7ef fa00 	bl	80002c8 <__aeabi_dsub>
 8010ec8:	4622      	mov	r2, r4
 8010eca:	462b      	mov	r3, r5
 8010ecc:	f7ef fbb4 	bl	8000638 <__aeabi_dmul>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	4948      	ldr	r1, [pc, #288]	@ (8010ff8 <__ieee754_pow+0x420>)
 8010ed8:	f7ef f9f6 	bl	80002c8 <__aeabi_dsub>
 8010edc:	4622      	mov	r2, r4
 8010ede:	4680      	mov	r8, r0
 8010ee0:	4689      	mov	r9, r1
 8010ee2:	462b      	mov	r3, r5
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	f7ef fba6 	bl	8000638 <__aeabi_dmul>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	4640      	mov	r0, r8
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	f7ef fba0 	bl	8000638 <__aeabi_dmul>
 8010ef8:	a33b      	add	r3, pc, #236	@ (adr r3, 8010fe8 <__ieee754_pow+0x410>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	f7ef fb9b 	bl	8000638 <__aeabi_dmul>
 8010f02:	4602      	mov	r2, r0
 8010f04:	460b      	mov	r3, r1
 8010f06:	4650      	mov	r0, sl
 8010f08:	4659      	mov	r1, fp
 8010f0a:	f7ef f9dd 	bl	80002c8 <__aeabi_dsub>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4680      	mov	r8, r0
 8010f14:	4689      	mov	r9, r1
 8010f16:	4630      	mov	r0, r6
 8010f18:	4639      	mov	r1, r7
 8010f1a:	f7ef f9d7 	bl	80002cc <__adddf3>
 8010f1e:	2400      	movs	r4, #0
 8010f20:	4632      	mov	r2, r6
 8010f22:	463b      	mov	r3, r7
 8010f24:	4620      	mov	r0, r4
 8010f26:	460d      	mov	r5, r1
 8010f28:	f7ef f9ce 	bl	80002c8 <__aeabi_dsub>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4640      	mov	r0, r8
 8010f32:	4649      	mov	r1, r9
 8010f34:	f7ef f9c8 	bl	80002c8 <__aeabi_dsub>
 8010f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f40:	2300      	movs	r3, #0
 8010f42:	9304      	str	r3, [sp, #16]
 8010f44:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f48:	4606      	mov	r6, r0
 8010f4a:	460f      	mov	r7, r1
 8010f4c:	465b      	mov	r3, fp
 8010f4e:	4652      	mov	r2, sl
 8010f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f54:	f7ef f9b8 	bl	80002c8 <__aeabi_dsub>
 8010f58:	4622      	mov	r2, r4
 8010f5a:	462b      	mov	r3, r5
 8010f5c:	f7ef fb6c 	bl	8000638 <__aeabi_dmul>
 8010f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f64:	4680      	mov	r8, r0
 8010f66:	4689      	mov	r9, r1
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	f7ef fb64 	bl	8000638 <__aeabi_dmul>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef f9a8 	bl	80002cc <__adddf3>
 8010f7c:	465b      	mov	r3, fp
 8010f7e:	4606      	mov	r6, r0
 8010f80:	460f      	mov	r7, r1
 8010f82:	4652      	mov	r2, sl
 8010f84:	4620      	mov	r0, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	f7ef fb56 	bl	8000638 <__aeabi_dmul>
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	4602      	mov	r2, r0
 8010f90:	4680      	mov	r8, r0
 8010f92:	4689      	mov	r9, r1
 8010f94:	4630      	mov	r0, r6
 8010f96:	4639      	mov	r1, r7
 8010f98:	f7ef f998 	bl	80002cc <__adddf3>
 8010f9c:	4b17      	ldr	r3, [pc, #92]	@ (8010ffc <__ieee754_pow+0x424>)
 8010f9e:	4299      	cmp	r1, r3
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	460d      	mov	r5, r1
 8010fa4:	468b      	mov	fp, r1
 8010fa6:	f340 820b 	ble.w	80113c0 <__ieee754_pow+0x7e8>
 8010faa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010fae:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010fb2:	4303      	orrs	r3, r0
 8010fb4:	f000 81ea 	beq.w	801138c <__ieee754_pow+0x7b4>
 8010fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f7ef fdac 	bl	8000b1c <__aeabi_dcmplt>
 8010fc4:	3800      	subs	r0, #0
 8010fc6:	bf18      	it	ne
 8010fc8:	2001      	movne	r0, #1
 8010fca:	e713      	b.n	8010df4 <__ieee754_pow+0x21c>
 8010fcc:	f3af 8000 	nop.w
 8010fd0:	60000000 	.word	0x60000000
 8010fd4:	3ff71547 	.word	0x3ff71547
 8010fd8:	f85ddf44 	.word	0xf85ddf44
 8010fdc:	3e54ae0b 	.word	0x3e54ae0b
 8010fe0:	55555555 	.word	0x55555555
 8010fe4:	3fd55555 	.word	0x3fd55555
 8010fe8:	652b82fe 	.word	0x652b82fe
 8010fec:	3ff71547 	.word	0x3ff71547
 8010ff0:	3ff00000 	.word	0x3ff00000
 8010ff4:	3fd00000 	.word	0x3fd00000
 8010ff8:	3fe00000 	.word	0x3fe00000
 8010ffc:	408fffff 	.word	0x408fffff
 8011000:	4bd5      	ldr	r3, [pc, #852]	@ (8011358 <__ieee754_pow+0x780>)
 8011002:	ea08 0303 	and.w	r3, r8, r3
 8011006:	2200      	movs	r2, #0
 8011008:	b92b      	cbnz	r3, 8011016 <__ieee754_pow+0x43e>
 801100a:	4bd4      	ldr	r3, [pc, #848]	@ (801135c <__ieee754_pow+0x784>)
 801100c:	f7ef fb14 	bl	8000638 <__aeabi_dmul>
 8011010:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8011014:	468b      	mov	fp, r1
 8011016:	ea4f 532b 	mov.w	r3, fp, asr #20
 801101a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801101e:	4413      	add	r3, r2
 8011020:	930a      	str	r3, [sp, #40]	@ 0x28
 8011022:	4bcf      	ldr	r3, [pc, #828]	@ (8011360 <__ieee754_pow+0x788>)
 8011024:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8011028:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801102c:	459b      	cmp	fp, r3
 801102e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011032:	dd08      	ble.n	8011046 <__ieee754_pow+0x46e>
 8011034:	4bcb      	ldr	r3, [pc, #812]	@ (8011364 <__ieee754_pow+0x78c>)
 8011036:	459b      	cmp	fp, r3
 8011038:	f340 81a5 	ble.w	8011386 <__ieee754_pow+0x7ae>
 801103c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801103e:	3301      	adds	r3, #1
 8011040:	930a      	str	r3, [sp, #40]	@ 0x28
 8011042:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8011046:	f04f 0a00 	mov.w	sl, #0
 801104a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801104e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011050:	4bc5      	ldr	r3, [pc, #788]	@ (8011368 <__ieee754_pow+0x790>)
 8011052:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011056:	ed93 7b00 	vldr	d7, [r3]
 801105a:	4629      	mov	r1, r5
 801105c:	ec53 2b17 	vmov	r2, r3, d7
 8011060:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011064:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011068:	f7ef f92e 	bl	80002c8 <__aeabi_dsub>
 801106c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011070:	4606      	mov	r6, r0
 8011072:	460f      	mov	r7, r1
 8011074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011078:	f7ef f928 	bl	80002cc <__adddf3>
 801107c:	4602      	mov	r2, r0
 801107e:	460b      	mov	r3, r1
 8011080:	2000      	movs	r0, #0
 8011082:	49ba      	ldr	r1, [pc, #744]	@ (801136c <__ieee754_pow+0x794>)
 8011084:	f7ef fc02 	bl	800088c <__aeabi_ddiv>
 8011088:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	4630      	mov	r0, r6
 8011092:	4639      	mov	r1, r7
 8011094:	f7ef fad0 	bl	8000638 <__aeabi_dmul>
 8011098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801109c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80110a0:	106d      	asrs	r5, r5, #1
 80110a2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80110a6:	f04f 0b00 	mov.w	fp, #0
 80110aa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80110ae:	4661      	mov	r1, ip
 80110b0:	2200      	movs	r2, #0
 80110b2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80110b6:	4658      	mov	r0, fp
 80110b8:	46e1      	mov	r9, ip
 80110ba:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80110be:	4614      	mov	r4, r2
 80110c0:	461d      	mov	r5, r3
 80110c2:	f7ef fab9 	bl	8000638 <__aeabi_dmul>
 80110c6:	4602      	mov	r2, r0
 80110c8:	460b      	mov	r3, r1
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	f7ef f8fb 	bl	80002c8 <__aeabi_dsub>
 80110d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110d6:	4606      	mov	r6, r0
 80110d8:	460f      	mov	r7, r1
 80110da:	4620      	mov	r0, r4
 80110dc:	4629      	mov	r1, r5
 80110de:	f7ef f8f3 	bl	80002c8 <__aeabi_dsub>
 80110e2:	4602      	mov	r2, r0
 80110e4:	460b      	mov	r3, r1
 80110e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110ea:	f7ef f8ed 	bl	80002c8 <__aeabi_dsub>
 80110ee:	465a      	mov	r2, fp
 80110f0:	464b      	mov	r3, r9
 80110f2:	f7ef faa1 	bl	8000638 <__aeabi_dmul>
 80110f6:	4602      	mov	r2, r0
 80110f8:	460b      	mov	r3, r1
 80110fa:	4630      	mov	r0, r6
 80110fc:	4639      	mov	r1, r7
 80110fe:	f7ef f8e3 	bl	80002c8 <__aeabi_dsub>
 8011102:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011106:	f7ef fa97 	bl	8000638 <__aeabi_dmul>
 801110a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801110e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011112:	4610      	mov	r0, r2
 8011114:	4619      	mov	r1, r3
 8011116:	f7ef fa8f 	bl	8000638 <__aeabi_dmul>
 801111a:	a37d      	add	r3, pc, #500	@ (adr r3, 8011310 <__ieee754_pow+0x738>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	4604      	mov	r4, r0
 8011122:	460d      	mov	r5, r1
 8011124:	f7ef fa88 	bl	8000638 <__aeabi_dmul>
 8011128:	a37b      	add	r3, pc, #492	@ (adr r3, 8011318 <__ieee754_pow+0x740>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef f8cd 	bl	80002cc <__adddf3>
 8011132:	4622      	mov	r2, r4
 8011134:	462b      	mov	r3, r5
 8011136:	f7ef fa7f 	bl	8000638 <__aeabi_dmul>
 801113a:	a379      	add	r3, pc, #484	@ (adr r3, 8011320 <__ieee754_pow+0x748>)
 801113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011140:	f7ef f8c4 	bl	80002cc <__adddf3>
 8011144:	4622      	mov	r2, r4
 8011146:	462b      	mov	r3, r5
 8011148:	f7ef fa76 	bl	8000638 <__aeabi_dmul>
 801114c:	a376      	add	r3, pc, #472	@ (adr r3, 8011328 <__ieee754_pow+0x750>)
 801114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011152:	f7ef f8bb 	bl	80002cc <__adddf3>
 8011156:	4622      	mov	r2, r4
 8011158:	462b      	mov	r3, r5
 801115a:	f7ef fa6d 	bl	8000638 <__aeabi_dmul>
 801115e:	a374      	add	r3, pc, #464	@ (adr r3, 8011330 <__ieee754_pow+0x758>)
 8011160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011164:	f7ef f8b2 	bl	80002cc <__adddf3>
 8011168:	4622      	mov	r2, r4
 801116a:	462b      	mov	r3, r5
 801116c:	f7ef fa64 	bl	8000638 <__aeabi_dmul>
 8011170:	a371      	add	r3, pc, #452	@ (adr r3, 8011338 <__ieee754_pow+0x760>)
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	f7ef f8a9 	bl	80002cc <__adddf3>
 801117a:	4622      	mov	r2, r4
 801117c:	4606      	mov	r6, r0
 801117e:	460f      	mov	r7, r1
 8011180:	462b      	mov	r3, r5
 8011182:	4620      	mov	r0, r4
 8011184:	4629      	mov	r1, r5
 8011186:	f7ef fa57 	bl	8000638 <__aeabi_dmul>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4630      	mov	r0, r6
 8011190:	4639      	mov	r1, r7
 8011192:	f7ef fa51 	bl	8000638 <__aeabi_dmul>
 8011196:	465a      	mov	r2, fp
 8011198:	4604      	mov	r4, r0
 801119a:	460d      	mov	r5, r1
 801119c:	464b      	mov	r3, r9
 801119e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111a2:	f7ef f893 	bl	80002cc <__adddf3>
 80111a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80111aa:	f7ef fa45 	bl	8000638 <__aeabi_dmul>
 80111ae:	4622      	mov	r2, r4
 80111b0:	462b      	mov	r3, r5
 80111b2:	f7ef f88b 	bl	80002cc <__adddf3>
 80111b6:	465a      	mov	r2, fp
 80111b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80111bc:	464b      	mov	r3, r9
 80111be:	4658      	mov	r0, fp
 80111c0:	4649      	mov	r1, r9
 80111c2:	f7ef fa39 	bl	8000638 <__aeabi_dmul>
 80111c6:	4b6a      	ldr	r3, [pc, #424]	@ (8011370 <__ieee754_pow+0x798>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	4606      	mov	r6, r0
 80111cc:	460f      	mov	r7, r1
 80111ce:	f7ef f87d 	bl	80002cc <__adddf3>
 80111d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80111d6:	f7ef f879 	bl	80002cc <__adddf3>
 80111da:	46d8      	mov	r8, fp
 80111dc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80111e0:	460d      	mov	r5, r1
 80111e2:	465a      	mov	r2, fp
 80111e4:	460b      	mov	r3, r1
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80111ee:	f7ef fa23 	bl	8000638 <__aeabi_dmul>
 80111f2:	465c      	mov	r4, fp
 80111f4:	4680      	mov	r8, r0
 80111f6:	4689      	mov	r9, r1
 80111f8:	4b5d      	ldr	r3, [pc, #372]	@ (8011370 <__ieee754_pow+0x798>)
 80111fa:	2200      	movs	r2, #0
 80111fc:	4620      	mov	r0, r4
 80111fe:	4629      	mov	r1, r5
 8011200:	f7ef f862 	bl	80002c8 <__aeabi_dsub>
 8011204:	4632      	mov	r2, r6
 8011206:	463b      	mov	r3, r7
 8011208:	f7ef f85e 	bl	80002c8 <__aeabi_dsub>
 801120c:	4602      	mov	r2, r0
 801120e:	460b      	mov	r3, r1
 8011210:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011214:	f7ef f858 	bl	80002c8 <__aeabi_dsub>
 8011218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801121c:	f7ef fa0c 	bl	8000638 <__aeabi_dmul>
 8011220:	4622      	mov	r2, r4
 8011222:	4606      	mov	r6, r0
 8011224:	460f      	mov	r7, r1
 8011226:	462b      	mov	r3, r5
 8011228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801122c:	f7ef fa04 	bl	8000638 <__aeabi_dmul>
 8011230:	4602      	mov	r2, r0
 8011232:	460b      	mov	r3, r1
 8011234:	4630      	mov	r0, r6
 8011236:	4639      	mov	r1, r7
 8011238:	f7ef f848 	bl	80002cc <__adddf3>
 801123c:	4606      	mov	r6, r0
 801123e:	460f      	mov	r7, r1
 8011240:	4602      	mov	r2, r0
 8011242:	460b      	mov	r3, r1
 8011244:	4640      	mov	r0, r8
 8011246:	4649      	mov	r1, r9
 8011248:	f7ef f840 	bl	80002cc <__adddf3>
 801124c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8011250:	a33b      	add	r3, pc, #236	@ (adr r3, 8011340 <__ieee754_pow+0x768>)
 8011252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011256:	4658      	mov	r0, fp
 8011258:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801125c:	460d      	mov	r5, r1
 801125e:	f7ef f9eb 	bl	8000638 <__aeabi_dmul>
 8011262:	465c      	mov	r4, fp
 8011264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011268:	4642      	mov	r2, r8
 801126a:	464b      	mov	r3, r9
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f7ef f82a 	bl	80002c8 <__aeabi_dsub>
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4630      	mov	r0, r6
 801127a:	4639      	mov	r1, r7
 801127c:	f7ef f824 	bl	80002c8 <__aeabi_dsub>
 8011280:	a331      	add	r3, pc, #196	@ (adr r3, 8011348 <__ieee754_pow+0x770>)
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	f7ef f9d7 	bl	8000638 <__aeabi_dmul>
 801128a:	a331      	add	r3, pc, #196	@ (adr r3, 8011350 <__ieee754_pow+0x778>)
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	4606      	mov	r6, r0
 8011292:	460f      	mov	r7, r1
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f7ef f9ce 	bl	8000638 <__aeabi_dmul>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	4630      	mov	r0, r6
 80112a2:	4639      	mov	r1, r7
 80112a4:	f7ef f812 	bl	80002cc <__adddf3>
 80112a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80112aa:	4b32      	ldr	r3, [pc, #200]	@ (8011374 <__ieee754_pow+0x79c>)
 80112ac:	4413      	add	r3, r2
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ef f80b 	bl	80002cc <__adddf3>
 80112b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80112ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80112bc:	f7ef f952 	bl	8000564 <__aeabi_i2d>
 80112c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80112c2:	4b2d      	ldr	r3, [pc, #180]	@ (8011378 <__ieee754_pow+0x7a0>)
 80112c4:	4413      	add	r3, r2
 80112c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112ca:	4606      	mov	r6, r0
 80112cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112d0:	460f      	mov	r7, r1
 80112d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112d6:	f7ee fff9 	bl	80002cc <__adddf3>
 80112da:	4642      	mov	r2, r8
 80112dc:	464b      	mov	r3, r9
 80112de:	f7ee fff5 	bl	80002cc <__adddf3>
 80112e2:	4632      	mov	r2, r6
 80112e4:	463b      	mov	r3, r7
 80112e6:	f7ee fff1 	bl	80002cc <__adddf3>
 80112ea:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80112ee:	4632      	mov	r2, r6
 80112f0:	463b      	mov	r3, r7
 80112f2:	4658      	mov	r0, fp
 80112f4:	460d      	mov	r5, r1
 80112f6:	f7ee ffe7 	bl	80002c8 <__aeabi_dsub>
 80112fa:	4642      	mov	r2, r8
 80112fc:	464b      	mov	r3, r9
 80112fe:	f7ee ffe3 	bl	80002c8 <__aeabi_dsub>
 8011302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011306:	f7ee ffdf 	bl	80002c8 <__aeabi_dsub>
 801130a:	465c      	mov	r4, fp
 801130c:	e036      	b.n	801137c <__ieee754_pow+0x7a4>
 801130e:	bf00      	nop
 8011310:	4a454eef 	.word	0x4a454eef
 8011314:	3fca7e28 	.word	0x3fca7e28
 8011318:	93c9db65 	.word	0x93c9db65
 801131c:	3fcd864a 	.word	0x3fcd864a
 8011320:	a91d4101 	.word	0xa91d4101
 8011324:	3fd17460 	.word	0x3fd17460
 8011328:	518f264d 	.word	0x518f264d
 801132c:	3fd55555 	.word	0x3fd55555
 8011330:	db6fabff 	.word	0xdb6fabff
 8011334:	3fdb6db6 	.word	0x3fdb6db6
 8011338:	33333303 	.word	0x33333303
 801133c:	3fe33333 	.word	0x3fe33333
 8011340:	e0000000 	.word	0xe0000000
 8011344:	3feec709 	.word	0x3feec709
 8011348:	dc3a03fd 	.word	0xdc3a03fd
 801134c:	3feec709 	.word	0x3feec709
 8011350:	145b01f5 	.word	0x145b01f5
 8011354:	be3e2fe0 	.word	0xbe3e2fe0
 8011358:	7ff00000 	.word	0x7ff00000
 801135c:	43400000 	.word	0x43400000
 8011360:	0003988e 	.word	0x0003988e
 8011364:	000bb679 	.word	0x000bb679
 8011368:	08011f80 	.word	0x08011f80
 801136c:	3ff00000 	.word	0x3ff00000
 8011370:	40080000 	.word	0x40080000
 8011374:	08011f60 	.word	0x08011f60
 8011378:	08011f70 	.word	0x08011f70
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011384:	e5d6      	b.n	8010f34 <__ieee754_pow+0x35c>
 8011386:	f04f 0a01 	mov.w	sl, #1
 801138a:	e65e      	b.n	801104a <__ieee754_pow+0x472>
 801138c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8011664 <__ieee754_pow+0xa8c>)
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	4630      	mov	r0, r6
 8011394:	4639      	mov	r1, r7
 8011396:	f7ee ff99 	bl	80002cc <__adddf3>
 801139a:	4642      	mov	r2, r8
 801139c:	e9cd 0100 	strd	r0, r1, [sp]
 80113a0:	464b      	mov	r3, r9
 80113a2:	4620      	mov	r0, r4
 80113a4:	4629      	mov	r1, r5
 80113a6:	f7ee ff8f 	bl	80002c8 <__aeabi_dsub>
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113b2:	f7ef fbd1 	bl	8000b58 <__aeabi_dcmpgt>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f47f adfe 	bne.w	8010fb8 <__ieee754_pow+0x3e0>
 80113bc:	4ba2      	ldr	r3, [pc, #648]	@ (8011648 <__ieee754_pow+0xa70>)
 80113be:	e022      	b.n	8011406 <__ieee754_pow+0x82e>
 80113c0:	4ca2      	ldr	r4, [pc, #648]	@ (801164c <__ieee754_pow+0xa74>)
 80113c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80113c6:	42a3      	cmp	r3, r4
 80113c8:	d919      	bls.n	80113fe <__ieee754_pow+0x826>
 80113ca:	4ba1      	ldr	r3, [pc, #644]	@ (8011650 <__ieee754_pow+0xa78>)
 80113cc:	440b      	add	r3, r1
 80113ce:	4303      	orrs	r3, r0
 80113d0:	d009      	beq.n	80113e6 <__ieee754_pow+0x80e>
 80113d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113d6:	2200      	movs	r2, #0
 80113d8:	2300      	movs	r3, #0
 80113da:	f7ef fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80113de:	3800      	subs	r0, #0
 80113e0:	bf18      	it	ne
 80113e2:	2001      	movne	r0, #1
 80113e4:	e512      	b.n	8010e0c <__ieee754_pow+0x234>
 80113e6:	4642      	mov	r2, r8
 80113e8:	464b      	mov	r3, r9
 80113ea:	f7ee ff6d 	bl	80002c8 <__aeabi_dsub>
 80113ee:	4632      	mov	r2, r6
 80113f0:	463b      	mov	r3, r7
 80113f2:	f7ef fba7 	bl	8000b44 <__aeabi_dcmpge>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d1eb      	bne.n	80113d2 <__ieee754_pow+0x7fa>
 80113fa:	4b96      	ldr	r3, [pc, #600]	@ (8011654 <__ieee754_pow+0xa7c>)
 80113fc:	e003      	b.n	8011406 <__ieee754_pow+0x82e>
 80113fe:	4a96      	ldr	r2, [pc, #600]	@ (8011658 <__ieee754_pow+0xa80>)
 8011400:	4293      	cmp	r3, r2
 8011402:	f240 80e7 	bls.w	80115d4 <__ieee754_pow+0x9fc>
 8011406:	151b      	asrs	r3, r3, #20
 8011408:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801140c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8011410:	fa4a fa03 	asr.w	sl, sl, r3
 8011414:	44da      	add	sl, fp
 8011416:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801141a:	4890      	ldr	r0, [pc, #576]	@ (801165c <__ieee754_pow+0xa84>)
 801141c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8011420:	4108      	asrs	r0, r1
 8011422:	ea00 030a 	and.w	r3, r0, sl
 8011426:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801142a:	f1c1 0114 	rsb	r1, r1, #20
 801142e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011432:	fa4a fa01 	asr.w	sl, sl, r1
 8011436:	f1bb 0f00 	cmp.w	fp, #0
 801143a:	4640      	mov	r0, r8
 801143c:	4649      	mov	r1, r9
 801143e:	f04f 0200 	mov.w	r2, #0
 8011442:	bfb8      	it	lt
 8011444:	f1ca 0a00 	rsblt	sl, sl, #0
 8011448:	f7ee ff3e 	bl	80002c8 <__aeabi_dsub>
 801144c:	4680      	mov	r8, r0
 801144e:	4689      	mov	r9, r1
 8011450:	4632      	mov	r2, r6
 8011452:	463b      	mov	r3, r7
 8011454:	4640      	mov	r0, r8
 8011456:	4649      	mov	r1, r9
 8011458:	f7ee ff38 	bl	80002cc <__adddf3>
 801145c:	2400      	movs	r4, #0
 801145e:	a36a      	add	r3, pc, #424	@ (adr r3, 8011608 <__ieee754_pow+0xa30>)
 8011460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011464:	4620      	mov	r0, r4
 8011466:	460d      	mov	r5, r1
 8011468:	f7ef f8e6 	bl	8000638 <__aeabi_dmul>
 801146c:	4642      	mov	r2, r8
 801146e:	e9cd 0100 	strd	r0, r1, [sp]
 8011472:	464b      	mov	r3, r9
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ee ff26 	bl	80002c8 <__aeabi_dsub>
 801147c:	4602      	mov	r2, r0
 801147e:	460b      	mov	r3, r1
 8011480:	4630      	mov	r0, r6
 8011482:	4639      	mov	r1, r7
 8011484:	f7ee ff20 	bl	80002c8 <__aeabi_dsub>
 8011488:	a361      	add	r3, pc, #388	@ (adr r3, 8011610 <__ieee754_pow+0xa38>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	f7ef f8d3 	bl	8000638 <__aeabi_dmul>
 8011492:	a361      	add	r3, pc, #388	@ (adr r3, 8011618 <__ieee754_pow+0xa40>)
 8011494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011498:	4680      	mov	r8, r0
 801149a:	4689      	mov	r9, r1
 801149c:	4620      	mov	r0, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	f7ef f8ca 	bl	8000638 <__aeabi_dmul>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	4640      	mov	r0, r8
 80114aa:	4649      	mov	r1, r9
 80114ac:	f7ee ff0e 	bl	80002cc <__adddf3>
 80114b0:	4604      	mov	r4, r0
 80114b2:	460d      	mov	r5, r1
 80114b4:	4602      	mov	r2, r0
 80114b6:	460b      	mov	r3, r1
 80114b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114bc:	f7ee ff06 	bl	80002cc <__adddf3>
 80114c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114c4:	4680      	mov	r8, r0
 80114c6:	4689      	mov	r9, r1
 80114c8:	f7ee fefe 	bl	80002c8 <__aeabi_dsub>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4620      	mov	r0, r4
 80114d2:	4629      	mov	r1, r5
 80114d4:	f7ee fef8 	bl	80002c8 <__aeabi_dsub>
 80114d8:	4642      	mov	r2, r8
 80114da:	4606      	mov	r6, r0
 80114dc:	460f      	mov	r7, r1
 80114de:	464b      	mov	r3, r9
 80114e0:	4640      	mov	r0, r8
 80114e2:	4649      	mov	r1, r9
 80114e4:	f7ef f8a8 	bl	8000638 <__aeabi_dmul>
 80114e8:	a34d      	add	r3, pc, #308	@ (adr r3, 8011620 <__ieee754_pow+0xa48>)
 80114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ee:	4604      	mov	r4, r0
 80114f0:	460d      	mov	r5, r1
 80114f2:	f7ef f8a1 	bl	8000638 <__aeabi_dmul>
 80114f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8011628 <__ieee754_pow+0xa50>)
 80114f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114fc:	f7ee fee4 	bl	80002c8 <__aeabi_dsub>
 8011500:	4622      	mov	r2, r4
 8011502:	462b      	mov	r3, r5
 8011504:	f7ef f898 	bl	8000638 <__aeabi_dmul>
 8011508:	a349      	add	r3, pc, #292	@ (adr r3, 8011630 <__ieee754_pow+0xa58>)
 801150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150e:	f7ee fedd 	bl	80002cc <__adddf3>
 8011512:	4622      	mov	r2, r4
 8011514:	462b      	mov	r3, r5
 8011516:	f7ef f88f 	bl	8000638 <__aeabi_dmul>
 801151a:	a347      	add	r3, pc, #284	@ (adr r3, 8011638 <__ieee754_pow+0xa60>)
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	f7ee fed2 	bl	80002c8 <__aeabi_dsub>
 8011524:	4622      	mov	r2, r4
 8011526:	462b      	mov	r3, r5
 8011528:	f7ef f886 	bl	8000638 <__aeabi_dmul>
 801152c:	a344      	add	r3, pc, #272	@ (adr r3, 8011640 <__ieee754_pow+0xa68>)
 801152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011532:	f7ee fecb 	bl	80002cc <__adddf3>
 8011536:	4622      	mov	r2, r4
 8011538:	462b      	mov	r3, r5
 801153a:	f7ef f87d 	bl	8000638 <__aeabi_dmul>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4640      	mov	r0, r8
 8011544:	4649      	mov	r1, r9
 8011546:	f7ee febf 	bl	80002c8 <__aeabi_dsub>
 801154a:	4604      	mov	r4, r0
 801154c:	460d      	mov	r5, r1
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ef f86f 	bl	8000638 <__aeabi_dmul>
 801155a:	2200      	movs	r2, #0
 801155c:	e9cd 0100 	strd	r0, r1, [sp]
 8011560:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011564:	4620      	mov	r0, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f7ee feae 	bl	80002c8 <__aeabi_dsub>
 801156c:	4602      	mov	r2, r0
 801156e:	460b      	mov	r3, r1
 8011570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011574:	f7ef f98a 	bl	800088c <__aeabi_ddiv>
 8011578:	4632      	mov	r2, r6
 801157a:	4604      	mov	r4, r0
 801157c:	460d      	mov	r5, r1
 801157e:	463b      	mov	r3, r7
 8011580:	4640      	mov	r0, r8
 8011582:	4649      	mov	r1, r9
 8011584:	f7ef f858 	bl	8000638 <__aeabi_dmul>
 8011588:	4632      	mov	r2, r6
 801158a:	463b      	mov	r3, r7
 801158c:	f7ee fe9e 	bl	80002cc <__adddf3>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4620      	mov	r0, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f7ee fe96 	bl	80002c8 <__aeabi_dsub>
 801159c:	4642      	mov	r2, r8
 801159e:	464b      	mov	r3, r9
 80115a0:	f7ee fe92 	bl	80002c8 <__aeabi_dsub>
 80115a4:	460b      	mov	r3, r1
 80115a6:	4602      	mov	r2, r0
 80115a8:	492d      	ldr	r1, [pc, #180]	@ (8011660 <__ieee754_pow+0xa88>)
 80115aa:	2000      	movs	r0, #0
 80115ac:	f7ee fe8c 	bl	80002c8 <__aeabi_dsub>
 80115b0:	ec41 0b10 	vmov	d0, r0, r1
 80115b4:	ee10 3a90 	vmov	r3, s1
 80115b8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80115bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115c0:	da0b      	bge.n	80115da <__ieee754_pow+0xa02>
 80115c2:	4650      	mov	r0, sl
 80115c4:	f000 f85c 	bl	8011680 <scalbn>
 80115c8:	ec51 0b10 	vmov	r0, r1, d0
 80115cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115d0:	f7ff bb6d 	b.w	8010cae <__ieee754_pow+0xd6>
 80115d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80115d8:	e73a      	b.n	8011450 <__ieee754_pow+0x878>
 80115da:	ec51 0b10 	vmov	r0, r1, d0
 80115de:	4619      	mov	r1, r3
 80115e0:	e7f4      	b.n	80115cc <__ieee754_pow+0x9f4>
 80115e2:	491f      	ldr	r1, [pc, #124]	@ (8011660 <__ieee754_pow+0xa88>)
 80115e4:	2000      	movs	r0, #0
 80115e6:	f7ff bb14 	b.w	8010c12 <__ieee754_pow+0x3a>
 80115ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ee:	f7ff bb10 	b.w	8010c12 <__ieee754_pow+0x3a>
 80115f2:	4630      	mov	r0, r6
 80115f4:	4639      	mov	r1, r7
 80115f6:	f7ff bb0c 	b.w	8010c12 <__ieee754_pow+0x3a>
 80115fa:	460c      	mov	r4, r1
 80115fc:	f7ff bb69 	b.w	8010cd2 <__ieee754_pow+0xfa>
 8011600:	2400      	movs	r4, #0
 8011602:	f7ff bb4b 	b.w	8010c9c <__ieee754_pow+0xc4>
 8011606:	bf00      	nop
 8011608:	00000000 	.word	0x00000000
 801160c:	3fe62e43 	.word	0x3fe62e43
 8011610:	fefa39ef 	.word	0xfefa39ef
 8011614:	3fe62e42 	.word	0x3fe62e42
 8011618:	0ca86c39 	.word	0x0ca86c39
 801161c:	be205c61 	.word	0xbe205c61
 8011620:	72bea4d0 	.word	0x72bea4d0
 8011624:	3e663769 	.word	0x3e663769
 8011628:	c5d26bf1 	.word	0xc5d26bf1
 801162c:	3ebbbd41 	.word	0x3ebbbd41
 8011630:	af25de2c 	.word	0xaf25de2c
 8011634:	3f11566a 	.word	0x3f11566a
 8011638:	16bebd93 	.word	0x16bebd93
 801163c:	3f66c16c 	.word	0x3f66c16c
 8011640:	5555553e 	.word	0x5555553e
 8011644:	3fc55555 	.word	0x3fc55555
 8011648:	40900000 	.word	0x40900000
 801164c:	4090cbff 	.word	0x4090cbff
 8011650:	3f6f3400 	.word	0x3f6f3400
 8011654:	4090cc00 	.word	0x4090cc00
 8011658:	3fe00000 	.word	0x3fe00000
 801165c:	fff00000 	.word	0xfff00000
 8011660:	3ff00000 	.word	0x3ff00000
 8011664:	652b82fe 	.word	0x652b82fe
 8011668:	3c971547 	.word	0x3c971547

0801166c <fabs>:
 801166c:	ec51 0b10 	vmov	r0, r1, d0
 8011670:	4602      	mov	r2, r0
 8011672:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011676:	ec43 2b10 	vmov	d0, r2, r3
 801167a:	4770      	bx	lr
 801167c:	0000      	movs	r0, r0
	...

08011680 <scalbn>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	ec55 4b10 	vmov	r4, r5, d0
 8011686:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801168a:	4606      	mov	r6, r0
 801168c:	462b      	mov	r3, r5
 801168e:	b991      	cbnz	r1, 80116b6 <scalbn+0x36>
 8011690:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011694:	4323      	orrs	r3, r4
 8011696:	d03b      	beq.n	8011710 <scalbn+0x90>
 8011698:	4b33      	ldr	r3, [pc, #204]	@ (8011768 <scalbn+0xe8>)
 801169a:	4620      	mov	r0, r4
 801169c:	4629      	mov	r1, r5
 801169e:	2200      	movs	r2, #0
 80116a0:	f7ee ffca 	bl	8000638 <__aeabi_dmul>
 80116a4:	4b31      	ldr	r3, [pc, #196]	@ (801176c <scalbn+0xec>)
 80116a6:	429e      	cmp	r6, r3
 80116a8:	4604      	mov	r4, r0
 80116aa:	460d      	mov	r5, r1
 80116ac:	da0f      	bge.n	80116ce <scalbn+0x4e>
 80116ae:	a326      	add	r3, pc, #152	@ (adr r3, 8011748 <scalbn+0xc8>)
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	e01e      	b.n	80116f4 <scalbn+0x74>
 80116b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80116ba:	4291      	cmp	r1, r2
 80116bc:	d10b      	bne.n	80116d6 <scalbn+0x56>
 80116be:	4622      	mov	r2, r4
 80116c0:	4620      	mov	r0, r4
 80116c2:	4629      	mov	r1, r5
 80116c4:	f7ee fe02 	bl	80002cc <__adddf3>
 80116c8:	4604      	mov	r4, r0
 80116ca:	460d      	mov	r5, r1
 80116cc:	e020      	b.n	8011710 <scalbn+0x90>
 80116ce:	460b      	mov	r3, r1
 80116d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116d4:	3936      	subs	r1, #54	@ 0x36
 80116d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80116da:	4296      	cmp	r6, r2
 80116dc:	dd0d      	ble.n	80116fa <scalbn+0x7a>
 80116de:	2d00      	cmp	r5, #0
 80116e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8011750 <scalbn+0xd0>)
 80116e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116e6:	da02      	bge.n	80116ee <scalbn+0x6e>
 80116e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8011758 <scalbn+0xd8>)
 80116ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ee:	a318      	add	r3, pc, #96	@ (adr r3, 8011750 <scalbn+0xd0>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	f7ee ffa0 	bl	8000638 <__aeabi_dmul>
 80116f8:	e7e6      	b.n	80116c8 <scalbn+0x48>
 80116fa:	1872      	adds	r2, r6, r1
 80116fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011700:	428a      	cmp	r2, r1
 8011702:	dcec      	bgt.n	80116de <scalbn+0x5e>
 8011704:	2a00      	cmp	r2, #0
 8011706:	dd06      	ble.n	8011716 <scalbn+0x96>
 8011708:	f36f 531e 	bfc	r3, #20, #11
 801170c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011710:	ec45 4b10 	vmov	d0, r4, r5
 8011714:	bd70      	pop	{r4, r5, r6, pc}
 8011716:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801171a:	da08      	bge.n	801172e <scalbn+0xae>
 801171c:	2d00      	cmp	r5, #0
 801171e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011748 <scalbn+0xc8>)
 8011720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011724:	dac3      	bge.n	80116ae <scalbn+0x2e>
 8011726:	a10e      	add	r1, pc, #56	@ (adr r1, 8011760 <scalbn+0xe0>)
 8011728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801172c:	e7bf      	b.n	80116ae <scalbn+0x2e>
 801172e:	3236      	adds	r2, #54	@ 0x36
 8011730:	f36f 531e 	bfc	r3, #20, #11
 8011734:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011738:	4620      	mov	r0, r4
 801173a:	4b0d      	ldr	r3, [pc, #52]	@ (8011770 <scalbn+0xf0>)
 801173c:	4629      	mov	r1, r5
 801173e:	2200      	movs	r2, #0
 8011740:	e7d8      	b.n	80116f4 <scalbn+0x74>
 8011742:	bf00      	nop
 8011744:	f3af 8000 	nop.w
 8011748:	c2f8f359 	.word	0xc2f8f359
 801174c:	01a56e1f 	.word	0x01a56e1f
 8011750:	8800759c 	.word	0x8800759c
 8011754:	7e37e43c 	.word	0x7e37e43c
 8011758:	8800759c 	.word	0x8800759c
 801175c:	fe37e43c 	.word	0xfe37e43c
 8011760:	c2f8f359 	.word	0xc2f8f359
 8011764:	81a56e1f 	.word	0x81a56e1f
 8011768:	43500000 	.word	0x43500000
 801176c:	ffff3cb0 	.word	0xffff3cb0
 8011770:	3c900000 	.word	0x3c900000

08011774 <with_errno>:
 8011774:	b510      	push	{r4, lr}
 8011776:	ed2d 8b02 	vpush	{d8}
 801177a:	eeb0 8a40 	vmov.f32	s16, s0
 801177e:	eef0 8a60 	vmov.f32	s17, s1
 8011782:	4604      	mov	r4, r0
 8011784:	f7fb fef4 	bl	800d570 <__errno>
 8011788:	eeb0 0a48 	vmov.f32	s0, s16
 801178c:	eef0 0a68 	vmov.f32	s1, s17
 8011790:	ecbd 8b02 	vpop	{d8}
 8011794:	6004      	str	r4, [r0, #0]
 8011796:	bd10      	pop	{r4, pc}

08011798 <xflow>:
 8011798:	4603      	mov	r3, r0
 801179a:	b507      	push	{r0, r1, r2, lr}
 801179c:	ec51 0b10 	vmov	r0, r1, d0
 80117a0:	b183      	cbz	r3, 80117c4 <xflow+0x2c>
 80117a2:	4602      	mov	r2, r0
 80117a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80117a8:	e9cd 2300 	strd	r2, r3, [sp]
 80117ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117b0:	f7ee ff42 	bl	8000638 <__aeabi_dmul>
 80117b4:	ec41 0b10 	vmov	d0, r0, r1
 80117b8:	2022      	movs	r0, #34	@ 0x22
 80117ba:	b003      	add	sp, #12
 80117bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80117c0:	f7ff bfd8 	b.w	8011774 <with_errno>
 80117c4:	4602      	mov	r2, r0
 80117c6:	460b      	mov	r3, r1
 80117c8:	e7ee      	b.n	80117a8 <xflow+0x10>
 80117ca:	0000      	movs	r0, r0
 80117cc:	0000      	movs	r0, r0
	...

080117d0 <__math_uflow>:
 80117d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80117d8 <__math_uflow+0x8>
 80117d4:	f7ff bfe0 	b.w	8011798 <xflow>
 80117d8:	00000000 	.word	0x00000000
 80117dc:	10000000 	.word	0x10000000

080117e0 <__math_oflow>:
 80117e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80117e8 <__math_oflow+0x8>
 80117e4:	f7ff bfd8 	b.w	8011798 <xflow>
 80117e8:	00000000 	.word	0x00000000
 80117ec:	70000000 	.word	0x70000000

080117f0 <__ieee754_sqrt>:
 80117f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	4a66      	ldr	r2, [pc, #408]	@ (8011990 <__ieee754_sqrt+0x1a0>)
 80117f6:	ec55 4b10 	vmov	r4, r5, d0
 80117fa:	43aa      	bics	r2, r5
 80117fc:	462b      	mov	r3, r5
 80117fe:	4621      	mov	r1, r4
 8011800:	d110      	bne.n	8011824 <__ieee754_sqrt+0x34>
 8011802:	4622      	mov	r2, r4
 8011804:	4620      	mov	r0, r4
 8011806:	4629      	mov	r1, r5
 8011808:	f7ee ff16 	bl	8000638 <__aeabi_dmul>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	4620      	mov	r0, r4
 8011812:	4629      	mov	r1, r5
 8011814:	f7ee fd5a 	bl	80002cc <__adddf3>
 8011818:	4604      	mov	r4, r0
 801181a:	460d      	mov	r5, r1
 801181c:	ec45 4b10 	vmov	d0, r4, r5
 8011820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011824:	2d00      	cmp	r5, #0
 8011826:	dc0e      	bgt.n	8011846 <__ieee754_sqrt+0x56>
 8011828:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801182c:	4322      	orrs	r2, r4
 801182e:	d0f5      	beq.n	801181c <__ieee754_sqrt+0x2c>
 8011830:	b19d      	cbz	r5, 801185a <__ieee754_sqrt+0x6a>
 8011832:	4622      	mov	r2, r4
 8011834:	4620      	mov	r0, r4
 8011836:	4629      	mov	r1, r5
 8011838:	f7ee fd46 	bl	80002c8 <__aeabi_dsub>
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	f7ef f824 	bl	800088c <__aeabi_ddiv>
 8011844:	e7e8      	b.n	8011818 <__ieee754_sqrt+0x28>
 8011846:	152a      	asrs	r2, r5, #20
 8011848:	d115      	bne.n	8011876 <__ieee754_sqrt+0x86>
 801184a:	2000      	movs	r0, #0
 801184c:	e009      	b.n	8011862 <__ieee754_sqrt+0x72>
 801184e:	0acb      	lsrs	r3, r1, #11
 8011850:	3a15      	subs	r2, #21
 8011852:	0549      	lsls	r1, r1, #21
 8011854:	2b00      	cmp	r3, #0
 8011856:	d0fa      	beq.n	801184e <__ieee754_sqrt+0x5e>
 8011858:	e7f7      	b.n	801184a <__ieee754_sqrt+0x5a>
 801185a:	462a      	mov	r2, r5
 801185c:	e7fa      	b.n	8011854 <__ieee754_sqrt+0x64>
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	3001      	adds	r0, #1
 8011862:	02dc      	lsls	r4, r3, #11
 8011864:	d5fb      	bpl.n	801185e <__ieee754_sqrt+0x6e>
 8011866:	1e44      	subs	r4, r0, #1
 8011868:	1b12      	subs	r2, r2, r4
 801186a:	f1c0 0420 	rsb	r4, r0, #32
 801186e:	fa21 f404 	lsr.w	r4, r1, r4
 8011872:	4323      	orrs	r3, r4
 8011874:	4081      	lsls	r1, r0
 8011876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801187a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801187e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011882:	07d2      	lsls	r2, r2, #31
 8011884:	bf5c      	itt	pl
 8011886:	005b      	lslpl	r3, r3, #1
 8011888:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801188c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011890:	bf58      	it	pl
 8011892:	0049      	lslpl	r1, r1, #1
 8011894:	2600      	movs	r6, #0
 8011896:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801189a:	107f      	asrs	r7, r7, #1
 801189c:	0049      	lsls	r1, r1, #1
 801189e:	2016      	movs	r0, #22
 80118a0:	4632      	mov	r2, r6
 80118a2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80118a6:	1915      	adds	r5, r2, r4
 80118a8:	429d      	cmp	r5, r3
 80118aa:	bfde      	ittt	le
 80118ac:	192a      	addle	r2, r5, r4
 80118ae:	1b5b      	suble	r3, r3, r5
 80118b0:	1936      	addle	r6, r6, r4
 80118b2:	0fcd      	lsrs	r5, r1, #31
 80118b4:	3801      	subs	r0, #1
 80118b6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80118ba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80118c2:	d1f0      	bne.n	80118a6 <__ieee754_sqrt+0xb6>
 80118c4:	4605      	mov	r5, r0
 80118c6:	2420      	movs	r4, #32
 80118c8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80118cc:	4293      	cmp	r3, r2
 80118ce:	eb0c 0e00 	add.w	lr, ip, r0
 80118d2:	dc02      	bgt.n	80118da <__ieee754_sqrt+0xea>
 80118d4:	d113      	bne.n	80118fe <__ieee754_sqrt+0x10e>
 80118d6:	458e      	cmp	lr, r1
 80118d8:	d811      	bhi.n	80118fe <__ieee754_sqrt+0x10e>
 80118da:	f1be 0f00 	cmp.w	lr, #0
 80118de:	eb0e 000c 	add.w	r0, lr, ip
 80118e2:	da3f      	bge.n	8011964 <__ieee754_sqrt+0x174>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	db3d      	blt.n	8011964 <__ieee754_sqrt+0x174>
 80118e8:	f102 0801 	add.w	r8, r2, #1
 80118ec:	1a9b      	subs	r3, r3, r2
 80118ee:	458e      	cmp	lr, r1
 80118f0:	bf88      	it	hi
 80118f2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80118f6:	eba1 010e 	sub.w	r1, r1, lr
 80118fa:	4465      	add	r5, ip
 80118fc:	4642      	mov	r2, r8
 80118fe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011902:	3c01      	subs	r4, #1
 8011904:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011908:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801190c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011910:	d1dc      	bne.n	80118cc <__ieee754_sqrt+0xdc>
 8011912:	4319      	orrs	r1, r3
 8011914:	d01b      	beq.n	801194e <__ieee754_sqrt+0x15e>
 8011916:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8011994 <__ieee754_sqrt+0x1a4>
 801191a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8011998 <__ieee754_sqrt+0x1a8>
 801191e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011922:	e9db 2300 	ldrd	r2, r3, [fp]
 8011926:	f7ee fccf 	bl	80002c8 <__aeabi_dsub>
 801192a:	e9da 8900 	ldrd	r8, r9, [sl]
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4640      	mov	r0, r8
 8011934:	4649      	mov	r1, r9
 8011936:	f7ef f8fb 	bl	8000b30 <__aeabi_dcmple>
 801193a:	b140      	cbz	r0, 801194e <__ieee754_sqrt+0x15e>
 801193c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8011940:	e9da 0100 	ldrd	r0, r1, [sl]
 8011944:	e9db 2300 	ldrd	r2, r3, [fp]
 8011948:	d10e      	bne.n	8011968 <__ieee754_sqrt+0x178>
 801194a:	3601      	adds	r6, #1
 801194c:	4625      	mov	r5, r4
 801194e:	1073      	asrs	r3, r6, #1
 8011950:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011954:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011958:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801195c:	086b      	lsrs	r3, r5, #1
 801195e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8011962:	e759      	b.n	8011818 <__ieee754_sqrt+0x28>
 8011964:	4690      	mov	r8, r2
 8011966:	e7c1      	b.n	80118ec <__ieee754_sqrt+0xfc>
 8011968:	f7ee fcb0 	bl	80002cc <__adddf3>
 801196c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011970:	4602      	mov	r2, r0
 8011972:	460b      	mov	r3, r1
 8011974:	4640      	mov	r0, r8
 8011976:	4649      	mov	r1, r9
 8011978:	f7ef f8d0 	bl	8000b1c <__aeabi_dcmplt>
 801197c:	b120      	cbz	r0, 8011988 <__ieee754_sqrt+0x198>
 801197e:	1cab      	adds	r3, r5, #2
 8011980:	bf08      	it	eq
 8011982:	3601      	addeq	r6, #1
 8011984:	3502      	adds	r5, #2
 8011986:	e7e2      	b.n	801194e <__ieee754_sqrt+0x15e>
 8011988:	1c6b      	adds	r3, r5, #1
 801198a:	f023 0501 	bic.w	r5, r3, #1
 801198e:	e7de      	b.n	801194e <__ieee754_sqrt+0x15e>
 8011990:	7ff00000 	.word	0x7ff00000
 8011994:	08011f98 	.word	0x08011f98
 8011998:	08011f90 	.word	0x08011f90

0801199c <_init>:
 801199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199e:	bf00      	nop
 80119a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119a2:	bc08      	pop	{r3}
 80119a4:	469e      	mov	lr, r3
 80119a6:	4770      	bx	lr

080119a8 <_fini>:
 80119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119aa:	bf00      	nop
 80119ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ae:	bc08      	pop	{r3}
 80119b0:	469e      	mov	lr, r3
 80119b2:	4770      	bx	lr
